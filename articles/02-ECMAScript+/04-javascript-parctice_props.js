import projectConfig from '/pagic.config.js';
var _a, _b;
export default {
    'prev': {
        "title": "TypeScript",
        "link": "articles/02-ECMAScript+/03-typescript.html"
    },
    'next': {
        "link": "articles/03-HTML+CSS/index.html",
        "title": "HTML + CSS"
    },
    'sidebar': [
        {
            "title": "ESMAScript+ 面试宝典",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "link": "articles/00-Beginner/index.html",
            "title": "一切的起源",
            "children": [
                {
                    "title": "前端大事记",
                    "link": "articles/00-Beginner/00-es-timeline.html",
                    "pagePath": "articles/00-Beginner/00-es-timeline.md"
                },
                {
                    "title": "ES 方向 & 谁在招人？",
                    "link": "articles/00-Beginner/01-es-direction.html",
                    "pagePath": "articles/00-Beginner/01-es-direction.md"
                },
                {
                    "title": "大厂职级",
                    "link": "articles/00-Beginner/02-es-rank.html",
                    "pagePath": "articles/00-Beginner/02-es-rank.md"
                },
                {
                    "title": "看什么书？",
                    "link": "articles/00-Beginner/03-es-books.html",
                    "pagePath": "articles/00-Beginner/03-es-books.md"
                }
            ],
            "pagePath": "articles/00-Beginner/README.md"
        },
        {
            "link": "articles/01-Programming/index.html",
            "title": "编程基础",
            "children": [
                {
                    "title": "编程语言",
                    "link": "articles/01-Programming/00-language.html",
                    "pagePath": "articles/01-Programming/00-language.md"
                },
                {
                    "title": "操作系统",
                    "link": "articles/01-Programming/01-operating-system.html",
                    "pagePath": "articles/01-Programming/01-operating-system.md"
                },
                {
                    "title": "算法",
                    "link": "articles/01-Programming/02-algorithms.html",
                    "pagePath": "articles/01-Programming/02-algorithms.md"
                },
                {
                    "title": "设计模式",
                    "link": "articles/01-Programming/03-design-patterns.html",
                    "pagePath": "articles/01-Programming/03-design-patterns.md"
                },
                {
                    "title": "软件工程",
                    "link": "articles/01-Programming/04-software-engineering.html",
                    "pagePath": "articles/01-Programming/04-software-engineering.md"
                },
                {
                    "title": "测试",
                    "link": "articles/01-Programming/05-software-test.html",
                    "pagePath": "articles/01-Programming/05-software-test.md"
                },
                {
                    "title": "版本控制",
                    "link": "articles/01-Programming/06-version-control.html",
                    "pagePath": "articles/01-Programming/06-version-control.md"
                },
                {
                    "title": "计算机组成原理",
                    "link": "articles/01-Programming/07-computer-principles.html",
                    "pagePath": "articles/01-Programming/07-computer-principles.md"
                },
                {
                    "title": "编译原理",
                    "link": "articles/01-Programming/08-compilation-principle.html",
                    "pagePath": "articles/01-Programming/08-compilation-principle.md"
                }
            ],
            "pagePath": "articles/01-Programming/README.md"
        },
        {
            "link": "articles/02-ECMAScript+/index.html",
            "title": "ECMAScript+",
            "children": [
                {
                    "title": "ECMAScript",
                    "link": "articles/02-ECMAScript+/00-ecmascript.html",
                    "pagePath": "articles/02-ECMAScript+/00-ecmascript.md"
                },
                {
                    "title": "ES 数据类型",
                    "link": "articles/02-ECMAScript+/01-es-data-type.html",
                    "pagePath": "articles/02-ECMAScript+/01-es-data-type.md"
                },
                {
                    "title": "JavaScript 基础知识",
                    "link": "articles/02-ECMAScript+/02-javascript.html",
                    "pagePath": "articles/02-ECMAScript+/02-javascript.md"
                },
                {
                    "title": "TypeScript",
                    "link": "articles/02-ECMAScript+/03-typescript.html",
                    "pagePath": "articles/02-ECMAScript+/03-typescript.md"
                },
                {
                    "title": "JavaScript 常见实战题",
                    "link": "articles/02-ECMAScript+/04-javascript-parctice.html",
                    "pagePath": "articles/02-ECMAScript+/04-javascript-parctice.md"
                }
            ],
            "pagePath": "articles/02-ECMAScript+/README.md"
        },
        {
            "link": "articles/03-HTML+CSS/index.html",
            "title": "HTML + CSS",
            "children": [
                {
                    "title": "HTML",
                    "link": "articles/03-HTML+CSS/00-html.html",
                    "pagePath": "articles/03-HTML+CSS/00-html.md"
                },
                {
                    "title": "CSS",
                    "link": "articles/03-HTML+CSS/01-css-design.html",
                    "pagePath": "articles/03-HTML+CSS/01-css-design.md"
                },
                {
                    "title": "CSS 进阶",
                    "link": "articles/03-HTML+CSS/02-css-advance.html",
                    "pagePath": "articles/03-HTML+CSS/02-css-advance.md"
                },
                {
                    "title": "CSS 实战",
                    "link": "articles/03-HTML+CSS/03-css-practice.html",
                    "pagePath": "articles/03-HTML+CSS/03-css-practice.md"
                },
                {
                    "title": "DOM + BOM",
                    "link": "articles/03-HTML+CSS/04-dom-bom.html",
                    "pagePath": "articles/03-HTML+CSS/04-dom-bom.md"
                }
            ],
            "pagePath": "articles/03-HTML+CSS/README.md"
        },
        {
            "link": "articles/04-Network+API/index.html",
            "title": "网络 + 前后端协作",
            "children": [
                {
                    "title": "网络",
                    "link": "articles/04-Network+API/00-network.html",
                    "pagePath": "articles/04-Network+API/00-network.md"
                },
                {
                    "title": "前后端协作",
                    "link": "articles/04-Network+API/01-fe-be-api.html",
                    "pagePath": "articles/04-Network+API/01-fe-be-api.md"
                },
                {
                    "title": "网络安全",
                    "link": "articles/04-Network+API/02-network-security.html",
                    "pagePath": "articles/04-Network+API/02-network-security.md"
                }
            ],
            "pagePath": "articles/04-Network+API/README.md"
        },
        {
            "link": "articles/05-V8+Runtime/index.html",
            "title": "V8 + JavaScript 运行时",
            "children": [
                {
                    "title": "V8",
                    "link": "articles/05-V8+Runtime/00-v8.html",
                    "pagePath": "articles/05-V8+Runtime/00-v8.md"
                },
                {
                    "title": "Node",
                    "link": "articles/05-V8+Runtime/01-node.html",
                    "pagePath": "articles/05-V8+Runtime/01-node.md"
                },
                {
                    "title": "Deno",
                    "link": "articles/05-V8+Runtime/02-deno.html",
                    "pagePath": "articles/05-V8+Runtime/02-deno.md"
                }
            ],
            "pagePath": "articles/05-V8+Runtime/README.md"
        },
        {
            "link": "articles/06-FE+Browser/index.html",
            "title": "前端应用开发 + 浏览器",
            "children": [
                {
                    "title": "浏览器",
                    "link": "articles/06-FE+Browser/00-browser.html",
                    "pagePath": "articles/06-FE+Browser/00-browser.md"
                },
                {
                    "title": "前端工程化",
                    "link": "articles/06-FE+Browser/01-fe-engineering.html",
                    "pagePath": "articles/06-FE+Browser/01-fe-engineering.md"
                },
                {
                    "title": "前端工具链",
                    "link": "articles/06-FE+Browser/02-fe-tooltain.html",
                    "pagePath": "articles/06-FE+Browser/02-fe-tooltain.md"
                },
                {
                    "title": "前端打包工具",
                    "link": "articles/06-FE+Browser/03-pack-tool.html",
                    "pagePath": "articles/06-FE+Browser/03-pack-tool.md"
                },
                {
                    "title": "移动端 Web 开发",
                    "link": "articles/06-FE+Browser/04-fe-mobile.html",
                    "pagePath": "articles/06-FE+Browser/04-fe-mobile.md"
                },
                {
                    "title": "React 基础",
                    "link": "articles/06-FE+Browser/05-react.html",
                    "pagePath": "articles/06-FE+Browser/05-react.md"
                },
                {
                    "title": "React 实战",
                    "link": "articles/06-FE+Browser/06-react-practice.html",
                    "pagePath": "articles/06-FE+Browser/06-react-practice.md"
                },
                {
                    "title": "Vue",
                    "link": "articles/06-FE+Browser/07-vue.html",
                    "pagePath": "articles/06-FE+Browser/07-vue.md"
                },
                {
                    "title": "iframe",
                    "link": "articles/06-FE+Browser/08-iframe.html",
                    "pagePath": "articles/06-FE+Browser/08-iframe.md"
                }
            ],
            "pagePath": "articles/06-FE+Browser/README.md"
        },
        {
            "link": "articles/07-BE+Server/index.html",
            "title": "后端应用开发 + 服务器",
            "children": [
                {
                    "title": "Linux + Nginx + 数据库",
                    "link": "articles/07-BE+Server/00-linux-nginx-database.html",
                    "pagePath": "articles/07-BE+Server/00-linux-nginx-database.md"
                },
                {
                    "title": "Node 框架",
                    "link": "articles/07-BE+Server/01-node-framework.html",
                    "pagePath": "articles/07-BE+Server/01-node-framework.md"
                }
            ],
            "pagePath": "articles/07-BE+Server/README.md"
        },
        {
            "title": "如何用 Markdown 绘制图片",
            "link": "articles/draw-in-markdown.html",
            "pagePath": "articles/draw-in-markdown.md"
        },
        {
            "title": "变更日志",
            "link": "articles/roadmap.html",
            "pagePath": "articles/roadmap.md"
        }
    ],
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['undefined'] },
    'pagePath': "articles/02-ECMAScript+/04-javascript-parctice.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/02-ECMAScript+/04-javascript-parctice.html",
    'title': "JavaScript 常见实战题",
    'content': (React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>JavaScript 常见实战题</h1>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">§</a></h2>\n<h3 id="%E5%AE%9E%E7%8E%B0-instanceof">实现 InstanceOf<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-instanceof">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// L 表示左表达式，R 表示右表达式</span>\n<span class="token keyword">function</span> <span class="token function">instance_of</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">R</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token constant">O</span> <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n  <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token property-access">__proto__</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 这里重点：当 O 严格等于 L 时，返回 true</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token constant">O</span> <span class="token operator">===</span> <span class="token constant">L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token property-access">__proto__</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">实现 JavaScript 继承<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 原型链继承</span>\n<span class="token keyword">function</span> <span class="token function">myExtend</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">F</span></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n    <span class="token class-name">C</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">C</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token property-access">super</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">实现 JavaScript 函数重载？<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">§</a></h3>\n<p>方法 1，通过非严格模式下的 arguments：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">overLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token comment">// 根据 arguments.length，对不同的值进行不同的操作</span>\n　　<span class="token keyword control-flow">switch</span><span class="token punctuation">(</span><span class="token parameter">arguments<span class="token punctuation">.</span><span class="token property-access">length</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>\n　　　　　　<span class="token comment">/*操作1的代码写在这里*/</span>\n　　　　　　<span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n　　　　<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n　　　　　　<span class="token comment">/*操作2的代码写在这里*/</span>\n　　　　　　<span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n　　　　<span class="token keyword module">default</span><span class="token operator">:</span>\n　　　　    <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>方法 2：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// addMethod</span>\n<span class="token keyword">function</span> <span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> old <span class="token operator">=</span> object<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 把前一次添加的方法存在一个临时变量 old 里面</span>\n　　object<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 重写了 object[name] 的方法</span>\n　　　　<span class="token comment">// 如果调用 object[name] 方法时，传入的参数个数跟预期的一致，则直接调用</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　<span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token comment">// 否则，判断 old 是否是函数，如果是，就调用 old</span>\n　　　　<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> old <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　<span class="token keyword control-flow">return</span> old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n　　values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Dean Edwards"</span><span class="token punctuation">,</span> <span class="token string">"Alex Russell"</span><span class="token punctuation">,</span> <span class="token string">"Dean Tom"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token comment">/* 下面开始通过 addMethod 来实现对 people.find 方法的重载 */</span>\n \n<span class="token comment">// 不传参数时，返回 peopld.values 里面的所有元素</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 传一个参数时，按 first-name 的匹配进行返回</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">firstName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n　　<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　ret<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n　　<span class="token keyword control-flow">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 传两个参数时，返回 first-name 和 last-name 都匹配的元素</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n　　<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">(</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　ret<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n　　<span class="token keyword control-flow">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 测试：</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards", "Alex Russell", "Dean Tom"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">"Dean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards", "Dean Tom"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">"Dean Edwards"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards"]</span>\n</code></pre>\n<h2 id="%E5%AF%B9%E8%B1%A1">对象<a class="anchor" href="#%E5%AF%B9%E8%B1%A1">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">如何区分 Object 和 Array<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">§</a></h3>\n<ul>\n<li>利用 toString() 方法</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayOne</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Array]"</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"k1"</span><span class="token operator">:</span><span class="token string">"v1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"对象的结果："</span><span class="token operator">+</span><span class="token function">isArrayOne</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"数组的结果："</span><span class="token operator">+</span><span class="token function">isArrayOne</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>利用 isArray，使用 Javascript 1.8.5(ECMAScript 5)，变量名字.isArray( ) 可以实现这个目的，前提是支持这一函数。其实 isArray() 就是利用 toString() 方法的封装使用。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//obj 是待检测的对象，如果返回 true 则为数组</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">isArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>  \n     <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"[object Array]"</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>通过 instanceof 运算符来判断(instanceof 运算符左边是子对象，即待测对象，右边是父构造函数，这里是 Array)。instance 实例：凡是用 new 构造函数创建出的对象，都称为是构造函数的实例。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"k1"</span><span class="token operator">:</span><span class="token string">"v1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Instanceof 处理对象的结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Instanceof 处理数组的结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ul>\n<li>使用 isPrototypeOf() 函数检测一个对象是否是 Array 的原型，或处于原型链中。不但可检测直接父对象，还可检测整个原型链上的所有父对象。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// true 表示是数组，false 不是数组</span>\n</code></pre>\n<ul>\n<li>利用构造函数 constructor</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'k\'</span><span class="token operator">:</span><span class="token string">\'v\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>使用 typeof + arr.concat 结合判断，局限性在于如果开发者定义了 concat 属性，便会引起冲突</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayFour</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">concat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword control-flow">return</span> <span class="token string">"This is Array"</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>  \n            <span class="token keyword control-flow">return</span> <span class="token string">"This Not Array"</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'k\'</span><span class="token operator">:</span><span class="token string">\'v\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isArrayFour</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isArrayFour</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7">遍历对象的属性<a class="anchor" href="#%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7">§</a></h3>\n<ul>\n<li>For in 遍历到原型方法，如果不想遍历原型方法和属性，可以增加 hasOwnProperty 方法来判断</li>\n<li>ES5的Object.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword control-flow">if</span>（myObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n　　　　<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 使用Object.getOwnPropertyNames(obj)遍历</span>\n<span class="token comment">// 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'0\'</span><span class="token operator">:</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'1\'</span><span class="token operator">:</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'2\'</span><span class="token operator">:</span><span class="token string">\'c\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 使用Reflect.ownKeys(obj)遍历</span>\n<span class="token comment">// 返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'0\'</span><span class="token operator">:</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'1\'</span><span class="token operator">:</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'2\'</span><span class="token operator">:</span><span class="token string">\'c\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n　　<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">动手实现 new<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Person</span></span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">job</span> <span class="token operator">=</span> job<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个空对象</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 获取构造函数</span>\n  <span class="token keyword">let</span> <span class="token maybe-class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 设置空对象的原型</span>\n  obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n  <span class="token comment">// 绑定 this</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Con</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 返回新对象</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span><span class="token punctuation">,</span> <span class="token string">\'Nicholas\'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">\'Front-end developer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// var person = new Person(\'Nicholas\', 29, \'Front-end developer\'); </span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token comment">// Nicholas</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Nicholas</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">动手实现 Object.create()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function-variable function">create</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">F</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85">JavaScript 如何实现封装？<a class="anchor" href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85">§</a></h3>\n<h3 id="javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81">JavaScript 如何实现多态？<a class="anchor" href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81">§</a></h3>\n<h3 id="javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF">JavaScript 如何实现继承？<a class="anchor" href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF">§</a></h3>\n<p><strong>类式继承</strong>：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span> <span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 为父类添加共有方法</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明子类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'dog\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 继承父类</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "汪汪"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["pig", "cat"]</span>\n</code></pre>\n<p><strong>构造函数继承</strong>：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span><span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 添加共有方法</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明子类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\n</code></pre>\n<p><strong>组合继承</strong>：将类式继承和构造函数继承组合在一起</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span><span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>     \n<span class="token comment">// 添加共有方法  </span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>     \n<span class="token comment">// 声明子类   </span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 构造函数继承    </span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>   \n<span class="token comment">// 类式继承</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "汪汪"</span>\n</code></pre>\n<p><strong>寄生组合式继承</strong>：强化的部分就是在组合继承的基础上减少一次多余的调用父类的构造函数</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span> <span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'dog\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* 注意下面两行 */</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token maybe-class-name">Dog</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "汪汪"</span>\n</code></pre>\n<p>extends 继承：ES6</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>   \n  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>   \n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>   \n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "汪汪"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "黑色"</span>\n</code></pre>\n<h3 id="js-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-publicprivateprotected">JS 如何实现 public/private/protected？<a class="anchor" href="#js-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-publicprivateprotected">§</a></h3>\n<h3 id="js-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9E%8B%E6%A8%A1%E6%8B%9F%E7%B1%BB%E7%9A%84">JS 如何使用原型模拟类的？<a class="anchor" href="#js-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9E%8B%E6%A8%A1%E6%8B%9F%E7%B1%BB%E7%9A%84">§</a></h3>\n<ul>\n<li>private：因为javascript函数级作用域的特性（在函数中定义的属性和方法外界访问不到），所以我们在函数内部直接定义的属性和方法都是私有的。</li>\n<li>public：通过new关键词实例化时，this定义的属性和变量都会被复制一遍，所以通过this定义的属性和方法就是公有的。通过prototype创建的属性在类的实例化之后类的实例化对象也是可以访问到的，所以也是公有的。</li>\n<li>protected：在函数的内部，我们可以通过this定义的方法访问到一些类的私有属性和方法，在实例化的时候就可以初始化对象的一些属性了。</li>\n</ul>\n<h3 id="%E5%AE%9E%E7%8E%B0-add123add1-2-3">实现 add(1)(2)(3)、add(1, 2, 3)<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-add123add1-2-3">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">function</span> <span class="token function">resultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> acc <span class="token operator">+</span> next<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//will only sum first 3 arguments</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> resultFn\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">resultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95">常见方法<a class="anchor" href="#%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95">§</a></h2>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">动手实现 call()、bind()、apply()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span><span class="token punctuation">;</span>\n  <span class="token comment">// 给想让 this 指向的对象临时添加一个 fn，while 来确保此 fn 是独特的。</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token comment">// 使用 eval 而不使用新特性 …Array.from(arguments).slice(1) 时。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arguments["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 由于不能改变想让 this 指向的对象，再次删掉临时建立的属性。</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>txt <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">firstName</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">lastName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">"Doe"</span>\n<span class="token punctuation">}</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\nperson<span class="token punctuation">.</span><span class="token property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">myCall</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// myApply，相比 myCall，只需要注意一下，第二个参数是否存在就可以。</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n \n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arr["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this 保存在 thatFunc，否则 this 的指向会根据场景的不同而改变。</span>\n  <span class="token comment">// 取出 thatArg。</span>\n  <span class="token keyword">var</span> thatFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      thatArg <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 获取除第一个外的参数列表，继续传入到返回的参数中。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 确保 thatFunc 是个函数，否则报错。</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> thatFunc <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Function.prototype.bind - \'</span> <span class="token operator">+</span>\n      <span class="token string">\'what is trying to be bound is not callable\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 由于 bind 不是立即执行的，所以要返回一个函数。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fBound</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用了 apply 改变指向</span>\n    <span class="token comment">// 如果是在 new 关键字调用情况下，会指向 newObj，而 newObj 就是 fBound 的实例，this instanceof fBound 就是true，我们不再使用 thatArg 作为 greeting 的 this，而是直接使用 newObj 作为 greeting 的 this。</span>\n    <span class="token comment">// 而当做普通函数调用的时候，this instanceof fBound 就是 false，greeting 中的 this 依然指向 thatArg。</span>\n    <span class="token keyword control-flow">return</span> thatFunc<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fBound</span>\n      <span class="token operator">?</span> <span class="token keyword">this</span>·\n      <span class="token operator">:</span> thatArg<span class="token punctuation">,</span>\n      <span class="token comment">// 拼凑</span>\n      args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 中间变量 fNOP 空函数，来维护原型关系，并让 fBound.prototype 与 thatFunc.prototype 不再指向同一个原型函数。</span>\n  <span class="token comment">// 确保 fBound 的 prototype 修改时，greeting 的 prototype 不会被修改。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fNOP</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 把 fBound 的 prototype 修改为绑定函数的 prototype，这样 newObj 就可以“继承”自 greeting 了。</span>\n    fNOP<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n  fBound<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> fBound<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"Smiley"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token string">\'greetingValue\'</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token operator">+</span><span class="token string">" to "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" in "</span><span class="token operator">+</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// var objGreeting = greeting.bind(obj, \'the world\');</span>\n<span class="token keyword">var</span> objGreeting <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token method function property-access">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'the world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">objGreeting</span><span class="token punctuation">(</span><span class="token string">\'JS\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Welcome Smiley to the world in JS</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">动手实现 map()、filter()、reduce()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">myMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用数组的 reduce 方法实现</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    accumulator<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> accumulator<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'spray\'</span><span class="token punctuation">,</span> <span class="token string">\'limit\'</span><span class="token punctuation">,</span> <span class="token string">\'elite\'</span><span class="token punctuation">,</span> <span class="token string">\'exuberant\'</span><span class="token punctuation">,</span> <span class="token string">\'destruction\'</span><span class="token punctuation">,</span> <span class="token string">\'present\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result1 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">myFilter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> accum <span class="token operator">=</span> init<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    accum <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>accum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> accum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">myReduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask">使用 MutationObserver 实现 microtask<a class="anchor" href="#%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask">§</a></h3>\n<p>MutationObserver 可以用来实现 microtask，它属于 microtask，优先级小于 Promise，一般是 Promise 不支持时才会这样做。</p>\n<p>它是 HTML5 中的新特性，作用是：监听一个 DOM 变动，</p>\n<p>当 DOM 对象树发生任何变动时，Mutation Observer 会得到通知。</p>\n<p>像以前的 Vue 源码中就是利用它来模拟 nextTick 的，具体原理是，创建一个 TextNode 并监听内容变化，</p>\n<p>然后要 nextTick 的时候去改一下这个节点的文本内容。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>nextTickHandler<span class="token punctuation">)</span>\n<span class="token keyword">var</span> textNode <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createTextNode</span><span class="token punctuation">(</span><span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nobserver<span class="token punctuation">.</span><span class="token method function property-access">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    characterData<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>\n    textNode<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token operator">=</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过，现在的 Vue 2.5+ 的 nextTick 实现移除了 MutationObserver 的方式(据说是兼容性原因)，取而代之的是使用 MessageChannel</p>\n<p>(当然，默认情况仍然是 Promise，不支持才兼容的)。</p>\n<p>MessageChannel 属于宏任务，优先级是：MessageChannel-&gt;setTimeout，所以 Vue 2.5+ 内部的 nextTick 与 2.4 及之前的实现是不一样的，需要注意下。</p>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0">动手实现柯里化函数<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myCurry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> innerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> finalArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>innerArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> finalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 自动检测参数是否传递完毕</span>\n<span class="token keyword">function</span> <span class="token function">myCurry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token function">currify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">>=</span> fn<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">?</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span>\n    currify<span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop">动手实现 JavaScript AOP<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop">§</a></h3>\n<blockquote>\n<p><a href="https://juejin.im/post/6844903858649432078">https://juejin.im/post/6844903858649432078</a></p>\n</blockquote>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">emptyFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">findPointCut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pointCut <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> func <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">[</span>pointCut<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 暂不支持属性的aop</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> func<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 暂不支持模糊匹配切点</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token function-variable function">advice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> advice <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> old <span class="token operator">=</span> <span class="token function">findPointCut</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">[</span>pointCut<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n            <span class="token keyword">let</span> joinPoint <span class="token operator">=</span> <span class="token punctuation">{</span>\n                target<span class="token punctuation">,</span>\n                method<span class="token operator">:</span> old<span class="token punctuation">,</span>\n                args<span class="token punctuation">,</span>\n                self\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> <span class="token punctuation">{</span>before<span class="token punctuation">,</span> round<span class="token punctuation">,</span> after<span class="token punctuation">,</span> afterReturn<span class="token punctuation">,</span> afterThrow<span class="token punctuation">}</span> <span class="token operator">=</span> advice<span class="token punctuation">;</span>\n            <span class="token comment">// 前置增强</span>\n            before <span class="token operator">&amp;&amp;</span> before<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 环绕增强</span>\n            <span class="token keyword">let</span> roundJoinPoint <span class="token operator">=</span> joinPoint<span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>round<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                roundJoinPoint <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                        <span class="token keyword control-flow">return</span> old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arguments <span class="token operator">||</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 没有声明round增强,直接执行原方法</span>\n                <span class="token function-variable function">round</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>after <span class="token operator">||</span> afterReturn <span class="token operator">||</span> afterThrow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n                <span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n                <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n                    result <span class="token operator">=</span> round<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> roundJoinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">// 返回增强</span>\n                    <span class="token keyword control-flow">return</span> afterReturn <span class="token operator">&amp;&amp;</span> afterReturn<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">||</span> result<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    error <span class="token operator">=</span> e<span class="token punctuation">;</span>\n                    <span class="token comment">// 异常增强</span>\n                    <span class="token keyword">let</span> shouldIntercept <span class="token operator">=</span> afterThrow <span class="token operator">&amp;&amp;</span> afterThrow<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword control-flow">throw</span> e<span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span> <span class="token keyword control-flow">finally</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 后置增强</span>\n                    after <span class="token operator">&amp;&amp;</span> after<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">,</span> result<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 未定义任何后置增强,直接执行原方法</span>\n                <span class="token keyword control-flow">return</span> round<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> roundJoinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> aop <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> before <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>before<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">after</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> after <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>after<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">afterReturn</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> afterReturn <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>afterReturn<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">afterThrow</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> afterThrow <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>afterThrow<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">round</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> round <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>round<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> aop<span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81">动手实现防抖和节流？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81">§</a></h3>\n<ul>\n<li>防抖 debounce：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。\n<ul>\n<li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li>\n<li>频繁操作点赞和取消点赞，因此需要获取最后一次操作结果并发送给服务器</li>\n</ul>\n</li>\n<li>节流 throttle：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。\n<ul>\n<li>拖拽场景：鼠标不断点击触发，mousedown(单位时间内只触发一次)</li>\n<li>缩放场景：window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题。</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 防抖简化版</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 节流简化版</span>\n<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 防抖复杂版</span>\n<span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/86426949">https://zhuanlan.zhihu.com/p/86426949</a></span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">debounced</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  debounced<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> debounced<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 节流复杂版</span>\n<span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/87591677">https://zhuanlan.zhihu.com/p/87591677</a></span>\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">trailing</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  throttled<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">模板引擎的简单实现<a class="anchor" href="#%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> template <span class="token operator">=</span> <span class="token string">\'我是{{name}}，年龄{{age}}，性别{{sex}}\'</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'姓名\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我是姓名，年龄18，性别undefined</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\{\{(\w+)\}\}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 模板字符串正则</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断模板里是否有模板字符串</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 查找当前模板里第一个模板字符串的字段</span>\n    template <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将第一个模板字符串渲染</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归的渲染并返回渲染后的结构</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> template<span class="token punctuation">;</span> <span class="token comment">// 如果模板没有模板字符串直接返回</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%BC%82%E6%AD%A5%E5%AE%9E%E6%88%98">异步实战<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E5%AE%9E%E6%88%98">§</a></h2>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise">动手实现 Promise<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 判断变量否为function</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token parameter">variable</span> <span class="token arrow operator">=></span> <span class="token keyword">typeof</span> variable <span class="token operator">===</span> <span class="token string">\'function\'</span>\n<span class="token comment">// 定义Promise的三种状态常量</span>\n<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">\'PENDING\'</span>\n<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">\'FULFILLED\'</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">\'REJECTED\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'MyPromise must accept a function as a parameter\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 添加状态</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">PENDING</span>\n    <span class="token comment">// 添加状态</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n    <span class="token comment">// 添加成功回调函数队列</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_fulfilledQueues</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// 添加失败回调函数队列</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// 执行handle</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">_resolve</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">_reject</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">_reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加resovle时执行的函数</span>\n  <span class="token function">_resolve</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n      <span class="token comment">// 依次执行成功队列中的函数，并清空队列</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">runFulfilled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cb<span class="token punctuation">;</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>cb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_fulfilledQueues</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 依次执行失败队列中的函数，并清空队列</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">runRejected</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cb<span class="token punctuation">;</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>cb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n        */</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        val<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> value\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">FULFILLED</span>\n          <span class="token function">runFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> err\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n          <span class="token function">runRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> val\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">FULFILLED</span>\n        <span class="token function">runFulfilled</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 为了支持同步的Promise，这里采用异步调用</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加reject时执行的函数</span>\n  <span class="token function">_reject</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n    <span class="token comment">// 依次执行失败队列中的函数，并清空队列</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> err\n      <span class="token keyword">let</span> cb<span class="token punctuation">;</span>\n      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>cb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 为了支持同步的Promise，这里采用异步调用</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加then方法</span>\n  <span class="token function">then</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> _value<span class="token punctuation">,</span> _status <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token comment">// 返回一个新的Promise对象</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onFulfilledNext<span class="token punctuation">,</span> onRejectedNext</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 封装一个成功时执行的函数</span>\n      <span class="token keyword">let</span> <span class="token function-variable function">fulfilled</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">onFulfilledNext</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> res <span class="token operator">=</span>  <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span>\n              res<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>onFulfilledNext<span class="token punctuation">,</span> onRejectedNext<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n              <span class="token comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span>\n              <span class="token function">onFulfilledNext</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 如果函数执行出错，新的Promise对象的状态为失败</span>\n          <span class="token function">onRejectedNext</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 封装一个失败时执行的函数</span>\n      <span class="token keyword">let</span> <span class="token function-variable function">rejected</span> <span class="token operator">=</span> <span class="token parameter">error</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">onRejectedNext</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span>\n              res<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>onFulfilledNext<span class="token punctuation">,</span> onRejectedNext<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n              <span class="token comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span>\n              <span class="token function">onFulfilledNext</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 如果函数执行出错，新的Promise对象的状态为失败</span>\n          <span class="token function">onRejectedNext</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">switch</span> <span class="token punctuation">(</span>_status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span>\n        <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_fulfilledQueues</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>rejected<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">break</span>\n          <span class="token comment">// 当状态已经改变时，立即执行对应的回调函数</span>\n        <span class="token keyword">case</span> <span class="token constant">FULFILLED</span><span class="token operator">:</span>\n          <span class="token function">fulfilled</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">break</span>\n        <span class="token keyword">case</span> <span class="token constant">REJECTED</span><span class="token operator">:</span>\n          <span class="token function">rejected</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">break</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加catch方法</span>\n  <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword nil">undefined</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态resolve方法</span>\n  <span class="token keyword">static</span> <span class="token function">resolve</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果参数是MyPromise实例，直接返回这个实例</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> value\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token arrow operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态reject方法</span>\n  <span class="token keyword">static</span> <span class="token function">reject</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve <span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态all方法</span>\n  <span class="token keyword">static</span> <span class="token function">all</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token doc-comment comment">/**\n         * 返回值的集合\n         */</span>\n      <span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> p<span class="token punctuation">]</span> <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res\n          count<span class="token operator">++</span>\n          <span class="token comment">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token comment">// 有一个被rejected时返回的MyPromise状态就变成rejected</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态race方法</span>\n  <span class="token keyword">static</span> <span class="token function">race</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">finally</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>\n      <span class="token parameter">value</span>  <span class="token arrow operator">=></span> <span class="token maybe-class-name">MyPromise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token parameter">reason</span> <span class="token arrow operator">=></span> <span class="token maybe-class-name">MyPromise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword control-flow">throw</span> reason <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0-asyncawait">实现 async/await<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-asyncawait">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 就是利用 generator（生成器）分割代码片段。然后我们使用一个函数让其自迭代，每一个yield 用 promise 包裹起来。执行下一步的时机由 promise 来控制</span>\n<span class="token keyword">function</span> <span class="token function">_asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token comment">// 将返回值promise化</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 获取迭代器实例</span>\n      <span class="token keyword">var</span> gen <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 执行下一步</span>\n      <span class="token keyword">function</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">asyncGeneratorStep</span><span class="token punctuation">(</span>gen<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> _next<span class="token punctuation">,</span> _throw<span class="token punctuation">,</span> <span class="token string">\'next\'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 抛出异常</span>\n      <span class="token keyword">function</span> <span class="token function">_throw</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">asyncGeneratorStep</span><span class="token punctuation">(</span>gen<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> _next<span class="token punctuation">,</span> _throw<span class="token punctuation">,</span> <span class="token string">\'throw\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 第一次触发</span>\n      <span class="token function">_next</span><span class="token punctuation">(</span><span class="token keyword nil">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest">动手实现 XMLHttpRequest<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> fnSucc<span class="token punctuation">,</span> fnFaild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>\n  <span class="token comment">// 第一步：创建 XMLHttpRequest 对象</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">XMLHttpRequest</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 现代浏览器</span>\n      xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// IE6 等老版本浏览器</span>\n      xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 第四步：处理响应</span>\n  xhttp<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">readyState</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fnSucc</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>fnFaild<span class="token punctuation">)</span> <span class="token function">fnFaild</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 第二步：初始化 XMLHttpRequest 方法</span>\n  xhttp<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 第三步：XMLHttpRequest 向服务器发送请求</span>\n  xhttp<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">\'/smileyFace\'</span><span class="token punctuation">,</span> mySuccessFunc<span class="token punctuation">,</span> myFailFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">实现多个异步的并发控制<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">§</a></h3>\n<p>请实现如下的函数，可以批量请求数据，所有的URL地址在urls参数中，同时可以通过max参数 控制请求的并发度。当所有的请求结束后，需要执行callback回调。发请求的函数可以直接使用fetch。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> max<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> fetchArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 存储并发max的promise数组</span>\n            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">function</span> <span class="token function">toFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 所有的都处理完了， 返回一个resolve</span>\n                <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出第i个url， 放入fetch里面 , 每取一次i++</span>\n            one<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>fetchArr<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>fetchArr<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当promise执行完毕后，从数组删除</span>\n            fetchArr<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将当前的promise存入并发数组中       其实将这个push放到上一行会更好理解，那样就是我们同步的思维顺序，先push进去，再等promise执行完了之后再删除。  但由于then是异步的，所以怎么放都可以。</span>\n            <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>fetchArr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">>=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 当并行数量达到最大后， 用race比较 第一个完成的， 然后再调用一下函数自身。</span>\n                p <span class="token operator">=</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">race</span><span class="token punctuation">(</span>fetchArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword control-flow">return</span> p<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">toFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// arr循环完后， 现在fetchArr里面剩下最后max个promise对象， 使用all等待所有的都完成之后执行callback</span>\n        <span class="token function">toFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>fetchArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E7%89%B9%E6%80%A7-api">特性 API<a class="anchor" href="#%E7%89%B9%E6%80%A7-api">§</a></h2>\n<h3 id="%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">使用 Proxy 拓展构造函数<a class="anchor" href="#%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">sup<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> descriptor <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>\n    base<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">,</span> <span class="token string">"constructor"</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  base<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">construct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> obj<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> that<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      sup<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      base<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  descriptor<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> proxy<span class="token punctuation">;</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> proxy<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">Person</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token maybe-class-name">Boy</span> <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Boy</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">sex</span> <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token maybe-class-name">Peter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Peter</span><span class="token punctuation">.</span><span class="token property-access">sex</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "M"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Peter</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Peter"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Peter</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 13</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">动手实现 JSON<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token known-class-name class-name">JSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sJSON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">\'(\'</span> <span class="token operator">+</span> sJSON <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    stringify<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">toString</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> isArray <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">isArray</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> toString<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'[object Array]\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> escMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'"\'</span><span class="token operator">:</span> <span class="token string">\'\\"\'</span><span class="token punctuation">,</span> <span class="token string">\'\\', span
        } > (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\\\\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\b\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\b\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\f\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\f\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\n\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\n\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\r\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\r\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\t\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\t\\'"), (React.createElement("span", { class: "token punctuation" }, "}"), React.createElement("span", { class: "token punctuation" }, ";")))))))))))))))))))))))), n: true }), (React.createElement("span", { class: "token keyword" }, "var"), (React.createElement("span", { class: "token function-variable function" }, "escFunc"), (React.createElement("span", { class: "token operator" }, "="), (React.createElement("span", { class: "token keyword" }, "function"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token parameter" }, "m"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ), React.createElement("span", { class: "token keyword control-flow" }, "return")))))))))),
    class:  = "token punctuation" > [span > m < span, class {
        } = "token punctuation" > ], span
} > (React.createElement("span", { class: "token operator" }, "||"), (React.createElement("span", { class: "token string" }, "\\'\\\\u\\'"), (React.createElement("span", { class: "token operator" }, "+"), React.createElement("span", { class: "token punctuation" }, "("))));
m < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "charCodeAt"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "0"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token number" }, "0x10000"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "16"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "substr"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "1"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ";"), (React.createElement("span", { class: "token punctuation" }, "}"), React.createElement("span", { class: "token punctuation" }, ";"))))))))))))))))))));
n < span;
class {
}
"token keyword" > ;
var span;
 > escRE < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token regex" },
    React.createElement("span", { class: "token regex-delimiter" }, "/"),
    React.createElement("span", { class: "token regex-source language-regex" }, "[\\\\\"\\u0000-\\u001F\\u2028\\u2029]"),
    React.createElement("span", { class: "token regex-delimiter" }, "/"),
    React.createElement("span", { class: "token regex-flags" }, "g")), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token keyword" }, "function"), (React.createElement("span", { class: "token function" }, "stringify"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token parameter" }, "value"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ))))));
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > React.createElement("span", { class: "token punctuation" }, "(");
value < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token keyword null nil" }, "null"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" }, "\\'null\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'number\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token function" }, "isFinite"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token operator" }, "?");
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'null\\'"), React.createElement("span", { class: "token punctuation" }, ";"))))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'boolean\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";"))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'object\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token property-access" }, "toJSON"), (React.createElement("span", { class: "token operator" }, "==="), (React.createElement("span", { class: "token string" }, "\\'function\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )))));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toJSON"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";")))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token function" }, "isArray"), React.createElement("span", { class: "token punctuation" }, "(")))));
value < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ));
n < span;
class {
}
"token keyword" > ;
var span;
 > res < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token string" }, "\\'[\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
for (; ; )
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "var"));
i < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token number" }, "0"), React.createElement("span", { class: "token punctuation" }, ";"));
i < span;
class {
}
"token operator" >  & lt;
span > value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token property-access" }, "length"), React.createElement("span", { class: "token punctuation" }, ";"));
i < span;
class {
}
"token operator" > ++;
span > React.createElement("span", { class: "token punctuation" }, ")");
n;
res < span;
class {
}
"token operator" > ;
span > React.createElement("span", { class: "token punctuation" }, "(");
i < span;
class {
}
"token operator" >  ?  : ;
span > (React.createElement("span", { class: "token string" }, "\\', \\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "(")))))));
value < span;
class {
}
"token punctuation" > [span > i < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > res < span;
class {
}
"token operator" > +;
span > (React.createElement("span", { class: "token string" }, "\\']\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), React.createElement("span", { class: "token punctuation" }, "(")));
toString < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "call"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "==="), (React.createElement("span", { class: "token string" }, "\\'[object Object]\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ))));
n < span;
class {
}
"token keyword" > ;
var span;
 > tmp < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token punctuation" }, "["), (React.createElement("span", { class: "token punctuation" }, "]"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token keyword control-flow" > ;
for (; ; )
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "var"));
k < span;
class {
}
"token keyword" >  in ;
span > value < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, );
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > React.createElement("span", { class: "token punctuation" }, "(");
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "hasOwnProperty"), React.createElement("span", { class: "token punctuation" }, "("));
k < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ")");
n;
tmp < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "push"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "("))));
k < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\': \\'"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "(")))));
value < span;
class {
}
"token punctuation" > [span > k < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" },
    "\\'",
,
    "\\'"), React.createElement("span", { class: "token operator" }, "+"));
tmp < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "join"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token string" }, "\\', \\'"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\'}\\'"), React.createElement("span", { class: "token punctuation" }, ";")))))));
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" }, "\\'\"\\'"), React.createElement("span", { class: "token operator" }, "+"));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "replace"), React.createElement("span", { class: "token punctuation" }, "("))))));
escRE < span;
class {
}
"token punctuation" > , ;
span > escFunc < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\'\"\\'"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ";");
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token punctuation" }, ")")));
n < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ";");
n < span;
class {
}
"token punctuation" > ;
span > ;
n;
code > ;
pre > ;
n < h3;
id = "" > React.createElement("a", { class: "anchor", href: "#" }, "\u00A7");
h3 > ';
/>,;
'head';
React.createElement(React.Fragment, null,
    React.createElement(Ga, { id: "UA-169223577-1" }),
    React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" })),
    'script';
React.createElement(React.Fragment, null,
    React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
    React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
    React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle';
React.createElement("h1", { key: "0" }, "JavaScript \u5E38\u89C1\u5B9E\u6218\u9898"),
    'contentBody';
React.createElement("article", { dangerouslySetInnerHTML: {
        __html: '<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">§</a></h2>\n<h3 id="%E5%AE%9E%E7%8E%B0-instanceof">实现 InstanceOf<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-instanceof">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// L 表示左表达式，R 表示右表达式</span>\n<span class="token keyword">function</span> <span class="token function">instance_of</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">R</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token constant">O</span> <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n  <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token property-access">__proto__</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 这里重点：当 O 严格等于 L 时，返回 true</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token constant">O</span> <span class="token operator">===</span> <span class="token constant">L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token property-access">__proto__</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">实现 JavaScript 继承<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 原型链继承</span>\n<span class="token keyword">function</span> <span class="token function">myExtend</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">F</span></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n    <span class="token class-name">C</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">C</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token property-access">super</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">实现 JavaScript 函数重载？<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">§</a></h3>\n<p>方法 1，通过非严格模式下的 arguments：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">overLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token comment">// 根据 arguments.length，对不同的值进行不同的操作</span>\n　　<span class="token keyword control-flow">switch</span><span class="token punctuation">(</span><span class="token parameter">arguments<span class="token punctuation">.</span><span class="token property-access">length</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>\n　　　　　　<span class="token comment">/*操作1的代码写在这里*/</span>\n　　　　　　<span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n　　　　<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n　　　　　　<span class="token comment">/*操作2的代码写在这里*/</span>\n　　　　　　<span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n　　　　<span class="token keyword module">default</span><span class="token operator">:</span>\n　　　　    <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>方法 2：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// addMethod</span>\n<span class="token keyword">function</span> <span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> old <span class="token operator">=</span> object<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 把前一次添加的方法存在一个临时变量 old 里面</span>\n　　object<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 重写了 object[name] 的方法</span>\n　　　　<span class="token comment">// 如果调用 object[name] 方法时，传入的参数个数跟预期的一致，则直接调用</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　<span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token comment">// 否则，判断 old 是否是函数，如果是，就调用 old</span>\n　　　　<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> old <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　<span class="token keyword control-flow">return</span> old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n　　values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Dean Edwards"</span><span class="token punctuation">,</span> <span class="token string">"Alex Russell"</span><span class="token punctuation">,</span> <span class="token string">"Dean Tom"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token comment">/* 下面开始通过 addMethod 来实现对 people.find 方法的重载 */</span>\n \n<span class="token comment">// 不传参数时，返回 peopld.values 里面的所有元素</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 传一个参数时，按 first-name 的匹配进行返回</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">firstName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n　　<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　ret<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n　　<span class="token keyword control-flow">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 传两个参数时，返回 first-name 和 last-name 都匹配的元素</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n　　<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">(</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　ret<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n　　<span class="token keyword control-flow">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 测试：</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards", "Alex Russell", "Dean Tom"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">"Dean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards", "Dean Tom"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">"Dean Edwards"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards"]</span>\n</code></pre>\n<h2 id="%E5%AF%B9%E8%B1%A1">对象<a class="anchor" href="#%E5%AF%B9%E8%B1%A1">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">如何区分 Object 和 Array<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">§</a></h3>\n<ul>\n<li>利用 toString() 方法</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayOne</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Array]"</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"k1"</span><span class="token operator">:</span><span class="token string">"v1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"对象的结果："</span><span class="token operator">+</span><span class="token function">isArrayOne</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"数组的结果："</span><span class="token operator">+</span><span class="token function">isArrayOne</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>利用 isArray，使用 Javascript 1.8.5(ECMAScript 5)，变量名字.isArray( ) 可以实现这个目的，前提是支持这一函数。其实 isArray() 就是利用 toString() 方法的封装使用。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//obj 是待检测的对象，如果返回 true 则为数组</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">isArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>  \n     <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"[object Array]"</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>通过 instanceof 运算符来判断(instanceof 运算符左边是子对象，即待测对象，右边是父构造函数，这里是 Array)。instance 实例：凡是用 new 构造函数创建出的对象，都称为是构造函数的实例。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"k1"</span><span class="token operator">:</span><span class="token string">"v1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Instanceof 处理对象的结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Instanceof 处理数组的结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ul>\n<li>使用 isPrototypeOf() 函数检测一个对象是否是 Array 的原型，或处于原型链中。不但可检测直接父对象，还可检测整个原型链上的所有父对象。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// true 表示是数组，false 不是数组</span>\n</code></pre>\n<ul>\n<li>利用构造函数 constructor</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'k\'</span><span class="token operator">:</span><span class="token string">\'v\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>使用 typeof + arr.concat 结合判断，局限性在于如果开发者定义了 concat 属性，便会引起冲突</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayFour</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">concat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword control-flow">return</span> <span class="token string">"This is Array"</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>  \n            <span class="token keyword control-flow">return</span> <span class="token string">"This Not Array"</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'k\'</span><span class="token operator">:</span><span class="token string">\'v\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isArrayFour</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isArrayFour</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7">遍历对象的属性<a class="anchor" href="#%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7">§</a></h3>\n<ul>\n<li>For in 遍历到原型方法，如果不想遍历原型方法和属性，可以增加 hasOwnProperty 方法来判断</li>\n<li>ES5的Object.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword control-flow">if</span>（myObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n　　　　<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 使用Object.getOwnPropertyNames(obj)遍历</span>\n<span class="token comment">// 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'0\'</span><span class="token operator">:</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'1\'</span><span class="token operator">:</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'2\'</span><span class="token operator">:</span><span class="token string">\'c\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 使用Reflect.ownKeys(obj)遍历</span>\n<span class="token comment">// 返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'0\'</span><span class="token operator">:</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'1\'</span><span class="token operator">:</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'2\'</span><span class="token operator">:</span><span class="token string">\'c\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n　　<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">动手实现 new<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Person</span></span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">job</span> <span class="token operator">=</span> job<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个空对象</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 获取构造函数</span>\n  <span class="token keyword">let</span> <span class="token maybe-class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 设置空对象的原型</span>\n  obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n  <span class="token comment">// 绑定 this</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Con</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 返回新对象</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span><span class="token punctuation">,</span> <span class="token string">\'Nicholas\'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">\'Front-end developer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// var person = new Person(\'Nicholas\', 29, \'Front-end developer\'); </span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token comment">// Nicholas</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Nicholas</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">动手实现 Object.create()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function-variable function">create</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">F</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85">JavaScript 如何实现封装？<a class="anchor" href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85">§</a></h3>\n<h3 id="javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81">JavaScript 如何实现多态？<a class="anchor" href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81">§</a></h3>\n<h3 id="javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF">JavaScript 如何实现继承？<a class="anchor" href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF">§</a></h3>\n<p><strong>类式继承</strong>：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span> <span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 为父类添加共有方法</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明子类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'dog\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 继承父类</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "汪汪"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["pig", "cat"]</span>\n</code></pre>\n<p><strong>构造函数继承</strong>：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span><span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 添加共有方法</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明子类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\n</code></pre>\n<p><strong>组合继承</strong>：将类式继承和构造函数继承组合在一起</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span><span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>     \n<span class="token comment">// 添加共有方法  </span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>     \n<span class="token comment">// 声明子类   </span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 构造函数继承    </span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>   \n<span class="token comment">// 类式继承</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "汪汪"</span>\n</code></pre>\n<p><strong>寄生组合式继承</strong>：强化的部分就是在组合继承的基础上减少一次多余的调用父类的构造函数</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span> <span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'dog\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* 注意下面两行 */</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token maybe-class-name">Dog</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "汪汪"</span>\n</code></pre>\n<p>extends 继承：ES6</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>   \n  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>   \n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>   \n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "汪汪"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "黑色"</span>\n</code></pre>\n<h3 id="js-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-publicprivateprotected">JS 如何实现 public/private/protected？<a class="anchor" href="#js-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-publicprivateprotected">§</a></h3>\n<h3 id="js-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9E%8B%E6%A8%A1%E6%8B%9F%E7%B1%BB%E7%9A%84">JS 如何使用原型模拟类的？<a class="anchor" href="#js-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9E%8B%E6%A8%A1%E6%8B%9F%E7%B1%BB%E7%9A%84">§</a></h3>\n<ul>\n<li>private：因为javascript函数级作用域的特性（在函数中定义的属性和方法外界访问不到），所以我们在函数内部直接定义的属性和方法都是私有的。</li>\n<li>public：通过new关键词实例化时，this定义的属性和变量都会被复制一遍，所以通过this定义的属性和方法就是公有的。通过prototype创建的属性在类的实例化之后类的实例化对象也是可以访问到的，所以也是公有的。</li>\n<li>protected：在函数的内部，我们可以通过this定义的方法访问到一些类的私有属性和方法，在实例化的时候就可以初始化对象的一些属性了。</li>\n</ul>\n<h3 id="%E5%AE%9E%E7%8E%B0-add123add1-2-3">实现 add(1)(2)(3)、add(1, 2, 3)<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-add123add1-2-3">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">function</span> <span class="token function">resultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> acc <span class="token operator">+</span> next<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//will only sum first 3 arguments</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> resultFn\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">resultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95">常见方法<a class="anchor" href="#%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95">§</a></h2>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">动手实现 call()、bind()、apply()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span><span class="token punctuation">;</span>\n  <span class="token comment">// 给想让 this 指向的对象临时添加一个 fn，while 来确保此 fn 是独特的。</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token comment">// 使用 eval 而不使用新特性 …Array.from(arguments).slice(1) 时。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arguments["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 由于不能改变想让 this 指向的对象，再次删掉临时建立的属性。</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>txt <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">firstName</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">lastName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">"Doe"</span>\n<span class="token punctuation">}</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\nperson<span class="token punctuation">.</span><span class="token property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">myCall</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// myApply，相比 myCall，只需要注意一下，第二个参数是否存在就可以。</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n \n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arr["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this 保存在 thatFunc，否则 this 的指向会根据场景的不同而改变。</span>\n  <span class="token comment">// 取出 thatArg。</span>\n  <span class="token keyword">var</span> thatFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      thatArg <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 获取除第一个外的参数列表，继续传入到返回的参数中。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 确保 thatFunc 是个函数，否则报错。</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> thatFunc <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Function.prototype.bind - \'</span> <span class="token operator">+</span>\n      <span class="token string">\'what is trying to be bound is not callable\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 由于 bind 不是立即执行的，所以要返回一个函数。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fBound</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用了 apply 改变指向</span>\n    <span class="token comment">// 如果是在 new 关键字调用情况下，会指向 newObj，而 newObj 就是 fBound 的实例，this instanceof fBound 就是true，我们不再使用 thatArg 作为 greeting 的 this，而是直接使用 newObj 作为 greeting 的 this。</span>\n    <span class="token comment">// 而当做普通函数调用的时候，this instanceof fBound 就是 false，greeting 中的 this 依然指向 thatArg。</span>\n    <span class="token keyword control-flow">return</span> thatFunc<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fBound</span>\n      <span class="token operator">?</span> <span class="token keyword">this</span>·\n      <span class="token operator">:</span> thatArg<span class="token punctuation">,</span>\n      <span class="token comment">// 拼凑</span>\n      args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 中间变量 fNOP 空函数，来维护原型关系，并让 fBound.prototype 与 thatFunc.prototype 不再指向同一个原型函数。</span>\n  <span class="token comment">// 确保 fBound 的 prototype 修改时，greeting 的 prototype 不会被修改。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fNOP</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 把 fBound 的 prototype 修改为绑定函数的 prototype，这样 newObj 就可以“继承”自 greeting 了。</span>\n    fNOP<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n  fBound<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> fBound<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"Smiley"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token string">\'greetingValue\'</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token operator">+</span><span class="token string">" to "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" in "</span><span class="token operator">+</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// var objGreeting = greeting.bind(obj, \'the world\');</span>\n<span class="token keyword">var</span> objGreeting <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token method function property-access">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'the world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">objGreeting</span><span class="token punctuation">(</span><span class="token string">\'JS\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Welcome Smiley to the world in JS</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">动手实现 map()、filter()、reduce()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">myMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用数组的 reduce 方法实现</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    accumulator<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> accumulator<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'spray\'</span><span class="token punctuation">,</span> <span class="token string">\'limit\'</span><span class="token punctuation">,</span> <span class="token string">\'elite\'</span><span class="token punctuation">,</span> <span class="token string">\'exuberant\'</span><span class="token punctuation">,</span> <span class="token string">\'destruction\'</span><span class="token punctuation">,</span> <span class="token string">\'present\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result1 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">myFilter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> accum <span class="token operator">=</span> init<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    accum <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>accum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> accum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">myReduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask">使用 MutationObserver 实现 microtask<a class="anchor" href="#%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask">§</a></h3>\n<p>MutationObserver 可以用来实现 microtask，它属于 microtask，优先级小于 Promise，一般是 Promise 不支持时才会这样做。</p>\n<p>它是 HTML5 中的新特性，作用是：监听一个 DOM 变动，</p>\n<p>当 DOM 对象树发生任何变动时，Mutation Observer 会得到通知。</p>\n<p>像以前的 Vue 源码中就是利用它来模拟 nextTick 的，具体原理是，创建一个 TextNode 并监听内容变化，</p>\n<p>然后要 nextTick 的时候去改一下这个节点的文本内容。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>nextTickHandler<span class="token punctuation">)</span>\n<span class="token keyword">var</span> textNode <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createTextNode</span><span class="token punctuation">(</span><span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nobserver<span class="token punctuation">.</span><span class="token method function property-access">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    characterData<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>\n    textNode<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token operator">=</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过，现在的 Vue 2.5+ 的 nextTick 实现移除了 MutationObserver 的方式(据说是兼容性原因)，取而代之的是使用 MessageChannel</p>\n<p>(当然，默认情况仍然是 Promise，不支持才兼容的)。</p>\n<p>MessageChannel 属于宏任务，优先级是：MessageChannel-&gt;setTimeout，所以 Vue 2.5+ 内部的 nextTick 与 2.4 及之前的实现是不一样的，需要注意下。</p>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0">动手实现柯里化函数<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myCurry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> innerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> finalArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>innerArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> finalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 自动检测参数是否传递完毕</span>\n<span class="token keyword">function</span> <span class="token function">myCurry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token function">currify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">>=</span> fn<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">?</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span>\n    currify<span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop">动手实现 JavaScript AOP<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop">§</a></h3>\n<blockquote>\n<p><a href="https://juejin.im/post/6844903858649432078">https://juejin.im/post/6844903858649432078</a></p>\n</blockquote>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">emptyFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">findPointCut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pointCut <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> func <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">[</span>pointCut<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 暂不支持属性的aop</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> func<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 暂不支持模糊匹配切点</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token function-variable function">advice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> advice <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> old <span class="token operator">=</span> <span class="token function">findPointCut</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">[</span>pointCut<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n            <span class="token keyword">let</span> joinPoint <span class="token operator">=</span> <span class="token punctuation">{</span>\n                target<span class="token punctuation">,</span>\n                method<span class="token operator">:</span> old<span class="token punctuation">,</span>\n                args<span class="token punctuation">,</span>\n                self\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> <span class="token punctuation">{</span>before<span class="token punctuation">,</span> round<span class="token punctuation">,</span> after<span class="token punctuation">,</span> afterReturn<span class="token punctuation">,</span> afterThrow<span class="token punctuation">}</span> <span class="token operator">=</span> advice<span class="token punctuation">;</span>\n            <span class="token comment">// 前置增强</span>\n            before <span class="token operator">&amp;&amp;</span> before<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 环绕增强</span>\n            <span class="token keyword">let</span> roundJoinPoint <span class="token operator">=</span> joinPoint<span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>round<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                roundJoinPoint <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                        <span class="token keyword control-flow">return</span> old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arguments <span class="token operator">||</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 没有声明round增强,直接执行原方法</span>\n                <span class="token function-variable function">round</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>after <span class="token operator">||</span> afterReturn <span class="token operator">||</span> afterThrow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n                <span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n                <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n                    result <span class="token operator">=</span> round<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> roundJoinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">// 返回增强</span>\n                    <span class="token keyword control-flow">return</span> afterReturn <span class="token operator">&amp;&amp;</span> afterReturn<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">||</span> result<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    error <span class="token operator">=</span> e<span class="token punctuation">;</span>\n                    <span class="token comment">// 异常增强</span>\n                    <span class="token keyword">let</span> shouldIntercept <span class="token operator">=</span> afterThrow <span class="token operator">&amp;&amp;</span> afterThrow<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword control-flow">throw</span> e<span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span> <span class="token keyword control-flow">finally</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 后置增强</span>\n                    after <span class="token operator">&amp;&amp;</span> after<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> joinPoint<span class="token punctuation">,</span> result<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 未定义任何后置增强,直接执行原方法</span>\n                <span class="token keyword control-flow">return</span> round<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> roundJoinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> aop <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> before <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>before<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">after</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> after <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>after<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">afterReturn</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> afterReturn <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>afterReturn<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">afterThrow</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> afterThrow <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>afterThrow<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">round</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> round <span class="token operator">=</span> emptyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">advice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> pointCut<span class="token punctuation">,</span> <span class="token punctuation">{</span>round<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> aop<span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81">动手实现防抖和节流？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81">§</a></h3>\n<ul>\n<li>防抖 debounce：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。\n<ul>\n<li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li>\n<li>频繁操作点赞和取消点赞，因此需要获取最后一次操作结果并发送给服务器</li>\n</ul>\n</li>\n<li>节流 throttle：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。\n<ul>\n<li>拖拽场景：鼠标不断点击触发，mousedown(单位时间内只触发一次)</li>\n<li>缩放场景：window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题。</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 防抖简化版</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 节流简化版</span>\n<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 防抖复杂版</span>\n<span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/86426949">https://zhuanlan.zhihu.com/p/86426949</a></span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">debounced</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  debounced<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> debounced<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 节流复杂版</span>\n<span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/87591677">https://zhuanlan.zhihu.com/p/87591677</a></span>\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">trailing</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  throttled<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">模板引擎的简单实现<a class="anchor" href="#%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> template <span class="token operator">=</span> <span class="token string">\'我是{{name}}，年龄{{age}}，性别{{sex}}\'</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'姓名\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我是姓名，年龄18，性别undefined</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\{\{(\w+)\}\}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 模板字符串正则</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断模板里是否有模板字符串</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 查找当前模板里第一个模板字符串的字段</span>\n    template <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将第一个模板字符串渲染</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归的渲染并返回渲染后的结构</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> template<span class="token punctuation">;</span> <span class="token comment">// 如果模板没有模板字符串直接返回</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%BC%82%E6%AD%A5%E5%AE%9E%E6%88%98">异步实战<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E5%AE%9E%E6%88%98">§</a></h2>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise">动手实现 Promise<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 判断变量否为function</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token parameter">variable</span> <span class="token arrow operator">=></span> <span class="token keyword">typeof</span> variable <span class="token operator">===</span> <span class="token string">\'function\'</span>\n<span class="token comment">// 定义Promise的三种状态常量</span>\n<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">\'PENDING\'</span>\n<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">\'FULFILLED\'</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">\'REJECTED\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'MyPromise must accept a function as a parameter\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 添加状态</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">PENDING</span>\n    <span class="token comment">// 添加状态</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n    <span class="token comment">// 添加成功回调函数队列</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_fulfilledQueues</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// 添加失败回调函数队列</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// 执行handle</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">_resolve</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">_reject</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">_reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加resovle时执行的函数</span>\n  <span class="token function">_resolve</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n      <span class="token comment">// 依次执行成功队列中的函数，并清空队列</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">runFulfilled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cb<span class="token punctuation">;</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>cb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_fulfilledQueues</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 依次执行失败队列中的函数，并清空队列</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">runRejected</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cb<span class="token punctuation">;</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>cb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n        */</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        val<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> value\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">FULFILLED</span>\n          <span class="token function">runFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> err\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n          <span class="token function">runRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> val\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">FULFILLED</span>\n        <span class="token function">runFulfilled</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 为了支持同步的Promise，这里采用异步调用</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加reject时执行的函数</span>\n  <span class="token function">_reject</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n    <span class="token comment">// 依次执行失败队列中的函数，并清空队列</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_status</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_value</span> <span class="token operator">=</span> err\n      <span class="token keyword">let</span> cb<span class="token punctuation">;</span>\n      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>cb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 为了支持同步的Promise，这里采用异步调用</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加then方法</span>\n  <span class="token function">then</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> _value<span class="token punctuation">,</span> _status <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token comment">// 返回一个新的Promise对象</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onFulfilledNext<span class="token punctuation">,</span> onRejectedNext</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 封装一个成功时执行的函数</span>\n      <span class="token keyword">let</span> <span class="token function-variable function">fulfilled</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">onFulfilledNext</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> res <span class="token operator">=</span>  <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span>\n              res<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>onFulfilledNext<span class="token punctuation">,</span> onRejectedNext<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n              <span class="token comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span>\n              <span class="token function">onFulfilledNext</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 如果函数执行出错，新的Promise对象的状态为失败</span>\n          <span class="token function">onRejectedNext</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 封装一个失败时执行的函数</span>\n      <span class="token keyword">let</span> <span class="token function-variable function">rejected</span> <span class="token operator">=</span> <span class="token parameter">error</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">onRejectedNext</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span>\n              res<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>onFulfilledNext<span class="token punctuation">,</span> onRejectedNext<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n              <span class="token comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span>\n              <span class="token function">onFulfilledNext</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 如果函数执行出错，新的Promise对象的状态为失败</span>\n          <span class="token function">onRejectedNext</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">switch</span> <span class="token punctuation">(</span>_status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span>\n        <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_fulfilledQueues</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">_rejectedQueues</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>rejected<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">break</span>\n          <span class="token comment">// 当状态已经改变时，立即执行对应的回调函数</span>\n        <span class="token keyword">case</span> <span class="token constant">FULFILLED</span><span class="token operator">:</span>\n          <span class="token function">fulfilled</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">break</span>\n        <span class="token keyword">case</span> <span class="token constant">REJECTED</span><span class="token operator">:</span>\n          <span class="token function">rejected</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span>\n          <span class="token keyword control-flow">break</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加catch方法</span>\n  <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword nil">undefined</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态resolve方法</span>\n  <span class="token keyword">static</span> <span class="token function">resolve</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果参数是MyPromise实例，直接返回这个实例</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> value\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token arrow operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态reject方法</span>\n  <span class="token keyword">static</span> <span class="token function">reject</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve <span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态all方法</span>\n  <span class="token keyword">static</span> <span class="token function">all</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token doc-comment comment">/**\n         * 返回值的集合\n         */</span>\n      <span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> p<span class="token punctuation">]</span> <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res\n          count<span class="token operator">++</span>\n          <span class="token comment">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token comment">// 有一个被rejected时返回的MyPromise状态就变成rejected</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加静态race方法</span>\n  <span class="token keyword">static</span> <span class="token function">race</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">finally</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>\n      <span class="token parameter">value</span>  <span class="token arrow operator">=></span> <span class="token maybe-class-name">MyPromise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token parameter">reason</span> <span class="token arrow operator">=></span> <span class="token maybe-class-name">MyPromise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword control-flow">throw</span> reason <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0-asyncawait">实现 async/await<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-asyncawait">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 就是利用 generator（生成器）分割代码片段。然后我们使用一个函数让其自迭代，每一个yield 用 promise 包裹起来。执行下一步的时机由 promise 来控制</span>\n<span class="token keyword">function</span> <span class="token function">_asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token comment">// 将返回值promise化</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 获取迭代器实例</span>\n      <span class="token keyword">var</span> gen <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 执行下一步</span>\n      <span class="token keyword">function</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">asyncGeneratorStep</span><span class="token punctuation">(</span>gen<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> _next<span class="token punctuation">,</span> _throw<span class="token punctuation">,</span> <span class="token string">\'next\'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 抛出异常</span>\n      <span class="token keyword">function</span> <span class="token function">_throw</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">asyncGeneratorStep</span><span class="token punctuation">(</span>gen<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> _next<span class="token punctuation">,</span> _throw<span class="token punctuation">,</span> <span class="token string">\'throw\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 第一次触发</span>\n      <span class="token function">_next</span><span class="token punctuation">(</span><span class="token keyword nil">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest">动手实现 XMLHttpRequest<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> fnSucc<span class="token punctuation">,</span> fnFaild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>\n  <span class="token comment">// 第一步：创建 XMLHttpRequest 对象</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">XMLHttpRequest</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 现代浏览器</span>\n      xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// IE6 等老版本浏览器</span>\n      xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 第四步：处理响应</span>\n  xhttp<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">readyState</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fnSucc</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>fnFaild<span class="token punctuation">)</span> <span class="token function">fnFaild</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 第二步：初始化 XMLHttpRequest 方法</span>\n  xhttp<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 第三步：XMLHttpRequest 向服务器发送请求</span>\n  xhttp<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">\'/smileyFace\'</span><span class="token punctuation">,</span> mySuccessFunc<span class="token punctuation">,</span> myFailFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">实现多个异步的并发控制<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">§</a></h3>\n<p>请实现如下的函数，可以批量请求数据，所有的URL地址在urls参数中，同时可以通过max参数 控制请求的并发度。当所有的请求结束后，需要执行callback回调。发请求的函数可以直接使用fetch。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> max<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> fetchArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 存储并发max的promise数组</span>\n            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">function</span> <span class="token function">toFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 所有的都处理完了， 返回一个resolve</span>\n                <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出第i个url， 放入fetch里面 , 每取一次i++</span>\n            one<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>fetchArr<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>fetchArr<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当promise执行完毕后，从数组删除</span>\n            fetchArr<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将当前的promise存入并发数组中       其实将这个push放到上一行会更好理解，那样就是我们同步的思维顺序，先push进去，再等promise执行完了之后再删除。  但由于then是异步的，所以怎么放都可以。</span>\n            <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>fetchArr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">>=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 当并行数量达到最大后， 用race比较 第一个完成的， 然后再调用一下函数自身。</span>\n                p <span class="token operator">=</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">race</span><span class="token punctuation">(</span>fetchArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword control-flow">return</span> p<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">toFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// arr循环完后， 现在fetchArr里面剩下最后max个promise对象， 使用all等待所有的都完成之后执行callback</span>\n        <span class="token function">toFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>fetchArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E7%89%B9%E6%80%A7-api">特性 API<a class="anchor" href="#%E7%89%B9%E6%80%A7-api">§</a></h2>\n<h3 id="%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">使用 Proxy 拓展构造函数<a class="anchor" href="#%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">sup<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> descriptor <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>\n    base<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">,</span> <span class="token string">"constructor"</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  base<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">construct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> obj<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> that<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      sup<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      base<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  descriptor<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> proxy<span class="token punctuation">;</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> proxy<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">Person</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token maybe-class-name">Boy</span> <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Boy</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">sex</span> <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token maybe-class-name">Peter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Peter</span><span class="token punctuation">.</span><span class="token property-access">sex</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "M"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Peter</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Peter"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Peter</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 13</span>\n</code></pre>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">动手实现 JSON<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token known-class-name class-name">JSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sJSON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">\'(\'</span> <span class="token operator">+</span> sJSON <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    stringify<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">toString</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> isArray <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">isArray</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> toString<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'[object Array]\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> escMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'"\'</span><span class="token operator">:</span> <span class="token string">\'\\"\'</span><span class="token punctuation">,</span> <span class="token string">\'\\', span
    } > (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\\\\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\b\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\b\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\f\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\f\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\n\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\n\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\r\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\r\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\t\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\t\\'"), (React.createElement("span", { class: "token punctuation" }, "}"), React.createElement("span", { class: "token punctuation" }, ";")))))))))))))))))))))))), n: true }), (React.createElement("span", { class: "token keyword" }, "var"), (React.createElement("span", { class: "token function-variable function" }, "escFunc"), (React.createElement("span", { class: "token operator" }, "="), (React.createElement("span", { class: "token keyword" }, "function"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token parameter" }, "m"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ), React.createElement("span", { class: "token keyword control-flow" }, "return")))))))));
escMap < span;
class {
}
"token punctuation" > [span > m < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token operator" }, "||"), (React.createElement("span", { class: "token string" }, "\\'\\\\u\\'"), (React.createElement("span", { class: "token operator" }, "+"), React.createElement("span", { class: "token punctuation" }, "("))));
m < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "charCodeAt"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "0"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token number" }, "0x10000"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "16"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "substr"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "1"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ";"), (React.createElement("span", { class: "token punctuation" }, "}"), React.createElement("span", { class: "token punctuation" }, ";"))))))))))))))))))));
n < span;
class {
}
"token keyword" > ;
var span;
 > escRE < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token regex" },
    React.createElement("span", { class: "token regex-delimiter" }, "/"),
    React.createElement("span", { class: "token regex-source language-regex" }, "[\\\\\"\\u0000-\\u001F\\u2028\\u2029]"),
    React.createElement("span", { class: "token regex-delimiter" }, "/"),
    React.createElement("span", { class: "token regex-flags" }, "g")), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token keyword" }, "function"), (React.createElement("span", { class: "token function" }, "stringify"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token parameter" }, "value"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ))))));
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > React.createElement("span", { class: "token punctuation" }, "(");
value < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token keyword null nil" }, "null"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" }, "\\'null\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'number\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token function" }, "isFinite"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token operator" }, "?");
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'null\\'"), React.createElement("span", { class: "token punctuation" }, ";"))))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'boolean\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";"))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'object\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token property-access" }, "toJSON"), (React.createElement("span", { class: "token operator" }, "==="), (React.createElement("span", { class: "token string" }, "\\'function\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )))));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toJSON"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";")))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token function" }, "isArray"), React.createElement("span", { class: "token punctuation" }, "(")))));
value < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ));
n < span;
class {
}
"token keyword" > ;
var span;
 > res < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token string" }, "\\'[\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
for (; ; )
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "var"));
i < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token number" }, "0"), React.createElement("span", { class: "token punctuation" }, ";"));
i < span;
class {
}
"token operator" >  & lt;
span > value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token property-access" }, "length"), React.createElement("span", { class: "token punctuation" }, ";"));
i < span;
class {
}
"token operator" > ++;
span > React.createElement("span", { class: "token punctuation" }, ")");
n;
res < span;
class {
}
"token operator" > ;
span > React.createElement("span", { class: "token punctuation" }, "(");
i < span;
class {
}
"token operator" >  ?  : ;
span > (React.createElement("span", { class: "token string" }, "\\', \\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "(")))))));
value < span;
class {
}
"token punctuation" > [span > i < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > res < span;
class {
}
"token operator" > +;
span > (React.createElement("span", { class: "token string" }, "\\']\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), React.createElement("span", { class: "token punctuation" }, "(")));
toString < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "call"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "==="), (React.createElement("span", { class: "token string" }, "\\'[object Object]\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ))));
n < span;
class {
}
"token keyword" > ;
var span;
 > tmp < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token punctuation" }, "["), (React.createElement("span", { class: "token punctuation" }, "]"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token keyword control-flow" > ;
for (; ; )
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "var"));
k < span;
class {
}
"token keyword" >  in ;
span > value < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, );
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > React.createElement("span", { class: "token punctuation" }, "(");
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "hasOwnProperty"), React.createElement("span", { class: "token punctuation" }, "("));
k < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ")");
n;
tmp < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "push"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "("))));
k < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\': \\'"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "(")))));
value < span;
class {
}
"token punctuation" > [span > k < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" },
    "\\'",
,
    "\\'"), React.createElement("span", { class: "token operator" }, "+"));
tmp < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "join"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token string" }, "\\', \\'"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\'}\\'"), React.createElement("span", { class: "token punctuation" }, ";")))))));
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" }, "\\'\"\\'"), React.createElement("span", { class: "token operator" }, "+"));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "replace"), React.createElement("span", { class: "token punctuation" }, "("))))));
escRE < span;
class {
}
"token punctuation" > , ;
span > escFunc < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\'\"\\'"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ";");
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token punctuation" }, ")")));
n < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ";");
n < span;
class {
}
"token punctuation" > ;
span > ;
n;
code > ;
pre > ;
n < h3;
id = "" > React.createElement("a", { class: "anchor", href: "#" }, "\u00A7");
h3 > ';
/>,;
'contentHasKatex';
false,
    'toc';
React.createElement("aside", { dangerouslySetInnerHTML: {
        __html: '<nav class="toc"><ol><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a><ol><li><a href="#%E5%AE%9E%E7%8E%B0-instanceof">实现 InstanceOf</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">实现 JavaScript 继承</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">实现 JavaScript 函数重载？</a></li></ol></li><li><a href="#%E5%AF%B9%E8%B1%A1">对象</a><ol><li><a href="#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">如何区分 Object 和 Array</a></li><li><a href="#%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7">遍历对象的属性</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">动手实现 new</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">动手实现 Object.create()</a></li><li><a href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B0%81%E8%A3%85">JavaScript 如何实现封装？</a></li><li><a href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81">JavaScript 如何实现多态？</a></li><li><a href="#javascript-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF">JavaScript 如何实现继承？</a></li><li><a href="#js-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-publicprivateprotected">JS 如何实现 public/private/protected？</a></li><li><a href="#js-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9E%8B%E6%A8%A1%E6%8B%9F%E7%B1%BB%E7%9A%84">JS 如何使用原型模拟类的？</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-add123add1-2-3">实现 add(1)(2)(3)、add(1, 2, 3)</a></li></ol></li><li><a href="#%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95">常见方法</a><ol><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">动手实现 call()、bind()、apply()</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">动手实现 map()、filter()、reduce()</a></li><li><a href="#%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask">使用 MutationObserver 实现 microtask</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0">动手实现柯里化函数</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop">动手实现 JavaScript AOP</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81">动手实现防抖和节流？</a></li><li><a href="#%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">模板引擎的简单实现</a></li></ol></li><li><a href="#%E5%BC%82%E6%AD%A5%E5%AE%9E%E6%88%98">异步实战</a><ol><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise">动手实现 Promise</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-asyncawait">实现 async/await</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest">动手实现 XMLHttpRequest</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">实现多个异步的并发控制</a></li></ol></li><li><a href="#%E7%89%B9%E6%80%A7-api">特性 API</a><ol><li><a href="#%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">使用 Proxy 拓展构造函数</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">动手实现 JSON</a></li><li><a href="#"></a></li></ol></li></ol></nav>'
    } }),
    'date';
"2020-10-27T07:34:52.000Z",
    'updated';
null,
    'author';
"hylerrix",
    'contributors';
[
    "hylerrix"
];
