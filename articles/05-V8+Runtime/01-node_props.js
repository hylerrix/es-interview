import projectConfig from '/pagic.config.js';
var _a, _b;
export default {
    'prev': {
        "title": "V8",
        "link": "articles/05-V8+Runtime/00-v8.html"
    },
    'next': {
        "title": "Deno",
        "link": "articles/05-V8+Runtime/02-deno.html"
    },
    'sidebar': [
        {
            "title": "ESMAScript+ 面试宝典",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "link": "articles/00-Beginner/index.html",
            "title": "一切的起源",
            "children": [
                {
                    "title": "前端大事记",
                    "link": "articles/00-Beginner/00-es-timeline.html",
                    "pagePath": "articles/00-Beginner/00-es-timeline.md"
                },
                {
                    "title": "ES 方向 & 谁在招人？",
                    "link": "articles/00-Beginner/01-es-direction.html",
                    "pagePath": "articles/00-Beginner/01-es-direction.md"
                },
                {
                    "title": "大厂职级",
                    "link": "articles/00-Beginner/02-es-rank.html",
                    "pagePath": "articles/00-Beginner/02-es-rank.md"
                },
                {
                    "title": "看什么书？",
                    "link": "articles/00-Beginner/03-es-books.html",
                    "pagePath": "articles/00-Beginner/03-es-books.md"
                }
            ],
            "pagePath": "articles/00-Beginner/README.md"
        },
        {
            "link": "articles/01-Programming/index.html",
            "title": "编程基础",
            "children": [
                {
                    "title": "编程语言",
                    "link": "articles/01-Programming/00-language.html",
                    "pagePath": "articles/01-Programming/00-language.md"
                },
                {
                    "title": "操作系统",
                    "link": "articles/01-Programming/01-operating-system.html",
                    "pagePath": "articles/01-Programming/01-operating-system.md"
                },
                {
                    "title": "算法",
                    "link": "articles/01-Programming/02-algorithms.html",
                    "pagePath": "articles/01-Programming/02-algorithms.md"
                },
                {
                    "title": "设计模式",
                    "link": "articles/01-Programming/03-design-patterns.html",
                    "pagePath": "articles/01-Programming/03-design-patterns.md"
                },
                {
                    "title": "软件工程",
                    "link": "articles/01-Programming/04-software-engineering.html",
                    "pagePath": "articles/01-Programming/04-software-engineering.md"
                },
                {
                    "title": "测试",
                    "link": "articles/01-Programming/05-software-test.html",
                    "pagePath": "articles/01-Programming/05-software-test.md"
                },
                {
                    "title": "版本控制",
                    "link": "articles/01-Programming/06-version-control.html",
                    "pagePath": "articles/01-Programming/06-version-control.md"
                },
                {
                    "title": "计算机组成原理",
                    "link": "articles/01-Programming/07-computer-principles.html",
                    "pagePath": "articles/01-Programming/07-computer-principles.md"
                },
                {
                    "title": "编译原理",
                    "link": "articles/01-Programming/08-compilation-principle.html",
                    "pagePath": "articles/01-Programming/08-compilation-principle.md"
                }
            ],
            "pagePath": "articles/01-Programming/README.md"
        },
        {
            "link": "articles/02-ECMAScript+/index.html",
            "title": "ECMAScript+",
            "children": [
                {
                    "title": "ECMAScript",
                    "link": "articles/02-ECMAScript+/00-ecmascript.html",
                    "pagePath": "articles/02-ECMAScript+/00-ecmascript.md"
                },
                {
                    "title": "ES 数据类型",
                    "link": "articles/02-ECMAScript+/01-es-data-type.html",
                    "pagePath": "articles/02-ECMAScript+/01-es-data-type.md"
                },
                {
                    "title": "JavaScript 基础知识",
                    "link": "articles/02-ECMAScript+/02-javascript.html",
                    "pagePath": "articles/02-ECMAScript+/02-javascript.md"
                },
                {
                    "title": "TypeScript",
                    "link": "articles/02-ECMAScript+/03-typescript.html",
                    "pagePath": "articles/02-ECMAScript+/03-typescript.md"
                },
                {
                    "title": "JavaScript 常见实战题",
                    "link": "articles/02-ECMAScript+/04-javascript-parctice.html",
                    "pagePath": "articles/02-ECMAScript+/04-javascript-parctice.md"
                }
            ],
            "pagePath": "articles/02-ECMAScript+/README.md"
        },
        {
            "link": "articles/03-HTML+CSS/index.html",
            "title": "HTML + CSS",
            "children": [
                {
                    "title": "HTML",
                    "link": "articles/03-HTML+CSS/00-html.html",
                    "pagePath": "articles/03-HTML+CSS/00-html.md"
                },
                {
                    "title": "CSS",
                    "link": "articles/03-HTML+CSS/01-css-design.html",
                    "pagePath": "articles/03-HTML+CSS/01-css-design.md"
                },
                {
                    "title": "CSS 进阶",
                    "link": "articles/03-HTML+CSS/02-css-advance.html",
                    "pagePath": "articles/03-HTML+CSS/02-css-advance.md"
                },
                {
                    "title": "CSS 实战",
                    "link": "articles/03-HTML+CSS/03-css-practice.html",
                    "pagePath": "articles/03-HTML+CSS/03-css-practice.md"
                },
                {
                    "title": "DOM + BOM",
                    "link": "articles/03-HTML+CSS/04-dom-bom.html",
                    "pagePath": "articles/03-HTML+CSS/04-dom-bom.md"
                }
            ],
            "pagePath": "articles/03-HTML+CSS/README.md"
        },
        {
            "link": "articles/04-Network+API/index.html",
            "title": "网络 + 前后端协作",
            "children": [
                {
                    "title": "网络",
                    "link": "articles/04-Network+API/00-network.html",
                    "pagePath": "articles/04-Network+API/00-network.md"
                },
                {
                    "title": "前后端协作",
                    "link": "articles/04-Network+API/01-fe-be-api.html",
                    "pagePath": "articles/04-Network+API/01-fe-be-api.md"
                },
                {
                    "title": "网络安全",
                    "link": "articles/04-Network+API/02-network-security.html",
                    "pagePath": "articles/04-Network+API/02-network-security.md"
                }
            ],
            "pagePath": "articles/04-Network+API/README.md"
        },
        {
            "link": "articles/05-V8+Runtime/index.html",
            "title": "V8 + JavaScript 运行时",
            "children": [
                {
                    "title": "V8",
                    "link": "articles/05-V8+Runtime/00-v8.html",
                    "pagePath": "articles/05-V8+Runtime/00-v8.md"
                },
                {
                    "title": "Node",
                    "link": "articles/05-V8+Runtime/01-node.html",
                    "pagePath": "articles/05-V8+Runtime/01-node.md"
                },
                {
                    "title": "Deno",
                    "link": "articles/05-V8+Runtime/02-deno.html",
                    "pagePath": "articles/05-V8+Runtime/02-deno.md"
                }
            ],
            "pagePath": "articles/05-V8+Runtime/README.md"
        },
        {
            "link": "articles/06-FE+Browser/index.html",
            "title": "前端应用开发 + 浏览器",
            "children": [
                {
                    "title": "浏览器",
                    "link": "articles/06-FE+Browser/00-browser.html",
                    "pagePath": "articles/06-FE+Browser/00-browser.md"
                },
                {
                    "title": "前端工程化",
                    "link": "articles/06-FE+Browser/01-fe-engineering.html",
                    "pagePath": "articles/06-FE+Browser/01-fe-engineering.md"
                },
                {
                    "title": "前端工具链",
                    "link": "articles/06-FE+Browser/02-fe-tooltain.html",
                    "pagePath": "articles/06-FE+Browser/02-fe-tooltain.md"
                },
                {
                    "title": "前端打包工具",
                    "link": "articles/06-FE+Browser/03-pack-tool.html",
                    "pagePath": "articles/06-FE+Browser/03-pack-tool.md"
                },
                {
                    "title": "移动端 Web 开发",
                    "link": "articles/06-FE+Browser/04-fe-mobile.html",
                    "pagePath": "articles/06-FE+Browser/04-fe-mobile.md"
                },
                {
                    "title": "React 基础",
                    "link": "articles/06-FE+Browser/05-react.html",
                    "pagePath": "articles/06-FE+Browser/05-react.md"
                },
                {
                    "title": "React 实战",
                    "link": "articles/06-FE+Browser/06-react-practice.html",
                    "pagePath": "articles/06-FE+Browser/06-react-practice.md"
                },
                {
                    "title": "Vue",
                    "link": "articles/06-FE+Browser/07-vue.html",
                    "pagePath": "articles/06-FE+Browser/07-vue.md"
                },
                {
                    "title": "iframe",
                    "link": "articles/06-FE+Browser/08-iframe.html",
                    "pagePath": "articles/06-FE+Browser/08-iframe.md"
                }
            ],
            "pagePath": "articles/06-FE+Browser/README.md"
        },
        {
            "link": "articles/07-BE+Server/index.html",
            "title": "后端应用开发 + 服务器",
            "children": [
                {
                    "title": "Linux + Nginx + 数据库",
                    "link": "articles/07-BE+Server/00-linux-nginx-database.html",
                    "pagePath": "articles/07-BE+Server/00-linux-nginx-database.md"
                },
                {
                    "title": "Node 框架",
                    "link": "articles/07-BE+Server/01-node-framework.html",
                    "pagePath": "articles/07-BE+Server/01-node-framework.md"
                }
            ],
            "pagePath": "articles/07-BE+Server/README.md"
        },
        {
            "title": "如何用 Markdown 绘制图片",
            "link": "articles/draw-in-markdown.html",
            "pagePath": "articles/draw-in-markdown.md"
        },
        {
            "title": "变更日志",
            "link": "articles/roadmap.html",
            "pagePath": "articles/roadmap.md"
        }
    ],
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['undefined'] },
    'pagePath': "articles/05-V8+Runtime/01-node.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/05-V8+Runtime/01-node.html",
    'title': "Node",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Node</h1>\n<ul>\n<li>nodejs I/O 模型、事件模型、高并发\n<ul>\n<li>Node 的 nexttick 以及事件循环每个 stage 做了啥。比如 poll 阶段， timer阶段， check阶段之间的差异</li>\n<li>轮询机制，六个阶段、libuv、process.nextTick</li>\n</ul>\n</li>\n<li>express 中间件</li>\n<li>child_process 模块，父子进程的通信机制</li>\n<li>写一个 http server，并且处理 POST 请求</li>\n<li>mongoose</li>\n<li>何判断一个IP是不是国内IP？</li>\n</ul>\n<blockquote>\n<p><a href="https://github.com/semlinker/node-deep">https://github.com/semlinker/node-deep</a></p>\n</blockquote>\n<h2 id="%E5%9F%BA%E7%A1%80">基础<a class="anchor" href="#%E5%9F%BA%E7%A1%80">§</a></h2>\n<h3 id="node-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">Node 进程通信的方式都有哪些？<a class="anchor" href="#node-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">§</a></h3>\n<ul>\n<li>通过 stdin/stdout 传递</li>\n<li>Node 原生 IPC 支持</li>\n<li>通过 Sockets</li>\n<li>借助 Message Queue</li>\n</ul>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF-child_process">什么是 child_process<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-child_process">§</a></h3>\n<p>在Node.js中，提供了一个 child_process 模块，通过它可以开启多个子进程，在多个子进程之间可以共享内存空间，可以通过子进程的互相通信来实现信息的交换。</p>\n<h3 id="node-cluster-%E5%A6%82%E4%BD%95%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">Node cluster 如何多进程通信？<a class="anchor" href="#node-cluster-%E5%A6%82%E4%BD%95%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">§</a></h3>\n<ul>\n<li><code>nodejs</code>是单线程的模式，不能充分利用服务器的多核资源。使用node的cluster模块可以监控应用进程，退出后重新启动node应用进程，并可以启动多个node应用进程，做到负载均衡，充分利用资源。</li>\n<li>如今的机器基本都是多核 cpu。为了能充分利用 cpu 计算能力，node.js V0.8（2012-06-22） 新增了一个内置模块 cluster。它可以通过一个父进程管理一堆子进程的方式来实现集群的功能。</li>\n<li>cluster 底层就是 child_process，master 进程做总控，启动 1 个 agent 和 n 个 worker，agent 来做任务调度，获取任务，并分配给某个空闲的 worker 来做。</li>\n<li>需要注意的是：每个 worker 进程通过使用 child_process.fork() 函数，基于 IPC（Inter-Process Communication，进程间通信），实现与 master 进程间通信。</li>\n<li>fork 出的子进程拥有和父进程一致的数据空间、堆、栈等资源（fork 当时），但是是独立的，也就是说二者不能共享这些存储空间。 那我们直接用 fork 自己实现不就行了。</li>\n<li>这样的方式仅仅实现了多进程。多进程运行还涉及父子进程通信，子进程管理，以及负载均衡等问题，这些特性 cluster 帮你实现了。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cluster <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cluster\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cpus <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'os\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> accessLogger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../logger"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">accessLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\naccessLogger<span class="token punctuation">.</span><span class="token method function property-access">info</span><span class="token punctuation">(</span><span class="token string">\'master \'</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token property-access">pid</span> <span class="token operator">+</span> <span class="token string">\' is starting.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncluster<span class="token punctuation">.</span><span class="token method function property-access">setupMaster</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">/* 应用进程启动文件 */</span>\n    exec<span class="token operator">:</span> <span class="token string">\'bin/www\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* 启动应用进程个数和服务器CPU核数一样 */</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpus<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cluster<span class="token punctuation">.</span><span class="token method function property-access">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ncluster<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'online\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">worker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* 进程启动成功 */</span>\n    accessLogger<span class="token punctuation">.</span><span class="token method function property-access">info</span><span class="token punctuation">(</span><span class="token string">\'worker \'</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token property-access">process</span><span class="token punctuation">.</span><span class="token property-access">pid</span> <span class="token operator">+</span> <span class="token string">\' is online.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncluster<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'exit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">worker<span class="token punctuation">,</span> code<span class="token punctuation">,</span> signal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* 应用进程退出时，记录日志并重启 */</span>\n    accessLogger<span class="token punctuation">.</span><span class="token method function property-access">info</span><span class="token punctuation">(</span><span class="token string">\'worker \'</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token property-access">process</span><span class="token punctuation">.</span><span class="token property-access">pid</span> <span class="token operator">+</span> <span class="token string">\' died.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cluster<span class="token punctuation">.</span><span class="token method function property-access">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="node-worker_threads-%E5%A4%9A%E7%BA%BF%E7%A8%8B">Node worker_threads 多线程<a class="anchor" href="#node-worker_threads-%E5%A4%9A%E7%BA%BF%E7%A8%8B">§</a></h3>\n<p><a href="https://juejin.im/post/6844903775937757192">https://juejin.im/post/6844903775937757192</a></p>\n<ul>\n<li>直到 Node 10.5.0 的发布，官方才给出了一个实验性质的模块 worker_threads 给 Node 提供真正的多线程能力。</li>\n<li>worker_thread 模块中有 4 个对象和 2 个类。\n<ul>\n<li>isMainThread: 是否是主线程，源码中是通过 <code>threadId === 0</code> 进行判断的。</li>\n<li>MessagePort: 用于线程之间的通信，继承自 EventEmitter。</li>\n<li>MessageChannel: 用于创建异步、双向通信的通道实例。</li>\n<li>threadId: 线程 ID。</li>\n<li>Worker: 用于在主线程中创建子线程。第一个参数为 filename，表示子线程执行的入口。</li>\n<li>parentPort: 在 worker 线程里是表示父进程的 MessagePort 类型的对象，在主线程里为 null</li>\n<li>workerData: 用于在主进程中向子进程传递数据（data 副本）</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  isMainThread<span class="token punctuation">,</span>\n  parentPort<span class="token punctuation">,</span>\n  workerData<span class="token punctuation">,</span>\n  threadId<span class="token punctuation">,</span>\n  <span class="token maybe-class-name">MessageChannel</span><span class="token punctuation">,</span>\n  <span class="token maybe-class-name">MessagePort</span><span class="token punctuation">,</span>\n  <span class="token maybe-class-name">Worker</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'worker_threads\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span> <span class="token punctuation">{</span> workerData<span class="token operator">:</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    worker<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'exit\'</span><span class="token punctuation">,</span> <span class="token parameter">code</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">main: worker stopped with exit code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    worker<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">main: receive </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      worker<span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">workerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">worker: workerDate </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>workerData<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  parentPort<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">worker: receive </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parentPort<span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>workerData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n  <span class="token function">workerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="node-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A4%9A%E6%A0%B8-cpu">Node 如何利用多核 CPU？<a class="anchor" href="#node-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A4%9A%E6%A0%B8-cpu">§</a></h3>\n<h2 id="%E5%BC%82%E6%AD%A5">异步<a class="anchor" href="#%E5%BC%82%E6%AD%A5">§</a></h2>\n<h3 id="node-%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B">Node 的事件模型？<a class="anchor" href="#node-%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B">§</a></h3>\n<blockquote>\n<p><a href="https://www.jianshu.com/p/cc57ec6d5873">https://www.jianshu.com/p/cc57ec6d5873</a></p>\n</blockquote>\n<ul>\n<li>\n<p>NodeJS的单线程事件循环的优势</p>\n<ul>\n<li>处理越来越多的并发客户端请求非常容易</li>\n<li>因为事件循环的存在，即使我们的NodeJS应用接收到了越来越多的并发请求，我们也不需要去新建很多的线程</li>\n<li>NodeJS使用到了较少的线程，所以资源和内存的使用较少</li>\n</ul>\n</li>\n<li>\n<p>单线程事件循环模型流程</p>\n<ul>\n<li>客户端发送请求到Web服务器</li>\n<li>NodeJS的Web服务器在内部维护一个有限的线程池，以便为客户端请求提供服务</li>\n<li>NodeJS的Web服务器接收这些请求并将它们放入队列中。 它被称为“事件队列”</li>\n<li>NodeJS的Web服务器内部有一个组件，称为“事件循环”，它使用无限循环来接收请求并处理它们。</li>\n<li>事件循环只使用到了一个线程，它是NodeJS的处理模型的核心</li>\n<li>事件循环回去检查是否有客户端的请求被放置在事件队列中。如果没有，会一直等待事件队列中存在请求。</li>\n<li>如果有，则会从事件队列中拾取一个客户端请求：\n<ul>\n<li>开始处理客户端请求</li>\n<li>如果该客户端请求不需要任何阻塞IO操作，则处理所有内容，准备响应并将其发送回客户端</li>\n<li>如果该客户端请求需要一些阻塞IO操作，例如与数据库，文件系统，外部服务交互，那么它将遵循不同的方法:\n<ul>\n<li>从内部线程池检查线程可用性</li>\n<li>获取一个线程并将此客户端请求分配给该线程</li>\n<li>该线程负责接收该请求，处理该请求，执行阻塞IO操作，准备响应并将其发送回事件循环</li>\n<li>事件循环依次将响应发送到相应的客户端</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-eventemmiter">如何理解 EventEmmiter？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-eventemmiter">§</a></h3>\n<ul>\n<li>所有能触发事件的对象都是 <code>EventEmitter</code> 类的实例。 这些对象开放了一个 <code>eventEmitter.on()</code> 函数，允许将一个或多个函数绑定到会被对象触发的命名事件上。 事件名称通常是驼峰式的字符串，但也可以使用任何有效的 JavaScript 属性名。</li>\n<li>当 EventEmitter 对象触发一个事件时，所有绑定在该事件上的函数都被同步地调用。</li>\n</ul>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-eventemmiter">动手实现 EventEmmiter？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-eventemmiter">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 简单实现</span>\n<span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> isUnshift</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 因为其他的类可能继承自 EventEmitter，子类的events可能为空，保证子类必须存在此实例属性</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>isUnshift<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">\'newListener\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// node的EventEmitter模块自带的特殊事件，该事件在添加新事件监听器的时候触发</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'newListener\'</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token arrow operator">=></span> fn<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 只绑定一次，然后解绑</span>\n  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">oneTime</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      listener<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      me<span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> oneTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    me<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> oneTime<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行示例</span>\n<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nevent<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nevent<span class="token punctuation">.</span><span class="token method function property-access">once</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'这是 once:\'</span> <span class="token operator">+</span> str<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nevent<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token string">\'visa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nevent<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token string">\'visa222\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nevent<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token string">\'visa333\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> root <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">==</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">.</span><span class="token property-access">self</span> <span class="token operator">==</span> self <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">==</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> global<span class="token punctuation">.</span><span class="token property-access">global</span> <span class="token operator">==</span> global <span class="token operator">&amp;&amp;</span> global<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token keyword">this</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">isValidListener</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listener <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> listener <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token function">isValidListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token property-access">listener</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n        item <span class="token operator">=</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">\'object\'</span>\n            <span class="token operator">?</span> item<span class="token punctuation">.</span><span class="token property-access">listener</span>\n            <span class="token operator">:</span> item\n\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">listener</span> <span class="token operator">===</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                result <span class="token operator">=</span> i\n                <span class="token keyword control-flow">break</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> result\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">EventEmitter</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">.</span><span class="token constant">VERSION</span> <span class="token operator">=</span> <span class="token string">\'1.0.0\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 添加事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">on</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventName <span class="token operator">||</span> <span class="token operator">!</span>listener<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'listener must be a function\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> listeners <span class="token operator">=</span> events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> listenerIsWrapped <span class="token operator">=</span> <span class="token keyword">typeof</span> listener <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 不重复添加事件</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> listener<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            listeners<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>listenerIsWrapped <span class="token operator">?</span> listener <span class="token operator">:</span> <span class="token punctuation">{</span>\n                listener<span class="token operator">:</span> listener<span class="token punctuation">,</span>\n                once<span class="token operator">:</span> <span class="token boolean">false</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 添加事件，该事件只能被执行一次\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">once</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            listener<span class="token operator">:</span> listener<span class="token punctuation">,</span>\n            once<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 删除事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">off</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">var</span> index<span class="token punctuation">;</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">listener</span> <span class="token operator">===</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                index <span class="token operator">=</span> i<span class="token punctuation">;</span>\n                <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> index <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            listeners<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 触发事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">args</span> 传入监听器函数的参数，使用数组形式传入\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">emit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                listener<span class="token punctuation">.</span><span class="token method function property-access">listener</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token property-access">listener</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 删除某一个类型的所有事件或者所有事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">allOff</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>eventName <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">!=</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exports<span class="token punctuation">.</span><span class="token property-access">nodeType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">!=</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>module<span class="token punctuation">.</span><span class="token property-access">nodeType</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            exports <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        exports<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">EventEmitter</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        root<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">EventEmitter</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleOne</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'第一个监听函数\'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleSecond</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'第二个监听函数\'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleThird</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'第三个监听函数\'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> handleOne<span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token method function property-access">once</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> handleSecond<span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> handleThird<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => 第一个监听函数 1 2 3</span>\n<span class="token comment">// => 第二个监听函数 1 2 3</span>\n<span class="token comment">// => 第三个监听函数 1 2 3</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> handleThird<span class="token punctuation">)</span><span class="token punctuation">;</span>\nemitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => 第一个监听函数 1 2 3</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">allOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nemitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// nothing</span>\n</code></pre>\n<h2 id="node-%E6%A8%A1%E5%9D%97%E5%8C%96">Node 模块化<a class="anchor" href="#node-%E6%A8%A1%E5%9D%97%E5%8C%96">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-module">如何理解 Node Module？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-module">§</a></h3>\n<ul>\n<li>\n<p>Node 中每个 js 文件模块会包含在隐藏的函数中运行</p>\n<ul>\n<li>function (exports, require, module, __filename, __dirname) {}</li>\n<li>其中，module 代表模块本身，module.exports 可以统一导出</li>\n<li>exports 是形参，指向 module.exports 的值，但是不能统一导出</li>\n</ul>\n</li>\n<li>\n<p>Node 中的模块分类：</p>\n<ul>\n<li>底层模块：Node.js 中以 C++ 形式提供的模块，如 tcp_wrap、contextify 等</li>\n<li>常量模块：Node.js 中定义常量的模块，用来导出如 signal，openssl 库、文件访问权限等常量的定义。如文件访问权限中的 O_RDONLY，O_CREAT、signal 中的 SIGHUP，SIGINT 等。</li>\n<li>原生模块：Node.js 中以 JavaScript 形式提供的模块，如 http、https、fs 等。有些 native module 需要借助于 builtin module 实现背后的功能。<strong>如对于 native 模块 buffer , 还是需要借助 builtin node_buffer.cc 中提供的功能来实现大容量内存申请和管理，目的是能够脱离 V8 内存大小使用限制</strong>。</li>\n<li>第三方模块：以上模块可以统称 Node.js 内建模块，除此之外为第三方模块，典型的如 express 模块。</li>\n</ul>\n</li>\n<li>\n<p>module 对象：每个模块内部都有，代表当前模块。它有以下属性。</p>\n<ul>\n<li><code>module.id</code> 模块的识别符，通常是带有绝对路径的模块文件名。</li>\n<li><code>module.filename</code> 模块的文件名，带有绝对路径。</li>\n<li><code>module.loaded</code> 返回一个布尔值，表示模块是否已经完成加载。</li>\n<li><code>module.parent</code> 返回一个对象，表示调用该模块的模块。</li>\n<li><code>module.children</code> 返回一个数组，表示该模块要用到的其他模块。</li>\n<li><code>module.exports</code> 表示模块对外输出的值。</li>\n</ul>\n</li>\n<li>\n<p>清除已缓存模块：</p>\n<ul>\n<li>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span>删除指定模块的缓存\ndelete require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'/*被缓存的模块名称*/\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 删除所有模块的缓存\nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> {\n     delete require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-require">如何理解 require()？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-require">§</a></h3>\n<ul>\n<li>\n<p>require 函数支持导入文件：<code>.js</code>、<code>.json</code>、<code>.node</code>。</p>\n</li>\n<li>\n<p>require 不会出现死循环，但只会输出相应模块已加载的部分数据。</p>\n</li>\n<li>\n<p>导入模块时，需要经历三个步骤（不论是核心模块还是文件模块，require() 方法对相同模块的二次加载都一律采用缓存优先的方式，这是第一优先级。不同之处在于核心模块的缓存检查优先于文件模块的缓存检查。）：</p>\n<ul>\n<li>\n<p>路径分析：分析 . 或 .. 开始的相对路径文件模块、以 / 开始的绝对路径文件模块、非路径形式的文件模块，如自定义的 connect 模块</p>\n</li>\n<li>\n<p>文件定位：文件扩展名的分析、目录和包的处理。</p>\n<ul>\n<li>\n<p>扩展名分析：Node 会按 .js、.json、.node 的次序补足扩展名，依次尝试。</p>\n</li>\n<li>\n<p>目录分析：require() 通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时 Node 会将目录当做一个包来处理。</p>\n</li>\n<li>\n<p>包处理：Node 对 CommonJS 包规范进行了一定程度的支持。首先，Node 在当前目录下查找 package.json （CommonJS 包规范定义的包描述文件），通过 JSON.parse() 解析出包描述对象，从中取出 main 属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。</p>\n<p>而如果 main 属性指定的文件名错误，或者压根没有 package.json 文件，Node 会将 index 当做默认文件名，依次查找 index.js、index.json、index.node。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>编译执行</p>\n</li>\n</ul>\n</li>\n<li>\n<p>require 函数执行的主要流程：</p>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">从 Y 路径的模块 <span class="token function">require</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X 是一个核心模块，\n   a<span class="token punctuation">.</span> 返回核心模块\n   b<span class="token punctuation">.</span> 结束\n<span class="token number">2</span><span class="token punctuation">.</span> 如果 X 是以 <span class="token string">\'/\'</span> 开头\n   a<span class="token punctuation">.</span> 设 Y 为文件系统根目录\n<span class="token number">3</span><span class="token punctuation">.</span> 如果 X 是以 <span class="token string">\'./\'</span> 或 <span class="token string">\'/\'</span> 或 <span class="token string">\'../\'</span> 开头\n   a<span class="token punctuation">.</span> 加载文件<span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span>\n   b<span class="token punctuation">.</span> 加载目录<span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span>\n<span class="token number">4</span><span class="token punctuation">.</span> 加载Node模块<span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">5</span><span class="token punctuation">.</span> 抛出 <span class="token string">"未找到"</span>\n\n加载文件<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X 是一个文件，加载 X 作为 JavaScript 文本。结束\n<span class="token number">2</span><span class="token punctuation">.</span> 如果 X<span class="token punctuation">.</span>js 是一个文件，加载 X<span class="token punctuation">.</span>js 作为 JavaScript 文本。结束\n<span class="token number">3</span><span class="token punctuation">.</span> 如果 X<span class="token punctuation">.</span>json 是一个文件，解析 X<span class="token punctuation">.</span>json 成一个 JavaScript 对象。结束\n<span class="token number">4</span><span class="token punctuation">.</span> 如果 X<span class="token punctuation">.</span>node 是一个文件，加载 X<span class="token punctuation">.</span>node 作为二进制插件。结束\n\n加载索引<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>index<span class="token punctuation">.</span>js 是一个文件，加载 X<span class="token operator">/</span>index<span class="token punctuation">.</span>js 作为 JavaScript 文本。结束\n<span class="token number">3</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>index<span class="token punctuation">.</span>json  是一个文件，解析 X<span class="token operator">/</span>index<span class="token punctuation">.</span>json 成一个 JavaScript 对象。结束\n<span class="token number">4</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>index<span class="token punctuation">.</span>node 是一个文件，加载 X<span class="token operator">/</span>index<span class="token punctuation">.</span>node 作为二进制插件。结束\n\n加载目录<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>package<span class="token punctuation">.</span>json 是一个文件，\n   a<span class="token punctuation">.</span> 解析 X<span class="token operator">/</span>package<span class="token punctuation">.</span>json，查找 <span class="token string">"main"</span> 字段\n   b<span class="token punctuation">.</span> let M <span class="token operator">=</span> X <span class="token operator">+</span> <span class="token punctuation">(</span>json main 字段<span class="token punctuation">)</span>\n   c<span class="token punctuation">.</span> 加载文件<span class="token punctuation">(</span>M<span class="token punctuation">)</span>\n   d<span class="token punctuation">.</span> 加载索引<span class="token punctuation">(</span>M<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> 加载索引<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n\n加载Node模块<span class="token punctuation">(</span>X<span class="token punctuation">,</span> START<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> let DIRS<span class="token operator">=</span><span class="token function">NODE_MODULES_PATHS</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span> each DIR <span class="token keyword">in</span> DIRS<span class="token punctuation">:</span>\n   a<span class="token punctuation">.</span> 加载文件<span class="token punctuation">(</span>DIR<span class="token operator">/</span>X<span class="token punctuation">)</span>\n   b<span class="token punctuation">.</span> 加载目录<span class="token punctuation">(</span>DIR<span class="token operator">/</span>X<span class="token punctuation">)</span>\n\n<span class="token function">NODE_MODULES_PATHS</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> let PARTS <span class="token operator">=</span> path <span class="token function">split</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> let I <span class="token operator">=</span> count of PARTS <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token number">3</span><span class="token punctuation">.</span> let DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">while</span> I <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n   a<span class="token punctuation">.</span> <span class="token keyword">if</span> PARTS<span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"node_modules"</span> CONTINUE\n   b<span class="token punctuation">.</span> DIR <span class="token operator">=</span> path <span class="token function">join</span><span class="token punctuation">(</span>PARTS<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> I<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n   c<span class="token punctuation">.</span> DIRS <span class="token operator">=</span> DIRS <span class="token operator">+</span> DIR\n   d<span class="token punctuation">.</span> let I <span class="token operator">=</span> I <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token number">5</span><span class="token punctuation">.</span> return DIRS\n</code></pre>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-moduleexportsexports">如何理解 module.exports/exports？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-moduleexportsexports">§</a></h3>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node_modules">如何理解 node_modules？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node_modules">§</a></h3>\n<h3 id="%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86">核心模块的编译原理？<a class="anchor" href="#%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86">§</a></h3>\n<ul>\n<li>JavaScript 核心模块的编译过程</li>\n<li>C、C++ 核心模块的编译过程</li>\n</ul>\n<h2 id="node-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97">Node 内建模块<a class="anchor" href="#node-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-arraybufferunit8arraytypedarray">如何理解 ArrayBuffer/Unit8Array/TypedArray？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-arraybufferunit8arraytypedarray">§</a></h3>\n<ul>\n<li>ArrayBuffer\n<ul>\n<li>ArrayBuffer 对象用来表示<strong>通用的、固定长度的</strong>原始二进制数据缓冲区。<strong>ArrayBuffer 不能直接操作，而是要通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">类型数组对象</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView"><code>DataView</code></a> 对象来操作</strong>，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。</li>\n<li>从 ECMAScript 2015 开始，ArrayBuffer 对象需要用 new 运算符创建。如果调用构造函数时没有使用 new，将会抛出 TypeError 异常。</li>\n</ul>\n</li>\n<li>Unit8Array\n<ul>\n<li>Uint8Array 数组类型表示一个 8 位无符号整型数组，创建时内容被初始化为 0。创建完后，可以以<strong>对象的方式或使用数组下标索引的方式</strong>引用数组中的元素。</li>\n</ul>\n</li>\n<li>从 ArrayBuffer 到 TypedArray\n<ul>\n<li>ArrayBuffer 本身只是一个 0 和 1 存放在一行里面的一个集合，ArrayBuffer 不知道第一个和第二个元素在数组中该如何分配。</li>\n<li>为了能提供上下文，我们需要将其封装在一个叫做 View 的东西里面。这些在数据上的 View 可以被添加进确定类型的数组，而且我们有很多种确定类型的数据可以使用。\n<ul>\n<li>可以使用一个 Int8 的确定类型数组来分离存放 8 位二进制字节。</li>\n<li>可以使用一个无符号的 Int16 数组来分离存放 16 位二进制字节，这样如果是一个无符号的整数也能处理。</li>\n<li>甚至可以在相同基础的 Buffer 上使用不同的 View，同样的操作不同的 View 会给你不同的结果。</li>\n</ul>\n</li>\n<li>在这种方式中，ArrayBuffer 基本上扮演了一个原生内存的角色，它模拟了像 C 语言才有的那种直接访问内存的方式。<strong>你可能想知道为什么我们不让程序直接访问内存，而是添加了这种抽象层，因为直接访问内存将导致一些安全漏洞</strong>。</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-buffer">如何理解 Node Buffer？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-buffer">§</a></h3>\n<ul>\n<li>在 ECMAScript 2015 (ES6) 引入 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a> 之前，JavaScript 语言没有读取或操作二进制数据流的机制。Buffer 类被引入作为 Node.js API 的一部分，使其可以在 TCP 流或文件系统操作等场景中处理二进制数据流。</li>\n<li><strong>Buffer 类的实例类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。</strong></li>\n<li>在 Node.js v6 之前的版本中，Buffer 实例是通过 Buffer 构造函数创建的，它根据提供的参数返回不同的 Buffer：</li>\n<li>Buffer 的内存管理：\n<ul>\n<li>8K 内存池：在 Node.js 应用程序启动时，为了方便地、高效地使用 Buffer，会创建一个大小为 8K 的内存池。</li>\n<li>当未设置编码的时候，默认使用 utf8 编码；</li>\n<li>当字符串所需字节数大于4KB，则直接进行内存分配；</li>\n<li>当字符串所需字节数小于4KB，但超过预分配的 8K 内存池的剩余空间，则重新申请 8K 的内存池；</li>\n<li>调用 <code>new FastBuffer(allocPool, poolOffset, length)</code> 创建 FastBuffer 对象，进行数据存储，数据成功保存后，会进行长度校验、更新 poolOffset 偏移量和字节对齐等操作。</li>\n</ul>\n</li>\n<li>Array slice() 和 Buffer slice() 的区别：\n<ul>\n<li>Array slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原始数组不会被修改。</li>\n<li>Buffer slice() 返回一个指向相同原始内存的新建的 Buffer，但做了偏移且通过 start 和 end 索引进行裁剪。注意，修改这个新建的 Buffer 切片，也会同时修改原始的 Buffer 的内存，因为这两个对象所分配的内存是重叠的。</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-stream">如何理解 Node Stream？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-stream">§</a></h3>\n<ul>\n<li>流是数据的集合 —— 就像数组或字符串一样。流与它们的不同之处在于，流可能无法立马可用，并且它们不需要全部载入内存中。这种特性使得流能够处理大量数据，或者在一个时刻处理来自外部数据源的数据。</li>\n<li>Node.js 有四种类型的流：\n<ul>\n<li>Readable：表示数据能够被消费，例如可以通过 <code>fs.createReadStream()</code> 方法创建可读流。\n<ul>\n<li><code>HTTP res Client</code>、<code>HTTP req Server</code>、<code>fs read streams</code>、<code>zlib streams</code>、<code>crypto streams</code>、<code>TCP sockets</code>、<code>child process stdout and stderr</code></li>\n</ul>\n</li>\n<li>Writable：表示数据能被写，例如可以通过 <code>fs.createWriteStream()</code> 方法创建可写流。\n<ul>\n<li><code>HTTP req Client</code>、<code>HTTP res Server</code>、<code>fs write streams</code>、<code>zlib streams</code>、<code>crypto streams</code>、<code>TCP sockets</code>、<code>child process stdin</code>、<code>process.stdout</code>、<code>process.stderr</code></li>\n</ul>\n</li>\n<li>Duplex：表示既是 Readable 流也是 Writable 流，如 TCP Socket。</li>\n<li>Transform：也是 Duplex 流，能够用来修改或转换数据。例如 <code>zlib.createGzip</code> 方法用来使用 gzip 压缩数据。你可以认为 transform 流是一个函数，它的输入是 Writable 流，输出是 Readable 流。</li>\n</ul>\n</li>\n<li>所有的流都是 EventEmitter 的实例，它们能够监听或触发事件，用于控制读取和写入数据。Readable 与 Writable 流支持的常见的事件和方法：\n<ul>\n<li>Readable Stream\n<ul>\n<li>Events：<code>data</code>、<code>end</code>、<code>error</code>、<code>close</code>、<code>readble</code></li>\n<li>Functions：\n<ul>\n<li><code>pipe()</code>、<code>unpipe()</code></li>\n<li><code>read()</code>、<code>unshift()</code>、<code>resume()</code></li>\n<li><code>pause()</code>、<code>isPaused()</code></li>\n<li><code>setEncoding()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Writable Stream\n<ul>\n<li>Events：<code>drain</code>、<code>finish</code>、<code>error</code>、<code>close</code>、<code>pipe/unpipe</code></li>\n<li>Functions：<code>write()</code>、<code>end()</code>、<code>cork()</code>、<code>uncork()</code>、<code>setDefaultEncoding()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-net">如何理解 Node Net？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-net">§</a></h3>\n<ul>\n<li>Node.js 的网络模块架构：在 Node.js 的模块里面，与网络相关的模块有：<strong>Net</strong>、<strong>DNS</strong>、<strong>HTTP</strong>、<strong>TLS/SSL</strong>、<strong>HTTPS</strong>、<strong>UDP/Datagram</strong>，除此之外，还有 v8 底层相关的网络模块有 <code>tcp_wrap.cc</code>、<code>udp_wrap.cc</code>、<code>pipe_wrap.cc</code>、<code>stream_wrap.cc</code> 等等，在 JavaScript 层以及 C++ 层之间通过 <code>process.binding </code>进行桥接相互通信。</li>\n<li><code>net</code> 模块提供了创建基于流的 TCP 或 <a href="http://nodejs.cn/api/net.html#net_ipc_support">IPC</a> 服务器 (<a href="http://nodejs.cn/api/net.html#net_net_createserver_options_connectionlistener"><code>net.createServer()</code></a>) 和客户端 (<a href="http://nodejs.cn/api/net.html#net_net_createconnection"><code>net.createConnection()</code></a>) 的异步网络 API。</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-http">如何理解 Node HTTP？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-http">§</a></h3>\n<ul>\n<li>一个简单 HTTP 请求的流程\n<ul>\n<li>调用 <code>http.createServer()</code> 方法创建 server 对象，该对象创建完后，我们调用 <code>listen()</code> 方法执行监听操作。</li>\n<li>当 server 接收到客户端的连接请求，在成功创建 socket 对象后，会触发 <code>connection</code> 事件。</li>\n<li>当 <code>connection</code> 事件触发后，会执行对应的 <code>connectionListener</code> 回调函数。在函数内部会利用 HTTPParser 对象，对请求报文进行解析。</li>\n<li>在完成请求头的解析后，会创建 IncomingMessage 对象，并填充相关的属性，比如 url、httpVersion、method 和 headers 等。</li>\n<li>在配置完 IncomingMessage 对象后，会调用 parserOnIncoming 函数，在该函数内会构建 ServerResponse 响应对象，如果请求头不包含 expect 字段，则 server 就会触发 <code>request</code> 事件，并传递当前的请求对象和响应对象。</li>\n<li><code>request</code> 事件触发后，就会执行我们设定的 <code>requestListener</code> 函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E5%B7%A5%E7%A8%8B">工程<a class="anchor" href="#%E5%B7%A5%E7%A8%8B">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-bff-%E5%B1%82">如何理解 BFF 层？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-bff-%E5%B1%82">§</a></h3>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BB%B6">动手实现中间件<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BB%B6">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>\n  fns<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">calback</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> index<span class="token operator">++</span> <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">callback</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA-node-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">如何实现多个 Node 的负载均衡？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA-node-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">§</a></h3>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-unix-%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97%E6%9C%8D%E5%8A%A1%E5%99%A8">动手实现一个 UNIX 域套接字服务器？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-unix-%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97%E6%9C%8D%E5%8A%A1%E5%99%A8">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  c<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"client disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token string">"hello\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span><span class="token method function property-access">pipe</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">throw</span> err<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// server.listen(path[, backlog][, callback]) for IPC servers</span>\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">"/tmp/echo.sock"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"server bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-bash"><code class="language-bash">➜  ~ <span class="token function">nc</span> -U /tmp/echo.sock\nhello\nsemlinker\nsemlinker\ni love node\ni love node\n</code></pre>\n<h2 id="npm">NPM<a class="anchor" href="#npm">§</a></h2>\n<h3 id="npm-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C">NPM 的常见操作？<a class="anchor" href="#npm-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C">§</a></h3>\n<h3 id="%E7%BC%96%E5%86%99-npm-%E5%8C%85%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88">编写 NPM 包都需要注意什么？<a class="anchor" href="#%E7%BC%96%E5%86%99-npm-%E5%8C%85%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88">§</a></h3>\n<h3 id="%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E7%A7%81%E6%9C%89-npm-%E5%8C%85">如何发布私有 NPM 包？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E7%A7%81%E6%9C%89-npm-%E5%8C%85">§</a></h3>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-169223577-1" }),
        React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "Node"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<ul>\n<li>nodejs I/O 模型、事件模型、高并发\n<ul>\n<li>Node 的 nexttick 以及事件循环每个 stage 做了啥。比如 poll 阶段， timer阶段， check阶段之间的差异</li>\n<li>轮询机制，六个阶段、libuv、process.nextTick</li>\n</ul>\n</li>\n<li>express 中间件</li>\n<li>child_process 模块，父子进程的通信机制</li>\n<li>写一个 http server，并且处理 POST 请求</li>\n<li>mongoose</li>\n<li>何判断一个IP是不是国内IP？</li>\n</ul>\n<blockquote>\n<p><a href="https://github.com/semlinker/node-deep">https://github.com/semlinker/node-deep</a></p>\n</blockquote>\n<h2 id="%E5%9F%BA%E7%A1%80">基础<a class="anchor" href="#%E5%9F%BA%E7%A1%80">§</a></h2>\n<h3 id="node-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">Node 进程通信的方式都有哪些？<a class="anchor" href="#node-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">§</a></h3>\n<ul>\n<li>通过 stdin/stdout 传递</li>\n<li>Node 原生 IPC 支持</li>\n<li>通过 Sockets</li>\n<li>借助 Message Queue</li>\n</ul>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF-child_process">什么是 child_process<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-child_process">§</a></h3>\n<p>在Node.js中，提供了一个 child_process 模块，通过它可以开启多个子进程，在多个子进程之间可以共享内存空间，可以通过子进程的互相通信来实现信息的交换。</p>\n<h3 id="node-cluster-%E5%A6%82%E4%BD%95%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">Node cluster 如何多进程通信？<a class="anchor" href="#node-cluster-%E5%A6%82%E4%BD%95%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">§</a></h3>\n<ul>\n<li><code>nodejs</code>是单线程的模式，不能充分利用服务器的多核资源。使用node的cluster模块可以监控应用进程，退出后重新启动node应用进程，并可以启动多个node应用进程，做到负载均衡，充分利用资源。</li>\n<li>如今的机器基本都是多核 cpu。为了能充分利用 cpu 计算能力，node.js V0.8（2012-06-22） 新增了一个内置模块 cluster。它可以通过一个父进程管理一堆子进程的方式来实现集群的功能。</li>\n<li>cluster 底层就是 child_process，master 进程做总控，启动 1 个 agent 和 n 个 worker，agent 来做任务调度，获取任务，并分配给某个空闲的 worker 来做。</li>\n<li>需要注意的是：每个 worker 进程通过使用 child_process.fork() 函数，基于 IPC（Inter-Process Communication，进程间通信），实现与 master 进程间通信。</li>\n<li>fork 出的子进程拥有和父进程一致的数据空间、堆、栈等资源（fork 当时），但是是独立的，也就是说二者不能共享这些存储空间。 那我们直接用 fork 自己实现不就行了。</li>\n<li>这样的方式仅仅实现了多进程。多进程运行还涉及父子进程通信，子进程管理，以及负载均衡等问题，这些特性 cluster 帮你实现了。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cluster <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cluster\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cpus <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'os\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> accessLogger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../logger"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">accessLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\naccessLogger<span class="token punctuation">.</span><span class="token method function property-access">info</span><span class="token punctuation">(</span><span class="token string">\'master \'</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token property-access">pid</span> <span class="token operator">+</span> <span class="token string">\' is starting.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncluster<span class="token punctuation">.</span><span class="token method function property-access">setupMaster</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">/* 应用进程启动文件 */</span>\n    exec<span class="token operator">:</span> <span class="token string">\'bin/www\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* 启动应用进程个数和服务器CPU核数一样 */</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpus<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cluster<span class="token punctuation">.</span><span class="token method function property-access">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ncluster<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'online\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">worker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* 进程启动成功 */</span>\n    accessLogger<span class="token punctuation">.</span><span class="token method function property-access">info</span><span class="token punctuation">(</span><span class="token string">\'worker \'</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token property-access">process</span><span class="token punctuation">.</span><span class="token property-access">pid</span> <span class="token operator">+</span> <span class="token string">\' is online.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncluster<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'exit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">worker<span class="token punctuation">,</span> code<span class="token punctuation">,</span> signal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* 应用进程退出时，记录日志并重启 */</span>\n    accessLogger<span class="token punctuation">.</span><span class="token method function property-access">info</span><span class="token punctuation">(</span><span class="token string">\'worker \'</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token property-access">process</span><span class="token punctuation">.</span><span class="token property-access">pid</span> <span class="token operator">+</span> <span class="token string">\' died.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cluster<span class="token punctuation">.</span><span class="token method function property-access">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="node-worker_threads-%E5%A4%9A%E7%BA%BF%E7%A8%8B">Node worker_threads 多线程<a class="anchor" href="#node-worker_threads-%E5%A4%9A%E7%BA%BF%E7%A8%8B">§</a></h3>\n<p><a href="https://juejin.im/post/6844903775937757192">https://juejin.im/post/6844903775937757192</a></p>\n<ul>\n<li>直到 Node 10.5.0 的发布，官方才给出了一个实验性质的模块 worker_threads 给 Node 提供真正的多线程能力。</li>\n<li>worker_thread 模块中有 4 个对象和 2 个类。\n<ul>\n<li>isMainThread: 是否是主线程，源码中是通过 <code>threadId === 0</code> 进行判断的。</li>\n<li>MessagePort: 用于线程之间的通信，继承自 EventEmitter。</li>\n<li>MessageChannel: 用于创建异步、双向通信的通道实例。</li>\n<li>threadId: 线程 ID。</li>\n<li>Worker: 用于在主线程中创建子线程。第一个参数为 filename，表示子线程执行的入口。</li>\n<li>parentPort: 在 worker 线程里是表示父进程的 MessagePort 类型的对象，在主线程里为 null</li>\n<li>workerData: 用于在主进程中向子进程传递数据（data 副本）</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  isMainThread<span class="token punctuation">,</span>\n  parentPort<span class="token punctuation">,</span>\n  workerData<span class="token punctuation">,</span>\n  threadId<span class="token punctuation">,</span>\n  <span class="token maybe-class-name">MessageChannel</span><span class="token punctuation">,</span>\n  <span class="token maybe-class-name">MessagePort</span><span class="token punctuation">,</span>\n  <span class="token maybe-class-name">Worker</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'worker_threads\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span> <span class="token punctuation">{</span> workerData<span class="token operator">:</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    worker<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'exit\'</span><span class="token punctuation">,</span> <span class="token parameter">code</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">main: worker stopped with exit code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    worker<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">main: receive </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      worker<span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">workerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">worker: workerDate </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>workerData<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  parentPort<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">worker: receive </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parentPort<span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>workerData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n  <span class="token function">workerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="node-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A4%9A%E6%A0%B8-cpu">Node 如何利用多核 CPU？<a class="anchor" href="#node-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A4%9A%E6%A0%B8-cpu">§</a></h3>\n<h2 id="%E5%BC%82%E6%AD%A5">异步<a class="anchor" href="#%E5%BC%82%E6%AD%A5">§</a></h2>\n<h3 id="node-%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B">Node 的事件模型？<a class="anchor" href="#node-%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B">§</a></h3>\n<blockquote>\n<p><a href="https://www.jianshu.com/p/cc57ec6d5873">https://www.jianshu.com/p/cc57ec6d5873</a></p>\n</blockquote>\n<ul>\n<li>\n<p>NodeJS的单线程事件循环的优势</p>\n<ul>\n<li>处理越来越多的并发客户端请求非常容易</li>\n<li>因为事件循环的存在，即使我们的NodeJS应用接收到了越来越多的并发请求，我们也不需要去新建很多的线程</li>\n<li>NodeJS使用到了较少的线程，所以资源和内存的使用较少</li>\n</ul>\n</li>\n<li>\n<p>单线程事件循环模型流程</p>\n<ul>\n<li>客户端发送请求到Web服务器</li>\n<li>NodeJS的Web服务器在内部维护一个有限的线程池，以便为客户端请求提供服务</li>\n<li>NodeJS的Web服务器接收这些请求并将它们放入队列中。 它被称为“事件队列”</li>\n<li>NodeJS的Web服务器内部有一个组件，称为“事件循环”，它使用无限循环来接收请求并处理它们。</li>\n<li>事件循环只使用到了一个线程，它是NodeJS的处理模型的核心</li>\n<li>事件循环回去检查是否有客户端的请求被放置在事件队列中。如果没有，会一直等待事件队列中存在请求。</li>\n<li>如果有，则会从事件队列中拾取一个客户端请求：\n<ul>\n<li>开始处理客户端请求</li>\n<li>如果该客户端请求不需要任何阻塞IO操作，则处理所有内容，准备响应并将其发送回客户端</li>\n<li>如果该客户端请求需要一些阻塞IO操作，例如与数据库，文件系统，外部服务交互，那么它将遵循不同的方法:\n<ul>\n<li>从内部线程池检查线程可用性</li>\n<li>获取一个线程并将此客户端请求分配给该线程</li>\n<li>该线程负责接收该请求，处理该请求，执行阻塞IO操作，准备响应并将其发送回事件循环</li>\n<li>事件循环依次将响应发送到相应的客户端</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-eventemmiter">如何理解 EventEmmiter？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-eventemmiter">§</a></h3>\n<ul>\n<li>所有能触发事件的对象都是 <code>EventEmitter</code> 类的实例。 这些对象开放了一个 <code>eventEmitter.on()</code> 函数，允许将一个或多个函数绑定到会被对象触发的命名事件上。 事件名称通常是驼峰式的字符串，但也可以使用任何有效的 JavaScript 属性名。</li>\n<li>当 EventEmitter 对象触发一个事件时，所有绑定在该事件上的函数都被同步地调用。</li>\n</ul>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-eventemmiter">动手实现 EventEmmiter？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-eventemmiter">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 简单实现</span>\n<span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> isUnshift</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 因为其他的类可能继承自 EventEmitter，子类的events可能为空，保证子类必须存在此实例属性</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>isUnshift<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">\'newListener\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// node的EventEmitter模块自带的特殊事件，该事件在添加新事件监听器的时候触发</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'newListener\'</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token arrow operator">=></span> fn<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 只绑定一次，然后解绑</span>\n  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">oneTime</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      listener<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      me<span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> oneTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    me<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> oneTime<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行示例</span>\n<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nevent<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nevent<span class="token punctuation">.</span><span class="token method function property-access">once</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'这是 once:\'</span> <span class="token operator">+</span> str<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nevent<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token string">\'visa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nevent<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token string">\'visa222\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nevent<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'say\'</span><span class="token punctuation">,</span><span class="token string">\'visa333\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> root <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">==</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">.</span><span class="token property-access">self</span> <span class="token operator">==</span> self <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">==</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> global<span class="token punctuation">.</span><span class="token property-access">global</span> <span class="token operator">==</span> global <span class="token operator">&amp;&amp;</span> global<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token keyword">this</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">isValidListener</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listener <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> listener <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token function">isValidListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token property-access">listener</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n        item <span class="token operator">=</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">\'object\'</span>\n            <span class="token operator">?</span> item<span class="token punctuation">.</span><span class="token property-access">listener</span>\n            <span class="token operator">:</span> item\n\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">listener</span> <span class="token operator">===</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                result <span class="token operator">=</span> i\n                <span class="token keyword control-flow">break</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> result\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">EventEmitter</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">.</span><span class="token constant">VERSION</span> <span class="token operator">=</span> <span class="token string">\'1.0.0\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 添加事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">on</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventName <span class="token operator">||</span> <span class="token operator">!</span>listener<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'listener must be a function\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> listeners <span class="token operator">=</span> events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> listenerIsWrapped <span class="token operator">=</span> <span class="token keyword">typeof</span> listener <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 不重复添加事件</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> listener<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            listeners<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>listenerIsWrapped <span class="token operator">?</span> listener <span class="token operator">:</span> <span class="token punctuation">{</span>\n                listener<span class="token operator">:</span> listener<span class="token punctuation">,</span>\n                once<span class="token operator">:</span> <span class="token boolean">false</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 添加事件，该事件只能被执行一次\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">once</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            listener<span class="token operator">:</span> listener<span class="token punctuation">,</span>\n            once<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 删除事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">off</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">var</span> index<span class="token punctuation">;</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">listener</span> <span class="token operator">===</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                index <span class="token operator">=</span> i<span class="token punctuation">;</span>\n                <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> index <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            listeners<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 触发事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">args</span> 传入监听器函数的参数，使用数组形式传入\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 可链式调用\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">emit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                listener<span class="token punctuation">.</span><span class="token method function property-access">listener</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token property-access">listener</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 删除某一个类型的所有事件或者所有事件\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">eventName</span> 事件名称\n     */</span>\n    proto<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">allOff</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>eventName <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span><span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">__events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">!=</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exports<span class="token punctuation">.</span><span class="token property-access">nodeType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">!=</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>module<span class="token punctuation">.</span><span class="token property-access">nodeType</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            exports <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        exports<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">EventEmitter</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        root<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">EventEmitter</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">EventEmitter</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleOne</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'第一个监听函数\'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleSecond</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'第二个监听函数\'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleThird</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'第三个监听函数\'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> handleOne<span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token method function property-access">once</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> handleSecond<span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> handleThird<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => 第一个监听函数 1 2 3</span>\n<span class="token comment">// => 第二个监听函数 1 2 3</span>\n<span class="token comment">// => 第三个监听函数 1 2 3</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> handleThird<span class="token punctuation">)</span><span class="token punctuation">;</span>\nemitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => 第一个监听函数 1 2 3</span>\n\nemitter<span class="token punctuation">.</span><span class="token method function property-access">allOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nemitter<span class="token punctuation">.</span><span class="token method function property-access">emit</span><span class="token punctuation">(</span><span class="token string">\'demo\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// nothing</span>\n</code></pre>\n<h2 id="node-%E6%A8%A1%E5%9D%97%E5%8C%96">Node 模块化<a class="anchor" href="#node-%E6%A8%A1%E5%9D%97%E5%8C%96">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-module">如何理解 Node Module？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-module">§</a></h3>\n<ul>\n<li>\n<p>Node 中每个 js 文件模块会包含在隐藏的函数中运行</p>\n<ul>\n<li>function (exports, require, module, __filename, __dirname) {}</li>\n<li>其中，module 代表模块本身，module.exports 可以统一导出</li>\n<li>exports 是形参，指向 module.exports 的值，但是不能统一导出</li>\n</ul>\n</li>\n<li>\n<p>Node 中的模块分类：</p>\n<ul>\n<li>底层模块：Node.js 中以 C++ 形式提供的模块，如 tcp_wrap、contextify 等</li>\n<li>常量模块：Node.js 中定义常量的模块，用来导出如 signal，openssl 库、文件访问权限等常量的定义。如文件访问权限中的 O_RDONLY，O_CREAT、signal 中的 SIGHUP，SIGINT 等。</li>\n<li>原生模块：Node.js 中以 JavaScript 形式提供的模块，如 http、https、fs 等。有些 native module 需要借助于 builtin module 实现背后的功能。<strong>如对于 native 模块 buffer , 还是需要借助 builtin node_buffer.cc 中提供的功能来实现大容量内存申请和管理，目的是能够脱离 V8 内存大小使用限制</strong>。</li>\n<li>第三方模块：以上模块可以统称 Node.js 内建模块，除此之外为第三方模块，典型的如 express 模块。</li>\n</ul>\n</li>\n<li>\n<p>module 对象：每个模块内部都有，代表当前模块。它有以下属性。</p>\n<ul>\n<li><code>module.id</code> 模块的识别符，通常是带有绝对路径的模块文件名。</li>\n<li><code>module.filename</code> 模块的文件名，带有绝对路径。</li>\n<li><code>module.loaded</code> 返回一个布尔值，表示模块是否已经完成加载。</li>\n<li><code>module.parent</code> 返回一个对象，表示调用该模块的模块。</li>\n<li><code>module.children</code> 返回一个数组，表示该模块要用到的其他模块。</li>\n<li><code>module.exports</code> 表示模块对外输出的值。</li>\n</ul>\n</li>\n<li>\n<p>清除已缓存模块：</p>\n<ul>\n<li>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">/</span>删除指定模块的缓存\ndelete require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'/*被缓存的模块名称*/\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 删除所有模块的缓存\nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> {\n     delete require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">;</span>\n}<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-require">如何理解 require()？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-require">§</a></h3>\n<ul>\n<li>\n<p>require 函数支持导入文件：<code>.js</code>、<code>.json</code>、<code>.node</code>。</p>\n</li>\n<li>\n<p>require 不会出现死循环，但只会输出相应模块已加载的部分数据。</p>\n</li>\n<li>\n<p>导入模块时，需要经历三个步骤（不论是核心模块还是文件模块，require() 方法对相同模块的二次加载都一律采用缓存优先的方式，这是第一优先级。不同之处在于核心模块的缓存检查优先于文件模块的缓存检查。）：</p>\n<ul>\n<li>\n<p>路径分析：分析 . 或 .. 开始的相对路径文件模块、以 / 开始的绝对路径文件模块、非路径形式的文件模块，如自定义的 connect 模块</p>\n</li>\n<li>\n<p>文件定位：文件扩展名的分析、目录和包的处理。</p>\n<ul>\n<li>\n<p>扩展名分析：Node 会按 .js、.json、.node 的次序补足扩展名，依次尝试。</p>\n</li>\n<li>\n<p>目录分析：require() 通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时 Node 会将目录当做一个包来处理。</p>\n</li>\n<li>\n<p>包处理：Node 对 CommonJS 包规范进行了一定程度的支持。首先，Node 在当前目录下查找 package.json （CommonJS 包规范定义的包描述文件），通过 JSON.parse() 解析出包描述对象，从中取出 main 属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。</p>\n<p>而如果 main 属性指定的文件名错误，或者压根没有 package.json 文件，Node 会将 index 当做默认文件名，依次查找 index.js、index.json、index.node。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>编译执行</p>\n</li>\n</ul>\n</li>\n<li>\n<p>require 函数执行的主要流程：</p>\n</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">从 Y 路径的模块 <span class="token function">require</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X 是一个核心模块，\n   a<span class="token punctuation">.</span> 返回核心模块\n   b<span class="token punctuation">.</span> 结束\n<span class="token number">2</span><span class="token punctuation">.</span> 如果 X 是以 <span class="token string">\'/\'</span> 开头\n   a<span class="token punctuation">.</span> 设 Y 为文件系统根目录\n<span class="token number">3</span><span class="token punctuation">.</span> 如果 X 是以 <span class="token string">\'./\'</span> 或 <span class="token string">\'/\'</span> 或 <span class="token string">\'../\'</span> 开头\n   a<span class="token punctuation">.</span> 加载文件<span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span>\n   b<span class="token punctuation">.</span> 加载目录<span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span>\n<span class="token number">4</span><span class="token punctuation">.</span> 加载Node模块<span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">5</span><span class="token punctuation">.</span> 抛出 <span class="token string">"未找到"</span>\n\n加载文件<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X 是一个文件，加载 X 作为 JavaScript 文本。结束\n<span class="token number">2</span><span class="token punctuation">.</span> 如果 X<span class="token punctuation">.</span>js 是一个文件，加载 X<span class="token punctuation">.</span>js 作为 JavaScript 文本。结束\n<span class="token number">3</span><span class="token punctuation">.</span> 如果 X<span class="token punctuation">.</span>json 是一个文件，解析 X<span class="token punctuation">.</span>json 成一个 JavaScript 对象。结束\n<span class="token number">4</span><span class="token punctuation">.</span> 如果 X<span class="token punctuation">.</span>node 是一个文件，加载 X<span class="token punctuation">.</span>node 作为二进制插件。结束\n\n加载索引<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>index<span class="token punctuation">.</span>js 是一个文件，加载 X<span class="token operator">/</span>index<span class="token punctuation">.</span>js 作为 JavaScript 文本。结束\n<span class="token number">3</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>index<span class="token punctuation">.</span>json  是一个文件，解析 X<span class="token operator">/</span>index<span class="token punctuation">.</span>json 成一个 JavaScript 对象。结束\n<span class="token number">4</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>index<span class="token punctuation">.</span>node 是一个文件，加载 X<span class="token operator">/</span>index<span class="token punctuation">.</span>node 作为二进制插件。结束\n\n加载目录<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> 如果 X<span class="token operator">/</span>package<span class="token punctuation">.</span>json 是一个文件，\n   a<span class="token punctuation">.</span> 解析 X<span class="token operator">/</span>package<span class="token punctuation">.</span>json，查找 <span class="token string">"main"</span> 字段\n   b<span class="token punctuation">.</span> let M <span class="token operator">=</span> X <span class="token operator">+</span> <span class="token punctuation">(</span>json main 字段<span class="token punctuation">)</span>\n   c<span class="token punctuation">.</span> 加载文件<span class="token punctuation">(</span>M<span class="token punctuation">)</span>\n   d<span class="token punctuation">.</span> 加载索引<span class="token punctuation">(</span>M<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> 加载索引<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n\n加载Node模块<span class="token punctuation">(</span>X<span class="token punctuation">,</span> START<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> let DIRS<span class="token operator">=</span><span class="token function">NODE_MODULES_PATHS</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span> each DIR <span class="token keyword">in</span> DIRS<span class="token punctuation">:</span>\n   a<span class="token punctuation">.</span> 加载文件<span class="token punctuation">(</span>DIR<span class="token operator">/</span>X<span class="token punctuation">)</span>\n   b<span class="token punctuation">.</span> 加载目录<span class="token punctuation">(</span>DIR<span class="token operator">/</span>X<span class="token punctuation">)</span>\n\n<span class="token function">NODE_MODULES_PATHS</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> let PARTS <span class="token operator">=</span> path <span class="token function">split</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> let I <span class="token operator">=</span> count of PARTS <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token number">3</span><span class="token punctuation">.</span> let DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">while</span> I <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n   a<span class="token punctuation">.</span> <span class="token keyword">if</span> PARTS<span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"node_modules"</span> CONTINUE\n   b<span class="token punctuation">.</span> DIR <span class="token operator">=</span> path <span class="token function">join</span><span class="token punctuation">(</span>PARTS<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> I<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n   c<span class="token punctuation">.</span> DIRS <span class="token operator">=</span> DIRS <span class="token operator">+</span> DIR\n   d<span class="token punctuation">.</span> let I <span class="token operator">=</span> I <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token number">5</span><span class="token punctuation">.</span> return DIRS\n</code></pre>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-moduleexportsexports">如何理解 module.exports/exports？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-moduleexportsexports">§</a></h3>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node_modules">如何理解 node_modules？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node_modules">§</a></h3>\n<h3 id="%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86">核心模块的编译原理？<a class="anchor" href="#%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86">§</a></h3>\n<ul>\n<li>JavaScript 核心模块的编译过程</li>\n<li>C、C++ 核心模块的编译过程</li>\n</ul>\n<h2 id="node-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97">Node 内建模块<a class="anchor" href="#node-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-arraybufferunit8arraytypedarray">如何理解 ArrayBuffer/Unit8Array/TypedArray？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-arraybufferunit8arraytypedarray">§</a></h3>\n<ul>\n<li>ArrayBuffer\n<ul>\n<li>ArrayBuffer 对象用来表示<strong>通用的、固定长度的</strong>原始二进制数据缓冲区。<strong>ArrayBuffer 不能直接操作，而是要通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">类型数组对象</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView"><code>DataView</code></a> 对象来操作</strong>，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。</li>\n<li>从 ECMAScript 2015 开始，ArrayBuffer 对象需要用 new 运算符创建。如果调用构造函数时没有使用 new，将会抛出 TypeError 异常。</li>\n</ul>\n</li>\n<li>Unit8Array\n<ul>\n<li>Uint8Array 数组类型表示一个 8 位无符号整型数组，创建时内容被初始化为 0。创建完后，可以以<strong>对象的方式或使用数组下标索引的方式</strong>引用数组中的元素。</li>\n</ul>\n</li>\n<li>从 ArrayBuffer 到 TypedArray\n<ul>\n<li>ArrayBuffer 本身只是一个 0 和 1 存放在一行里面的一个集合，ArrayBuffer 不知道第一个和第二个元素在数组中该如何分配。</li>\n<li>为了能提供上下文，我们需要将其封装在一个叫做 View 的东西里面。这些在数据上的 View 可以被添加进确定类型的数组，而且我们有很多种确定类型的数据可以使用。\n<ul>\n<li>可以使用一个 Int8 的确定类型数组来分离存放 8 位二进制字节。</li>\n<li>可以使用一个无符号的 Int16 数组来分离存放 16 位二进制字节，这样如果是一个无符号的整数也能处理。</li>\n<li>甚至可以在相同基础的 Buffer 上使用不同的 View，同样的操作不同的 View 会给你不同的结果。</li>\n</ul>\n</li>\n<li>在这种方式中，ArrayBuffer 基本上扮演了一个原生内存的角色，它模拟了像 C 语言才有的那种直接访问内存的方式。<strong>你可能想知道为什么我们不让程序直接访问内存，而是添加了这种抽象层，因为直接访问内存将导致一些安全漏洞</strong>。</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-buffer">如何理解 Node Buffer？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-buffer">§</a></h3>\n<ul>\n<li>在 ECMAScript 2015 (ES6) 引入 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a> 之前，JavaScript 语言没有读取或操作二进制数据流的机制。Buffer 类被引入作为 Node.js API 的一部分，使其可以在 TCP 流或文件系统操作等场景中处理二进制数据流。</li>\n<li><strong>Buffer 类的实例类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。</strong></li>\n<li>在 Node.js v6 之前的版本中，Buffer 实例是通过 Buffer 构造函数创建的，它根据提供的参数返回不同的 Buffer：</li>\n<li>Buffer 的内存管理：\n<ul>\n<li>8K 内存池：在 Node.js 应用程序启动时，为了方便地、高效地使用 Buffer，会创建一个大小为 8K 的内存池。</li>\n<li>当未设置编码的时候，默认使用 utf8 编码；</li>\n<li>当字符串所需字节数大于4KB，则直接进行内存分配；</li>\n<li>当字符串所需字节数小于4KB，但超过预分配的 8K 内存池的剩余空间，则重新申请 8K 的内存池；</li>\n<li>调用 <code>new FastBuffer(allocPool, poolOffset, length)</code> 创建 FastBuffer 对象，进行数据存储，数据成功保存后，会进行长度校验、更新 poolOffset 偏移量和字节对齐等操作。</li>\n</ul>\n</li>\n<li>Array slice() 和 Buffer slice() 的区别：\n<ul>\n<li>Array slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原始数组不会被修改。</li>\n<li>Buffer slice() 返回一个指向相同原始内存的新建的 Buffer，但做了偏移且通过 start 和 end 索引进行裁剪。注意，修改这个新建的 Buffer 切片，也会同时修改原始的 Buffer 的内存，因为这两个对象所分配的内存是重叠的。</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-stream">如何理解 Node Stream？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-stream">§</a></h3>\n<ul>\n<li>流是数据的集合 —— 就像数组或字符串一样。流与它们的不同之处在于，流可能无法立马可用，并且它们不需要全部载入内存中。这种特性使得流能够处理大量数据，或者在一个时刻处理来自外部数据源的数据。</li>\n<li>Node.js 有四种类型的流：\n<ul>\n<li>Readable：表示数据能够被消费，例如可以通过 <code>fs.createReadStream()</code> 方法创建可读流。\n<ul>\n<li><code>HTTP res Client</code>、<code>HTTP req Server</code>、<code>fs read streams</code>、<code>zlib streams</code>、<code>crypto streams</code>、<code>TCP sockets</code>、<code>child process stdout and stderr</code></li>\n</ul>\n</li>\n<li>Writable：表示数据能被写，例如可以通过 <code>fs.createWriteStream()</code> 方法创建可写流。\n<ul>\n<li><code>HTTP req Client</code>、<code>HTTP res Server</code>、<code>fs write streams</code>、<code>zlib streams</code>、<code>crypto streams</code>、<code>TCP sockets</code>、<code>child process stdin</code>、<code>process.stdout</code>、<code>process.stderr</code></li>\n</ul>\n</li>\n<li>Duplex：表示既是 Readable 流也是 Writable 流，如 TCP Socket。</li>\n<li>Transform：也是 Duplex 流，能够用来修改或转换数据。例如 <code>zlib.createGzip</code> 方法用来使用 gzip 压缩数据。你可以认为 transform 流是一个函数，它的输入是 Writable 流，输出是 Readable 流。</li>\n</ul>\n</li>\n<li>所有的流都是 EventEmitter 的实例，它们能够监听或触发事件，用于控制读取和写入数据。Readable 与 Writable 流支持的常见的事件和方法：\n<ul>\n<li>Readable Stream\n<ul>\n<li>Events：<code>data</code>、<code>end</code>、<code>error</code>、<code>close</code>、<code>readble</code></li>\n<li>Functions：\n<ul>\n<li><code>pipe()</code>、<code>unpipe()</code></li>\n<li><code>read()</code>、<code>unshift()</code>、<code>resume()</code></li>\n<li><code>pause()</code>、<code>isPaused()</code></li>\n<li><code>setEncoding()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Writable Stream\n<ul>\n<li>Events：<code>drain</code>、<code>finish</code>、<code>error</code>、<code>close</code>、<code>pipe/unpipe</code></li>\n<li>Functions：<code>write()</code>、<code>end()</code>、<code>cork()</code>、<code>uncork()</code>、<code>setDefaultEncoding()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-net">如何理解 Node Net？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-net">§</a></h3>\n<ul>\n<li>Node.js 的网络模块架构：在 Node.js 的模块里面，与网络相关的模块有：<strong>Net</strong>、<strong>DNS</strong>、<strong>HTTP</strong>、<strong>TLS/SSL</strong>、<strong>HTTPS</strong>、<strong>UDP/Datagram</strong>，除此之外，还有 v8 底层相关的网络模块有 <code>tcp_wrap.cc</code>、<code>udp_wrap.cc</code>、<code>pipe_wrap.cc</code>、<code>stream_wrap.cc</code> 等等，在 JavaScript 层以及 C++ 层之间通过 <code>process.binding </code>进行桥接相互通信。</li>\n<li><code>net</code> 模块提供了创建基于流的 TCP 或 <a href="http://nodejs.cn/api/net.html#net_ipc_support">IPC</a> 服务器 (<a href="http://nodejs.cn/api/net.html#net_net_createserver_options_connectionlistener"><code>net.createServer()</code></a>) 和客户端 (<a href="http://nodejs.cn/api/net.html#net_net_createconnection"><code>net.createConnection()</code></a>) 的异步网络 API。</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-http">如何理解 Node HTTP？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-http">§</a></h3>\n<ul>\n<li>一个简单 HTTP 请求的流程\n<ul>\n<li>调用 <code>http.createServer()</code> 方法创建 server 对象，该对象创建完后，我们调用 <code>listen()</code> 方法执行监听操作。</li>\n<li>当 server 接收到客户端的连接请求，在成功创建 socket 对象后，会触发 <code>connection</code> 事件。</li>\n<li>当 <code>connection</code> 事件触发后，会执行对应的 <code>connectionListener</code> 回调函数。在函数内部会利用 HTTPParser 对象，对请求报文进行解析。</li>\n<li>在完成请求头的解析后，会创建 IncomingMessage 对象，并填充相关的属性，比如 url、httpVersion、method 和 headers 等。</li>\n<li>在配置完 IncomingMessage 对象后，会调用 parserOnIncoming 函数，在该函数内会构建 ServerResponse 响应对象，如果请求头不包含 expect 字段，则 server 就会触发 <code>request</code> 事件，并传递当前的请求对象和响应对象。</li>\n<li><code>request</code> 事件触发后，就会执行我们设定的 <code>requestListener</code> 函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E5%B7%A5%E7%A8%8B">工程<a class="anchor" href="#%E5%B7%A5%E7%A8%8B">§</a></h2>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-bff-%E5%B1%82">如何理解 BFF 层？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-bff-%E5%B1%82">§</a></h3>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BB%B6">动手实现中间件<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BB%B6">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>\n  fns<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">calback</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> index<span class="token operator">++</span> <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">callback</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA-node-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">如何实现多个 Node 的负载均衡？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA-node-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">§</a></h3>\n<h3 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-unix-%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97%E6%9C%8D%E5%8A%A1%E5%99%A8">动手实现一个 UNIX 域套接字服务器？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-unix-%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97%E6%9C%8D%E5%8A%A1%E5%99%A8">§</a></h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  c<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"client disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token string">"hello\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span><span class="token method function property-access">pipe</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">throw</span> err<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// server.listen(path[, backlog][, callback]) for IPC servers</span>\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">"/tmp/echo.sock"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"server bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-bash"><code class="language-bash">➜  ~ <span class="token function">nc</span> -U /tmp/echo.sock\nhello\nsemlinker\nsemlinker\ni love node\ni love node\n</code></pre>\n<h2 id="npm">NPM<a class="anchor" href="#npm">§</a></h2>\n<h3 id="npm-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C">NPM 的常见操作？<a class="anchor" href="#npm-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C">§</a></h3>\n<h3 id="%E7%BC%96%E5%86%99-npm-%E5%8C%85%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88">编写 NPM 包都需要注意什么？<a class="anchor" href="#%E7%BC%96%E5%86%99-npm-%E5%8C%85%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88">§</a></h3>\n<h3 id="%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E7%A7%81%E6%9C%89-npm-%E5%8C%85">如何发布私有 NPM 包？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E7%A7%81%E6%9C%89-npm-%E5%8C%85">§</a></h3>'
        } }),
    'contentHasKatex': false,
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E5%9F%BA%E7%A1%80">基础</a><ol><li><a href="#node-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">Node 进程通信的方式都有哪些？</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-child_process">什么是 child_process</a></li><li><a href="#node-cluster-%E5%A6%82%E4%BD%95%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">Node cluster 如何多进程通信？</a></li><li><a href="#node-worker_threads-%E5%A4%9A%E7%BA%BF%E7%A8%8B">Node worker_threads 多线程</a></li><li><a href="#node-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A4%9A%E6%A0%B8-cpu">Node 如何利用多核 CPU？</a></li></ol></li><li><a href="#%E5%BC%82%E6%AD%A5">异步</a><ol><li><a href="#node-%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B">Node 的事件模型？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-eventemmiter">如何理解 EventEmmiter？</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-eventemmiter">动手实现 EventEmmiter？</a></li></ol></li><li><a href="#node-%E6%A8%A1%E5%9D%97%E5%8C%96">Node 模块化</a><ol><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-module">如何理解 Node Module？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-require">如何理解 require()？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-moduleexportsexports">如何理解 module.exports/exports？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node_modules">如何理解 node_modules？</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86">核心模块的编译原理？</a></li></ol></li><li><a href="#node-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97">Node 内建模块</a><ol><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-arraybufferunit8arraytypedarray">如何理解 ArrayBuffer/Unit8Array/TypedArray？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-buffer">如何理解 Node Buffer？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-stream">如何理解 Node Stream？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-net">如何理解 Node Net？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-node-http">如何理解 Node HTTP？</a></li></ol></li><li><a href="#%E5%B7%A5%E7%A8%8B">工程</a><ol><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-bff-%E5%B1%82">如何理解 BFF 层？</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BB%B6">动手实现中间件</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA-node-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">如何实现多个 Node 的负载均衡？</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-unix-%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97%E6%9C%8D%E5%8A%A1%E5%99%A8">动手实现一个 UNIX 域套接字服务器？</a></li></ol></li><li><a href="#npm">NPM</a><ol><li><a href="#npm-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C">NPM 的常见操作？</a></li><li><a href="#%E7%BC%96%E5%86%99-npm-%E5%8C%85%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88">编写 NPM 包都需要注意什么？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E7%A7%81%E6%9C%89-npm-%E5%8C%85">如何发布私有 NPM 包？</a></li></ol></li></ol></nav>'
        } }),
    'date': "2020-10-27T07:34:52.000Z",
    'updated': null,
    'author': "hylerrix",
    'contributors': [
        "hylerrix"
    ]
};
