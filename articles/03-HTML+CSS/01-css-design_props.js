import projectConfig from '/pagic.config.js';
var _a, _b;
export default {
    'prev': {
        "title": "HTML",
        "link": "articles/03-HTML+CSS/00-html.html"
    },
    'next': {
        "title": "CSS 进阶",
        "link": "articles/03-HTML+CSS/02-css-advance.html"
    },
    'sidebar': [
        {
            "title": "ESMAScript+ 面试宝典",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "link": "articles/00-Beginner/index.html",
            "title": "一切的起源",
            "children": [
                {
                    "title": "前端大事记",
                    "link": "articles/00-Beginner/00-es-timeline.html",
                    "pagePath": "articles/00-Beginner/00-es-timeline.md"
                },
                {
                    "title": "ES 方向 & 谁在招人？",
                    "link": "articles/00-Beginner/01-es-direction.html",
                    "pagePath": "articles/00-Beginner/01-es-direction.md"
                },
                {
                    "title": "大厂职级",
                    "link": "articles/00-Beginner/02-es-rank.html",
                    "pagePath": "articles/00-Beginner/02-es-rank.md"
                },
                {
                    "title": "看什么书？",
                    "link": "articles/00-Beginner/03-es-books.html",
                    "pagePath": "articles/00-Beginner/03-es-books.md"
                }
            ],
            "pagePath": "articles/00-Beginner/README.md"
        },
        {
            "link": "articles/01-Programming/index.html",
            "title": "编程基础",
            "children": [
                {
                    "title": "编程语言",
                    "link": "articles/01-Programming/00-language.html",
                    "pagePath": "articles/01-Programming/00-language.md"
                },
                {
                    "title": "操作系统",
                    "link": "articles/01-Programming/01-operating-system.html",
                    "pagePath": "articles/01-Programming/01-operating-system.md"
                },
                {
                    "title": "算法",
                    "link": "articles/01-Programming/02-algorithms.html",
                    "pagePath": "articles/01-Programming/02-algorithms.md"
                },
                {
                    "title": "设计模式",
                    "link": "articles/01-Programming/03-design-patterns.html",
                    "pagePath": "articles/01-Programming/03-design-patterns.md"
                },
                {
                    "title": "软件工程",
                    "link": "articles/01-Programming/04-software-engineering.html",
                    "pagePath": "articles/01-Programming/04-software-engineering.md"
                },
                {
                    "title": "测试",
                    "link": "articles/01-Programming/05-software-test.html",
                    "pagePath": "articles/01-Programming/05-software-test.md"
                },
                {
                    "title": "版本控制",
                    "link": "articles/01-Programming/06-version-control.html",
                    "pagePath": "articles/01-Programming/06-version-control.md"
                },
                {
                    "title": "计算机组成原理",
                    "link": "articles/01-Programming/07-computer-principles.html",
                    "pagePath": "articles/01-Programming/07-computer-principles.md"
                },
                {
                    "title": "编译原理",
                    "link": "articles/01-Programming/08-compilation-principle.html",
                    "pagePath": "articles/01-Programming/08-compilation-principle.md"
                }
            ],
            "pagePath": "articles/01-Programming/README.md"
        },
        {
            "link": "articles/02-ECMAScript+/index.html",
            "title": "ECMAScript+",
            "children": [
                {
                    "title": "ECMAScript",
                    "link": "articles/02-ECMAScript+/00-ecmascript.html",
                    "pagePath": "articles/02-ECMAScript+/00-ecmascript.md"
                },
                {
                    "title": "ES 数据类型",
                    "link": "articles/02-ECMAScript+/01-es-data-type.html",
                    "pagePath": "articles/02-ECMAScript+/01-es-data-type.md"
                },
                {
                    "title": "JavaScript 基础知识",
                    "link": "articles/02-ECMAScript+/02-javascript.html",
                    "pagePath": "articles/02-ECMAScript+/02-javascript.md"
                },
                {
                    "title": "TypeScript",
                    "link": "articles/02-ECMAScript+/03-typescript.html",
                    "pagePath": "articles/02-ECMAScript+/03-typescript.md"
                },
                {
                    "title": "JavaScript 常见实战题",
                    "link": "articles/02-ECMAScript+/04-javascript-parctice.html",
                    "pagePath": "articles/02-ECMAScript+/04-javascript-parctice.md"
                }
            ],
            "pagePath": "articles/02-ECMAScript+/README.md"
        },
        {
            "link": "articles/03-HTML+CSS/index.html",
            "title": "HTML + CSS",
            "children": [
                {
                    "title": "HTML",
                    "link": "articles/03-HTML+CSS/00-html.html",
                    "pagePath": "articles/03-HTML+CSS/00-html.md"
                },
                {
                    "title": "CSS",
                    "link": "articles/03-HTML+CSS/01-css-design.html",
                    "pagePath": "articles/03-HTML+CSS/01-css-design.md"
                },
                {
                    "title": "CSS 进阶",
                    "link": "articles/03-HTML+CSS/02-css-advance.html",
                    "pagePath": "articles/03-HTML+CSS/02-css-advance.md"
                },
                {
                    "title": "CSS 实战",
                    "link": "articles/03-HTML+CSS/03-css-practice.html",
                    "pagePath": "articles/03-HTML+CSS/03-css-practice.md"
                },
                {
                    "title": "DOM + BOM",
                    "link": "articles/03-HTML+CSS/04-dom-bom.html",
                    "pagePath": "articles/03-HTML+CSS/04-dom-bom.md"
                }
            ],
            "pagePath": "articles/03-HTML+CSS/README.md"
        },
        {
            "link": "articles/04-Network+API/index.html",
            "title": "网络 + 前后端协作",
            "children": [
                {
                    "title": "网络",
                    "link": "articles/04-Network+API/00-network.html",
                    "pagePath": "articles/04-Network+API/00-network.md"
                },
                {
                    "title": "前后端协作",
                    "link": "articles/04-Network+API/01-fe-be-api.html",
                    "pagePath": "articles/04-Network+API/01-fe-be-api.md"
                },
                {
                    "title": "网络安全",
                    "link": "articles/04-Network+API/02-network-security.html",
                    "pagePath": "articles/04-Network+API/02-network-security.md"
                }
            ],
            "pagePath": "articles/04-Network+API/README.md"
        },
        {
            "link": "articles/05-V8+Runtime/index.html",
            "title": "V8 + JavaScript 运行时",
            "children": [
                {
                    "title": "V8",
                    "link": "articles/05-V8+Runtime/00-v8.html",
                    "pagePath": "articles/05-V8+Runtime/00-v8.md"
                },
                {
                    "title": "Node",
                    "link": "articles/05-V8+Runtime/01-node.html",
                    "pagePath": "articles/05-V8+Runtime/01-node.md"
                },
                {
                    "title": "Deno",
                    "link": "articles/05-V8+Runtime/02-deno.html",
                    "pagePath": "articles/05-V8+Runtime/02-deno.md"
                }
            ],
            "pagePath": "articles/05-V8+Runtime/README.md"
        },
        {
            "link": "articles/06-FE+Browser/index.html",
            "title": "前端应用开发 + 浏览器",
            "children": [
                {
                    "title": "浏览器",
                    "link": "articles/06-FE+Browser/00-browser.html",
                    "pagePath": "articles/06-FE+Browser/00-browser.md"
                },
                {
                    "title": "前端工程化",
                    "link": "articles/06-FE+Browser/01-fe-engineering.html",
                    "pagePath": "articles/06-FE+Browser/01-fe-engineering.md"
                },
                {
                    "title": "前端工具链",
                    "link": "articles/06-FE+Browser/02-fe-tooltain.html",
                    "pagePath": "articles/06-FE+Browser/02-fe-tooltain.md"
                },
                {
                    "title": "前端打包工具",
                    "link": "articles/06-FE+Browser/03-pack-tool.html",
                    "pagePath": "articles/06-FE+Browser/03-pack-tool.md"
                },
                {
                    "title": "移动端 Web 开发",
                    "link": "articles/06-FE+Browser/04-fe-mobile.html",
                    "pagePath": "articles/06-FE+Browser/04-fe-mobile.md"
                },
                {
                    "title": "React 基础",
                    "link": "articles/06-FE+Browser/05-react.html",
                    "pagePath": "articles/06-FE+Browser/05-react.md"
                },
                {
                    "title": "React 实战",
                    "link": "articles/06-FE+Browser/06-react-practice.html",
                    "pagePath": "articles/06-FE+Browser/06-react-practice.md"
                },
                {
                    "title": "Vue",
                    "link": "articles/06-FE+Browser/07-vue.html",
                    "pagePath": "articles/06-FE+Browser/07-vue.md"
                },
                {
                    "title": "iframe",
                    "link": "articles/06-FE+Browser/08-iframe.html",
                    "pagePath": "articles/06-FE+Browser/08-iframe.md"
                }
            ],
            "pagePath": "articles/06-FE+Browser/README.md"
        },
        {
            "link": "articles/07-BE+Server/index.html",
            "title": "后端应用开发 + 服务器",
            "children": [
                {
                    "title": "Linux + Nginx + 数据库",
                    "link": "articles/07-BE+Server/00-linux-nginx-database.html",
                    "pagePath": "articles/07-BE+Server/00-linux-nginx-database.md"
                },
                {
                    "title": "Node 框架",
                    "link": "articles/07-BE+Server/01-node-framework.html",
                    "pagePath": "articles/07-BE+Server/01-node-framework.md"
                }
            ],
            "pagePath": "articles/07-BE+Server/README.md"
        },
        {
            "title": "如何用 Markdown 绘制图片",
            "link": "articles/draw-in-markdown.html",
            "pagePath": "articles/draw-in-markdown.md"
        },
        {
            "title": "变更日志",
            "link": "articles/roadmap.html",
            "pagePath": "articles/roadmap.md"
        }
    ],
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['undefined'] },
    'pagePath': "articles/03-HTML+CSS/01-css-design.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/03-HTML+CSS/01-css-design.html",
    'title': "CSS",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>CSS</h1>\n<h2 id="css-%E5%9F%BA%E7%A1%80%E5%92%8C%E8%A7%84%E8%8C%83">CSS 基础和规范<a class="anchor" href="#css-%E5%9F%BA%E7%A1%80%E5%92%8C%E8%A7%84%E8%8C%83">§</a></h2>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B7%E5%BC%8F%E8%A1%A8">什么是样式表？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B7%E5%BC%8F%E8%A1%A8">§</a></h3>\n<ul>\n<li>\n<p>样式表是一种将网页的内容和表示分离的网页设计形式，在网页设计中网页标记(HTML 或 XHTML)包含页面的语义内容和结构，但没有定义其可视化布局(风格)。相反，风格的定义是在一个外部的样式表文件中，使用如 CSS、XSLT 样式表语言。这种设计方法被认为是一种“分离”，因为它在很大程度上取代了以前风格和结构在一起的定义方法。 这种方法背后的哲学是一种关注点的分离。</p>\n<ul>\n<li>优点：速度、可维护性、可访问性、定制、一致性、可移植性</li>\n<li>缺点：没有解析和生成工具导致应用范围小</li>\n</ul>\n</li>\n<li>\n<p>其它样式表语言有：</p>\n<ul>\n<li>1998.5.12 CSS2 发布，推行内容和表现分离，表格布局开始落寞</li>\n<li>2007 CSS2.1 发布</li>\n<li>从 CSS2+ 开始，前端技术更加关注图片和文字的呈现。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7">CSS3 有哪些新特性？<a class="anchor" href="#css3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7">§</a></h3>\n<ul>\n<li>文本类：\n<ul>\n<li><code>text-shadow</code>： 给文本应用阴影</li>\n<li><code>word-wrap</code>:  强制文本进行换行</li>\n<li><code>@font-face</code> 字体规则； 可以用来加载字体样式，还可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。</li>\n</ul>\n</li>\n<li>css3 边框：\n<ul>\n<li>border-radius 圆角</li>\n<li>border-image 使用图片创建边框</li>\n<li>box-shadow 给边框添加阴影</li>\n</ul>\n</li>\n<li>css3 背景：\n<ul>\n<li>background-size 规定背景图片的尺寸；</li>\n<li>background-origin 属性规定背景图片的定位区域(content/padding/border)</li>\n</ul>\n</li>\n<li>2D/3D 转化：\n<ul>\n<li>2D转化：translate(left,top) 方法使元素从其当前位置移动等</li>\n<li>3d转化：rotateX() 等方法使元素围绕其 坐标轴以给定的度数进行旋转</li>\n</ul>\n</li>\n<li>过渡：通过把效果添加到某个具体的 css 属性上并规定效果时长来使得元素从一种样式逐渐改变为另一种的效果</li>\n<li>动画：在 @keyframes  中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果</li>\n<li>多列布局：\n<ul>\n<li>column-count 属性规定元素应该被分隔的列数</li>\n<li>column-gap 属性规定列之间的间隔</li>\n<li>column-rule 属性设置列之间的宽度、样式和颜色规则</li>\n</ul>\n</li>\n<li>新的用户界面属性:\n<ul>\n<li><code>box-sizing</code>：允许以特定的方式定义匹配某个区域的特定元素,例如值设置为border-box则为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制z</li>\n<li><code>outline-offset</code>：对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</li>\n<li><code>resize</code>：属性规定是否可由用户调整元素尺寸</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%90%84%E7%A7%8D%E6%95%B0%E5%80%BC%E5%8D%95%E4%BD%8D">CSS 各种数值单位？<a class="anchor" href="#css-%E5%90%84%E7%A7%8D%E6%95%B0%E5%80%BC%E5%8D%95%E4%BD%8D">§</a></h3>\n<ul>\n<li>整数值、数值、百分比值、长度值、颜色值、字符串值</li>\n<li>CSS3：角度值、频率值、时间值</li>\n<li>属性值：\n<ul>\n<li>属性值可以由单一内容构成，也可以由“值 + 关键字 +功能符”构成。</li>\n<li>属性值：声明、声明块、规则、规则集、选择器</li>\n</ul>\n</li>\n<li>长度单位：\n<ul>\n<li>相对长度单位\n<ul>\n<li>相对字体长度单位：em、ex，CSS3：rem、ch</li>\n<li>相对视区长度单位：vh、vw、vmin、vmax</li>\n</ul>\n</li>\n<li>绝对长度单位\n<ul>\n<li>px</li>\n<li>不常用的：pt、cm、mm、pc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>颜色单位：\n<ul>\n<li>十六进制色。</li>\n<li>RGB 颜色：每个参数 (red、green 以及 blue) 定义颜色的强度，可以是介于 0 与 255 之间的整数，或者是百分比值（从 0% 到 100%）。</li>\n<li>RGBA 颜色：<code>rgba(red, green, blue, alpha)</code>。alpha 参数是介于 0.0（完全透明）与 1.0（完全不透明）的数字。</li>\n<li>HSL 颜色：<code>hsl(hue, saturation, lightness)</code>。色度，饱和度，亮度。</li>\n<li>HSLA 颜色：在 HSL 基础上，多了透明度。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-resetting-%E5%92%8C-css-normalizing">CSS Resetting 和 CSS Normalizing？<a class="anchor" href="#css-resetting-%E5%92%8C-css-normalizing">§</a></h3>\n<ul>\n<li>重置，Resetting：意味着出去所有的浏览器默认样式，对于页面所有元素必须重新定义各种元素的样式。可用在非常个性化的网页设计上。</li>\n<li>标准化，Normalizing：标准化没有去掉所有的默认样式，而是保留了有用的一部分，同时还纠正了一些常见的错误。</li>\n</ul>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF-css-%E7%9A%84-bembnf-%E8%A7%84%E8%8C%83">什么是 CSS 的 BEM、BNF 规范？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-css-%E7%9A%84-bembnf-%E8%A7%84%E8%8C%83">§</a></h3>\n<p>BEM(Block Element Modifier)原则上建议为独立的 CSS 类命名，并且在需要层级关系时，将关系也体现在命名中，这自然会使选择器高效且易于覆盖。</p>\n<h2 id="%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7">选择器与属性<a class="anchor" href="#%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7">§</a></h2>\n<h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB">CSS 选择器的分类？<a class="anchor" href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB">§</a></h3>\n<ul>\n<li>通用元素选择器</li>\n<li>标签选择器</li>\n<li>类选择器ID 选择器</li>\n<li>属选择器性：为拥有指定属性的 HTML 元素设置样式（例如:[title]{...}）</li>\n<li>伪类选择器</li>\n<li>伪元素选择器</li>\n<li>子元素选择器：选择某个元素的子元素(h1 &gt; em {..})</li>\n<li>关系选择器\n<ul>\n<li>后代选择器：可以选择作为某元素后代的元素（h1 em {..}）</li>\n<li>相邻后代选择器</li>\n<li>兄弟选择器</li>\n<li>相邻兄弟选择器：选择紧接在另一个元素后的元素(h1 + p{..})</li>\n</ul>\n</li>\n</ul>\n<p>CSS 基本选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.</td>\n<td>*</td>\n<td>通用元素选择器，匹配任何元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2.</td>\n<td>E</td>\n<td>标签选择器，匹配所有使用 E 标签的元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3.</td>\n<td>.info</td>\n<td>class 选择器，匹配所有 class 属性中包含 info 的元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4.</td>\n<td>#footer</td>\n<td>id 选择器，匹配所有 id 属性等于 footer 的元素</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 多元素的组合选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5.</td>\n<td>E, F</td>\n<td>多元素选择器，同时匹配所有 E 元素或 F 元素，E 和 F 之间用逗号分隔</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6.</td>\n<td>E F</td>\n<td>后代元素选择器，匹配所有属于 E 元素后代的 F 元素，E 和 F 之间用空格分隔</td>\n<td>1</td>\n</tr>\n<tr>\n<td>7.</td>\n<td>E &gt; F</td>\n<td>子元素选择器，匹配所有 E 元素的子元素 F</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8.</td>\n<td>E + F</td>\n<td>毗邻元素选择器，匹配所有紧随 E 元素之后的同级元素 F</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 2.1 属性选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9.</td>\n<td>E[att]</td>\n<td>匹配所有具有 att 属性的 E 元素，不考虑它的值。（注意：E 在此处可以省略，比如&quot;[cheacked]&quot;。以下同。）</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10.</td>\n<td>E[att=val]</td>\n<td>匹配所有 att 属性等于&quot;val&quot;的 E 元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>11.</td>\n<td>E[att~=val]</td>\n<td>匹配所有 att 属性具有多个空格分隔的值、其中一个值等于&quot;val&quot;的 E 元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>12.</td>\n<td>E[att|=val]</td>\n<td>匹配所有 att 属性具有多个连字号分隔（hyphen-separated）的值、其中一个值以&quot;val&quot;开头的 E 元素，主要用于 lang 属性，比如&quot;en&quot;、&quot;en-us&quot;、&quot;en-gb&quot;等等</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 的同级元素通用选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>24.</td>\n<td>E ~ F</td>\n<td>匹配任何在 E 元素之后的同级F元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 属性选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>25.</td>\n<td>E[att^=&quot;val&quot;]</td>\n<td>属性 att 的值以&quot;val&quot;开头的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>26.</td>\n<td>E[att$=&quot;val&quot;]</td>\n<td>属性 att 的值以&quot;val&quot;结尾的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>27.</td>\n<td>E[att*=&quot;val&quot;]</td>\n<td>属性 att 的值包含&quot;val&quot;字符串的元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">CSS 选择器的优先级是怎样的？<a class="anchor" href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">§</a></h3>\n<ul>\n<li>\n<p>CSS 优先级，是指 CSS 样式在浏览器中被解析的先后顺序。在比较样式的优先级时，只需统计选择符中的 ID、class 和标签名的个数，然后把相应的权值相加即可，最后根据结果排出优先级。权值较大的优先级越高；权值相同的，后定义的优先级较高。</p>\n</li>\n<li>\n<p>优先级特点：</p>\n<ul>\n<li>当同一个元素有多个声明的时候，优先级才会有意义；</li>\n<li>而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。</li>\n<li>每一个直接作用于元素的 CSS 规则总是会覆盖该元素从祖先元素继承而来的规则</li>\n<li>文档树中元素的接近度 （Proximity of elements）对优先级没有影响</li>\n<li>通配选择符（universal selector）(*), 关系选择符（combinators） (+, &gt;, ~, \' \')  和 否定伪类（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级。</li>\n</ul>\n</li>\n<li>\n<p>一种排序：</p>\n<ul>\n<li>样式值含有！important，优先级最高（尽量别使用，破坏了样式表中的固有的级联规则）；</li>\n<li>ID 选择器优先级很高，权值为 100；</li>\n<li>类选择器、属性选择器和伪类选择器的权值为 10；</li>\n<li>标签选择器权值为 1。</li>\n</ul>\n</li>\n<li>\n<p>另一种排序：</p>\n<ul>\n<li>优先级通过 4 个维度指标确定，我们假定以 a、b、c、d 命名，分别代表以下含义：</li>\n<li>a 表示是否使用内联样式。如果使用，a 为 1，否则为 0。</li>\n<li>b 表示 ID 选择器数量。</li>\n<li>c 表示类选择器、属性选择器和伪类选择器数量之和。</li>\n<li>d 表示标签(类型)选择器和伪元素选择器之和。</li>\n<li>优先级的结果并非通过以上四个值生成一个得分，而是每个值分开比较。a、b、c、d 权重从左到右，依次减小。判断优先级时，从左到右，一一比较，直到比较出最大值，即可停止。所以，如果b的值不同，那么 c 和 d 不管多大，都不会对结果产生影响。比如 0，1，0，0的优先级高于 0，0，10，10。</li>\n<li>当出现优先级相等的情况时，最晚出现的样式规则会被采纳。如果你在样式表里写了相同的规则（无论是在该文件内部还是其它样式文件中），那么最后出现的（在文件底部的）样式优先级更高，因此会被采纳。</li>\n<li>在写样式时，我会使用较低的优先级，这样这些样式可以轻易地覆盖掉。尤其对写 UI 组件的时候更为重要，这样使用者就不需要通过非常复杂的优先级规则或使用 !important 的方式，去覆盖组件的样式了。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%E5%8E%9F%E5%88%99%E5%8F%8A%E4%BC%98%E5%8C%96%E5%87%86%E5%88%99">CSS 选择器查询原则及优化准则<a class="anchor" href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%E5%8E%9F%E5%88%99%E5%8F%8A%E4%BC%98%E5%8C%96%E5%87%86%E5%88%99">§</a></h3>\n<p>浏览器是如何查找元素的呢？浏览器 CSS 匹配不是从左到右进行查找，而是从右到左进行查找。</p>\n<p>比如 <code>#divBox p span.red {color: red;}</code> 浏览器的查找顺序如下：先查找 HTML 中所有 class=\'red\' 的 span 元素，找到后，再查找其父辈元素中是否有 p 元素，再判断 p 的父元素中是否有 ID 为 divBox 的 DIV 元素，如果都存在则匹配上。</p>\n<p>浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。</p>\n<p>优化目的是减少 CSS 文件大小，提高维护性和可读性。优化准则如下。</p>\n<ul>\n<li>不要在 ID 选择器前使用标签名</li>\n<li>不要在 class 选择器前使用标签名</li>\n<li>尽量少使用层级关系</li>\n<li>使用 class 代替层级关系</li>\n<li>在 CSS 渲染效率中 ID 和 class 的效率是基本相当的</li>\n<li>使用属性简写</li>\n<li>移除 CSS 框架中多余的内容</li>\n<li>将 CSS 文件的声明用注释分隔开并进行排版</li>\n<li>拆分布局风格：给每种布局一个单独的CSS文件</li>\n<li>养成为 CSS 写注释的习惯</li>\n<li>上线时压缩使用</li>\n</ul>\n<h3 id="css-%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">CSS 伪类与伪元素都有哪些？<a class="anchor" href="#css-%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">§</a></h3>\n<p>伪类是加在选择器后面的用来指定元素状态的关键字。比如，:hover 会在鼠标悬停在选中元素上时应用相应的样式</p>\n<ul>\n<li><code>:first-of-type/:last-of-type/:only-of-type</code>： 选择属于其父元素的首/最后/唯一的一个xx元素的每个 xx元素</li>\n<li><code>:only-child</code>： 选择属于其父元素的唯一子元素的每个xx 元素</li>\n<li><code>:empty</code>： 选择没有子元素的每个xx元素</li>\n<li><code>:root</code>: 选择文档的根元素</li>\n<li><code>::selection</code>： 选择被用户选取的元素部分</li>\n<li><code>:checked/:disabled</code>： 选择每个被选中/禁用的xx元素</li>\n</ul>\n<p>CSS 2.1 中的伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>13.</td>\n<td>E:first-child</td>\n<td>匹配父元素的第一个子元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>14.</td>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n<td>1</td>\n</tr>\n<tr>\n<td>15.</td>\n<td>E:visited</td>\n<td>匹配所有已被点击的链接</td>\n<td>1</td>\n</tr>\n<tr>\n<td>16.</td>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>17.</td>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的 E 元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>18.</td>\n<td>E:focus</td>\n<td>匹配获得当前焦点的 E 元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>19.</td>\n<td>E:lang(c)</td>\n<td>匹配 lang 属性等于 c 的 E 元素</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 2.1 中的伪元素</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20.</td>\n<td>E:first-line</td>\n<td>匹配 E 元素的第一行</td>\n<td>1</td>\n</tr>\n<tr>\n<td>21.</td>\n<td>E:first-letter</td>\n<td>匹配 E 元素的第一个字母</td>\n<td>1</td>\n</tr>\n<tr>\n<td>22.</td>\n<td>E:before</td>\n<td>在 E 元素之前插入生成的内容</td>\n<td>2</td>\n</tr>\n<tr>\n<td>23.</td>\n<td>E:after</td>\n<td>在 E 元素之后插入生成的内容</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 中与用户界面有关的伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>28.</td>\n<td>E:enabled</td>\n<td>匹配表单中激活的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>29.</td>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>30.</td>\n<td>E:checked</td>\n<td>匹配表单中被选中的 radio（单选框）或 checkbox（复选框）元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>31.</td>\n<td>E::selection</td>\n<td>匹配用户当前选中的元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 中的结构性伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32.</td>\n<td>E:root</td>\n<td>匹配文档的根元素，对于 HTML 文档，就是 HTML 元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>33.</td>\n<td>E:nth-child(n)</td>\n<td>匹配其父元素的第 n 个子元素，第一个编号为 1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>34.</td>\n<td>E:nth-last-child(n)</td>\n<td>匹配其父元素的倒数第 n 个子元素，第一个编号为 1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>35.</td>\n<td>E:nth-of-type(n)</td>\n<td>与 :nth-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>36.</td>\n<td>E:nth-last-of-type(n)</td>\n<td>与 :nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>37.</td>\n<td>E:last-child</td>\n<td>匹配父元素的最后一个子元素，等同于 :nth-last-child(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>38.</td>\n<td>E:first-of-type</td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于 :nth-of-type(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>39.</td>\n<td>E:last-of-type</td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于 :nth-last-of-type(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>40.</td>\n<td>E:only-child</td>\n<td>匹配父元素下仅有的一个子元素，等同于 :first-child :last-child或 :nth-child(1) :nth-last-child(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>41.</td>\n<td>E:only-of-type</td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于 :first-of-type :last-of-type 或 :nth-of-type(1) :nth-last-of-type(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>42.</td>\n<td>E:empty</td>\n<td>匹配一个不包含任何子元素的元素，注意，文本节点也被看作子元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS3 的反选伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>43.</td>\n<td>E:not(s)</td>\n<td>匹配不符合当前选择器的任何元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS3 中的 :target 伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>44.</td>\n<td>E:target</td>\n<td>匹配文档中特定&quot;id&quot;点击后的效果</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id="css-%E4%B8%AD%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E6%89%BF">CSS 中哪些属性可以被继承？<a class="anchor" href="#css-%E4%B8%AD%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E6%89%BF">§</a></h3>\n<ul>\n<li>\n<p>所有元素可以继承的属性：</p>\n<ul>\n<li>visibility: 规定元素是否可见</li>\n<li>cursor（发音为keser）:规定要显示的光标的类型（auto/pointer等）</li>\n</ul>\n</li>\n<li>\n<p>块级元素可以继承的属性：text-indent、text-align</p>\n</li>\n<li>\n<p>内联元素可以继承的属性：</p>\n<ul>\n<li>字体系列属性</li>\n<li>除 text-indent、text-align 之外的文本系列属性</li>\n</ul>\n</li>\n<li>\n<p>字体，文本属性中：</p>\n<ul>\n<li>font、font-size、font-variant</li>\n<li>color</li>\n<li>line-height：行高</li>\n<li>word-spacing：增加或减少单词间的空白（即字间隔）</li>\n<li>letter-spacing: 增加或减少字符间的空白</li>\n<li>text-indent：文本缩进</li>\n<li>text-transform：控制文本大小写</li>\n</ul>\n</li>\n<li>\n<p>布局相关的：list-style</p>\n</li>\n</ul>\n<h3 id="position-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">position 属性都有哪些值？<a class="anchor" href="#position-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">§</a></h3>\n<p>经过定位的元素，其 position 属性值必然是 relative、fixed、absolute 或 static。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static</td>\n<td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。inherit 规定应该从父元素继承 position 属性的值。</td>\n</tr>\n<tr>\n<td></td>\n<td>默认定位属性值。该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其正常位置进行定位。因此，&quot;left:20&quot; 会向元素的 LEFT 位置添加 20 像素。</td>\n</tr>\n<tr>\n<td></td>\n<td>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。</td>\n</tr>\n<tr>\n<td></td>\n<td>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。老 IE 不支持。</td>\n</tr>\n<tr>\n<td></td>\n<td>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</td>\n</tr>\n<tr>\n<td>sticky</td>\n<td>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承 position 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id="display-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">display 属性都有哪些值？<a class="anchor" href="#display-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">§</a></h3>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>none</td>\n<td>此元素不会被显示。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>此元素将显示为块级元素，此元素前后会带有换行符。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素。（CSS2.1 新增的值）</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>此元素会作为列表显示。</td>\n</tr>\n<tr>\n<td>run-in</td>\n<td>此元素会根据上下文作为块级元素或内联元素显示。</td>\n</tr>\n<tr>\n<td>compact</td>\n<td>CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td>\n</tr>\n<tr>\n<td>marker</td>\n<td>CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示（类似 <code>&lt;table&gt;</code>），表格前后带有换行符。</td>\n</tr>\n<tr>\n<td>inline-table</td>\n<td>此元素会作为内联表格来显示（类似 <code>&lt;table&gt;</code>），表格前后没有换行符。</td>\n</tr>\n<tr>\n<td>table-row-group</td>\n<td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tbody&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-header-group</td>\n<td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;thead&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-footer-group</td>\n<td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tfoot&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-row</td>\n<td>此元素会作为一个表格行显示（类似 <code>&lt;tr&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-column-group</td>\n<td>此元素会作为一个或多个列的分组来显示（类似 <code>&lt;colgroup&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-column</td>\n<td>此元素会作为一个单元格列显示（类似 <code>&lt;col&gt;</code>）</td>\n</tr>\n<tr>\n<td>table-cell</td>\n<td>此元素会作为一个表格单元格显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code>）</td>\n</tr>\n<tr>\n<td>table-caption</td>\n<td>此元素会作为一个表格标题显示（类似 <code>&lt;caption&gt;</code>）</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 display 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，<code>inline</code>、<code>inline-block</code>、<code>block</code> 的区别是：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>block</th>\n<th>inline-block</th>\n<th>inline</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>大小</td>\n<td>填充其父容器的宽度。</td>\n<td>取决于内容。</td>\n<td>取决于内容。</td>\n</tr>\n<tr>\n<td>定位</td>\n<td>从新的一行开始，并且不允许旁边有 HTML 元素(除非是float)</td>\n<td>与其他内容一起流动，并允许旁边有其他元素。</td>\n<td>与其他内容一起流动，并允许旁边有其他元素。</td>\n</tr>\n<tr>\n<td>能否设置 width 和 height</td>\n<td>能</td>\n<td>能</td>\n<td>不能。设置会被忽略。</td>\n</tr>\n<tr>\n<td>可以使用 vertical-align 对齐</td>\n<td>不可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>边距(margin)和填充(padding)</td>\n<td>各个方向都存在</td>\n<td>各个方向都存在</td>\n<td>只有水平方向存在。垂直方向会被忽略。尽管 border 和 padding 在 content 周围，但垂直方向上的空间取决于 \'line-height\'</td>\n</tr>\n<tr>\n<td>浮动(float)</td>\n<td>-</td>\n<td>-</td>\n<td>就像一个 block 元素，可以设置垂直边距和填充。</td>\n</tr>\n</tbody>\n</table>\n<h3 id="font-%E5%B1%9E%E6%80%A7%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">font 属性如何设置字体？<a class="anchor" href="#font-%E5%B1%9E%E6%80%A7%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">§</a></h3>\n<ul>\n<li>属性值\n<ul>\n<li>font-style:  设置字体风格(正常normal/斜体italic/倾斜oblique)</li>\n<li>font-variant: 设置字体变形(设定小型大写字母)</li>\n<li>font-weight: 设置文本的粗细（bold粗/或用关键字 100 ~ 900 给字体指定了 9 级加粗度）</li>\n<li>font-size: 设置文本的大小(1em=16px 相当于普通文本的默认大小)</li>\n<li>line-height:设置行间的距离（行高）--不能使用负值</li>\n<li>font-family: 设置字体类型(5种通用字体/指定字体)</li>\n</ul>\n</li>\n<li>注意事项\n<ul>\n<li>除了使用关键字的情况之外，该属性必须同时设置 <code>font-size</code> 和 <code>font-family</code> 属性值。</li>\n<li>并非所有的 <code>font-variant</code> 属性值是被允许的。只有在 CSS 2.1 里规定的值才被允许使用，它们是 <code>normal</code> 和 <code>small-caps</code>。</li>\n<li>属性值的顺序并非完全自由：如需设置 <code>font-style</code>， <code>font-variant</code> 和 <code>font-weight</code> 中任意一个或几个的值，它们必须要放在 <code>font-size</code> 值的前面。</li>\n<li><code>line-height</code> 值必须紧跟在 <code>font-size</code> 之后，并且要在属性值前面加上。</li>\n<li><code>font-family</code> 是必不可少的，且必须放在最后（inherit 值是无效的）</li>\n</ul>\n</li>\n<li>关键字用于表示某个特定的系统字体\n<ul>\n<li><code>caption</code>  用于标题控件（如按钮，下拉列表等）的字体。</li>\n<li><code>icon</code> 用于标签图标的字体。</li>\n</ul>\n</li>\n</ul>\n<h3 id="link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB">Link 和 @import 的区别？<a class="anchor" href="#link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB">§</a></h3>\n<ul>\n<li>link属于XHTML标签，而@import是CSS提供的。 ⻚面被加载时，link会同时被加载，而@import引用的CSS会等到⻚面被加载完再加载。</li>\n<li>import只在IE 5以上才能识别，而link是XHTML标签，无兼容问题。</li>\n<li>link方式的样式权重高于@import的权重。 使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是 dom可以控制的。</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-z-index">如何理解 z-index？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-z-index">§</a></h3>\n<ul>\n<li>CSS 中的z-index属性控制重叠元素的垂直叠加顺序</li>\n<li>默认元素的z-index为0</li>\n<li>我们可以修改z-index来控制元素的图层 位置</li>\n<li>而且z-index只能影响设置了position值的元素。</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-float">如何理解 float？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-float">§</a></h3>\n<h2 id="css-%E5%B8%83%E5%B1%80">CSS 布局<a class="anchor" href="#css-%E5%B8%83%E5%B1%80">§</a></h2>\n<h3 id="css-%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%A7%84%E5%88%99">CSS 盒模型及其规则？<a class="anchor" href="#css-%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%A7%84%E5%88%99">§</a></h3>\n<ul>\n<li>CSS 盒模型描述了以文档树中的元素而生成的矩形框，并根据排版模式进行布局。</li>\n<li>盒模型 content、padding、border、margin 组成。</li>\n<li>CSS盒模型负责计算：\n<ul>\n<li>块级元素占用多少空间。</li>\n<li>边框是否重叠，边距是否合并。</li>\n<li>盒子的尺寸。</li>\n</ul>\n</li>\n<li>盒模型有以下规则：\n<ul>\n<li>块级元素的大小由width、height、padding、border和margin决定。</li>\n<li>如果没有指定height，则块级元素的高度等于其包含子元素的内容高度加上padding（除非有浮动元素，请参阅下文）。</li>\n<li>如果没有指定width，则非浮动块级元素的宽度等于其父元素的宽度减去父元素的padding。</li>\n<li>元素的height是由内容的height来计算的。</li>\n<li>元素的width是由内容的width来计算的。</li>\n<li>默认情况下，padding和border不是元素width和height的组成部分。</li>\n</ul>\n</li>\n<li>标准盒子模型：\n<ul>\n<li>在W3C标准下，我们定义元素的width值即为盒模型中的content的宽度值，height值即为盒模型中的content的高度值。</li>\n<li>元素的宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</li>\n</ul>\n</li>\n<li>怪异盒模型：\n<ul>\n<li>而IE怪异盒模型(IE8以下)width的宽度并不是content的宽度，而是border-left + padding-left + content的宽度值 + padding-right + border-right之和，height同理。</li>\n<li>元素占据的宽度 = margin-left + width + margin-right</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8Bfc%E6%98%AF%E4%BB%80%E4%B9%88">CSS 可视化格式模型（FC）是什么？<a class="anchor" href="#css-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8Bfc%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h3>\n<ul>\n<li>说到底，CSS 的可视化格式模型就是规定了浏览器在页面中如何处理文档树。\n<ul>\n<li>CSS中规定每一个元素都有自己的盒子模型(相当于规定了这个元素如何显示)</li>\n<li>然后可视化格式模型则是把这些盒子按照规则摆放到页面上，也就是如何布局</li>\n<li>换句话说，盒子模型规定了怎么在页面里摆放盒子，盒子的相互作用等等</li>\n</ul>\n</li>\n<li>CSS 有三种定位机制：普通流，浮动，绝对定位，如无特别提及，一般都是针对普通流中的</li>\n</ul>\n<p>关键字：</p>\n<ul>\n<li>包含块(Containing Block)：一个元素的 box 的定位和尺寸，会与某一矩形框有关，这个框就称之为包含块。元素会为它的子孙元素创建包含块，但是，并不是说元素的包含块就是它的父元素，元素的包含块与它的祖先元素的样式等有关系。\n<ul>\n<li>根元素是最顶端的元素，它没有父节点，它的包含块就是初始包含块</li>\n<li>static 和 relative 的包含块由它最近的块级、单元格或者行内块祖先元素的内容框(content)创建</li>\n<li>fixed的包含块是当前可视窗口</li>\n<li>absolute 的包含块由它最近的 position 属性为 absolute、relative 或者 fixed 的祖先元素创建</li>\n<li>如果其祖先元素是行内元素，则包含块取决于其祖先元素的 direction 特性</li>\n<li>如果祖先元素不是行内元素，那么包含块的区域应该是祖先元素的内边距边界</li>\n</ul>\n</li>\n<li>控制框(Controlling Box)：\n<ul>\n<li>块级元素和块框以及行内元素和行框的相关概念。</li>\n<li>如果一个框里，有一个块级元素，那么这个框里的内容都会被当作块框来进行格式化，因为只要出现了块级元素，就会将里面的内容分块几块，每一块独占一行。出现行内可以用匿名块框解决。</li>\n<li>如果一个框里，没有任何块级元素，那么这个框里的内容会被当成行内框来格式化，因为里面的内容是按照顺序成行的排列。</li>\n</ul>\n</li>\n<li>块框：\n<ul>\n<li>块级元素会生成一个块框 Block Box，块框会占据一整行，用来包含子 box 和生成的内容</li>\n<li>块框同时也是一个块包含框 Containing Box，里面要么只包含块框，要么只包含行内框(不能混杂)，如果块框内部有块级元素也有行内元素，那么行内元素会被匿名块框包围</li>\n</ul>\n</li>\n<li>匿名块框：如果一个块框在其中包含另外一个块框，那么我们强迫它只能包含块框，因此其它文本内容生成出来的都是匿名块框(而不是匿名行内框)。<code>&lt;DIV&gt;Some text&lt;P&gt;More text&lt;/P&gt;&lt;/DIV&gt;</code>。</li>\n<li>匿名内框：<code>&lt;P&gt;Some &lt;EM&gt;emphasized&lt;/EM&gt; text&lt;/P&gt;</code>。</li>\n<li>FC：格式化上下文，定义框内部的元素渲染规则，比较抽象，譬如：\n<ul>\n<li>FC 像是一个大箱子，里面装有很多元素</li>\n<li>箱子可以隔开里面的元素和外面的元素(所以外部不会影响 FC 内部渲染)</li>\n<li>内部的规则可以是：如何定位，宽高计算，margin 折叠等</li>\n<li>不同类型的框参与的 FC 类型不同，譬如块级框对应 BFC，行内框对应 IFC。并不是所有框都会产生 FC，而需符合特定条件。</li>\n</ul>\n</li>\n<li>BFC(Block Formatting Context)：块格式化上下文\n<ul>\n<li>\n<p>在 BFC 中，每一个元素左外边与包含块的左边相接触(对于从右到左的格式化，右外边接触包含块的右边)，即使清除浮动也是如此，除非这个元素也创建了一个新的 BFC。浮动元素一般会直接贴近它的包含块的左边，与普通元素重合。</p>\n<ul>\n<li>Box: CSS布局的基本单位，Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个⻚面是由很多个 Box 组成的，实际就是上个问题说的盒模型。</li>\n<li>Formatting context:块级上下文格式化，它是⻚面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素 将如何定位，以及和其他元素的关系和相互作用</li>\n</ul>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>内部 box 在垂直方向，一个接一个的放置</li>\n<li>box 的垂直方向由 margin 决定，属于同一个 BFC 的两个 box 间的 margin 会重叠</li>\n<li>BFC 区域不会与 float box 重叠（可用于排版)</li>\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</li>\n<li>计算 BFC 的高度时，浮动元素也参与计算(不会浮动坍塌)</li>\n</ul>\n</li>\n<li>\n<p>如何触发：</p>\n<ul>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, flex, inline-flex，table，table-cell，table-caption</li>\n<li>overflow 不为 visible</li>\n</ul>\n</li>\n<li>\n<p>注：display: table 本身不产生 BFC，但是会产生匿名框，而这个匿名框产生 BFC。匿名框包含 display: table-cell 的框</p>\n</li>\n</ul>\n</li>\n<li>IFC(Inline Formatting Context)：行内格式化上下文。\n<ul>\n<li>相比 BFC 规则来说，IFC 可能更加抽象——IFC 没有那么条理清晰的规则和触发条件。但总的来说，它就是行内元素自身如何显示以及在框内如何摆放的渲染规则，这样描述应该更容易理解。</li>\n<li>规则：\n<ul>\n<li>在行内格式化上下文中</li>\n<li>框一个接一个地水平排列，起点是包含块的顶部。</li>\n<li>水平方向上的 margin，border 和 padding 在框之间得到保留</li>\n<li>框在垂直方向上可以以不同的方式对齐：它们的顶部或底部对齐，或根据其中文字的基线对齐</li>\n</ul>\n</li>\n<li>行内元素与 IFC：\n<ul>\n<li>行内元素总是会应用 IFC 渲染规则</li>\n<li>行内元素会应用 IFC 规则渲染，譬如 text-align 可以用来居中等</li>\n<li>块框内部，对于文本这类的匿名元素，会产生匿名行框包围，而行框内部就应用 IFC 渲染规则</li>\n<li>行内框内部，对于那些行内元素，一样应用IFC渲染规则</li>\n<li>inline-block，会在元素外层产生 IFC(所以这个元素是可以通过 text-align 水平居中的)，当然，它内部则按照 BFC 规则渲染</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>行内框：一个行内元素生成一个行内框；行内元素能排在一行，允许左右有其它元素。</li>\n<li>行框：宽度由它的包含块和其中的浮动元素决定，高度的确定由行高度计算规则决定。行框的规则：\n<ul>\n<li>如果几个行内框在水平方向无法放入一个行框内，它们可以分配在两个或多个垂直堆叠的行框中(即行内框的分割)</li>\n<li>行框在堆叠时没有垂直方向上的分割且永不重叠</li>\n<li>行框的高度总是足够容纳所包含的所有框。不过，它可能高于它包含的最高的框(例如，框对齐会引起基线对齐)</li>\n<li>行框的左边接触到其包含块的左边，右边接触到其包含块的右边。</li>\n</ul>\n</li>\n<li>定位体系</li>\n<li>浮动</li>\n<li>...</li>\n</ul>\n<p>display 对不同框的影响：</p>\n<ul>\n<li>block，元素生成一个块框</li>\n<li>inline，元素产生一个或多个的行内框</li>\n<li>inline-block，元素产生一个行内级块框，行内块框的内部会被当作块块来格式化，而此元素本身会被当作行内级框来格式化(这也是为什么会产生BFC)</li>\n<li>none，不生成框，不再格式化结构中，当然了，另一个 visibility: hidden 则会产生一个不可见的框</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87">如何理解 CSS 层叠上下文？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87">§</a></h3>\n<blockquote>\n<p><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/</a></p>\n</blockquote>\n<ul>\n<li>层叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向(电脑屏幕的)视窗或者网⻚的用户的z 轴上延伸，HTML元素依据其自身属性按照优先级顺序占用层叠上下文的空间。</li>\n<li>触发以下条件则会产生层叠上下文：\n<ul>\n<li>根元素 (HTML)</li>\n<li>z-index 值不为 &quot;auto&quot;的 绝对/相对定位，</li>\n<li>一个 z-index 值不为 &quot;auto&quot;的 flex 项目 (flex item)，即:父元素 display: flex|inline-flex</li>\n<li>opacity 属性值小于 1 的元素(参考 the specification for opacity)，</li>\n<li>transform 属性值不为 &quot;none&quot;的元素，</li>\n<li>mix-blend-mode 属性值不为 &quot;normal&quot;的元素，</li>\n<li>filter值不为“none”的元素，</li>\n<li>perspective值不为“none”的元素，</li>\n<li>isolation 属性被设置为 &quot;isolate&quot;的元素，</li>\n<li>position: fixed</li>\n<li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值(参考 这篇文章)</li>\n<li>-webkit-overflow-scrolling 属性被设置 &quot;touch&quot;的元素</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">CSS 布局模型是怎样的？<a class="anchor" href="#css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">§</a></h3>\n<ul>\n<li>布局是承上启下的中间环节，渲染树是从 DOM 树映射而来的可布局的层级关系，通过应用布局属性确定视图排版。同时布局更是性能的瓶颈所在，需要灵活运用缓存、线程切换等手段来优化性能。</li>\n<li>把布局和视图生成两部分从整个架构中抽离出来，也可成为客户端 UI 框架。</li>\n<li>布局模型的基本属性：\n<ul>\n<li>CSS 2.1 定义了以下 4 个布局模型。\n<ul>\n<li>block layout，块级布局。侧重于垂直方向。</li>\n<li>inline layout，行内布局。侧重于水平方向。</li>\n<li>table layout，表格布局。</li>\n<li>positioned layout</li>\n</ul>\n</li>\n<li>CSS 3 引入了以下布局模型。\n<ul>\n<li>flex layout，弹性盒布局。与方向无关。主要适用于应用程序的组件及小规模的布局。</li>\n<li>CSS Grid Layout。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>固定布局。通过固定页面高度宽度像素大小来实现。\n<ul>\n<li>优点：上手快，大小固定，便于理解。</li>\n<li>缺点：大小无法改变，无法动态化适应各个分辨率的终端设备。</li>\n</ul>\n</li>\n<li>百分比布局。使用百分比来代替传统 px 作为单位。\n<ul>\n<li>优点：很好解决自适应需求。</li>\n<li>缺点：不够灵活，当增加更多的百分比元素会导致内容溢出。</li>\n</ul>\n</li>\n<li>浮动布局。通过 <code>display</code>、<code>float</code> 和 <code>clear</code> 等属性实现。\n<ul>\n<li>优点：在没有 flexbox 时应用广泛。</li>\n<li>缺点：不易理解，需要注意清除浮动， 没有垂直居中，没有等高，也没有顺序无关性。</li>\n</ul>\n</li>\n<li>定位布局。通过 <code>postion</code>、<code>left</code>、<code>top</code> 等属性实现。\n<ul>\n<li>优点：可以绝对定位和相对定位。</li>\n</ul>\n</li>\n<li>Flexbox 布局。\n<ul>\n<li>优点：拥有顺序无关性，良好支持响应式布局，方便垂直居中和等高操作。可以在沿 X 轴排列和沿 Y 轴排列间互相转换 可缩可放，可行可列，还有自适应空间能力。 同一效果可以有多种实现写法</li>\n<li>缺点：对旧版本(PC 端、移动端)浏览器兼容性不足，一维布局系统，只适合做局部布局</li>\n</ul>\n</li>\n<li>Grid 布局。\n<ul>\n<li>优点：二维布局系统，通常用于整个页面的规划。</li>\n<li>缺点：对一些新浏览器其兼容性也不足。</li>\n</ul>\n</li>\n<li>表格布局。通过 <code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code> 等标签或通过 <code>display:table</code> 来实现。\n<ul>\n<li>优点：能垂直居中，还能等高。</li>\n<li>缺点：没有顺序无关性，边框问题费劲，应对响应式布局能力有限。</li>\n</ul>\n</li>\n<li>Multi-column 多列布局。</li>\n<li>流式布局。</li>\n<li>居中布局</li>\n<li>全局布局</li>\n<li>多列等高布局</li>\n<li>以下混合方案可通过多种布局技术来实现。\n<ul>\n<li>基本网格布局(平均布局)。</li>\n<li>栅格布局。</li>\n<li>流体布局：利用元素“流”的特性实现的各类布局效果。</li>\n<li>自适应布局：包括表格布局，凡是具有自适应特性实现的各类布局效果。</li>\n<li>圣杯布局。下图左侧为圣杯布局模型，右侧为响应式结果。</li>\n<li>双飞翼布局。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3">CSS 布局模型的算法思想？<a class="anchor" href="#css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3">§</a></h3>\n<p>一个对象的布局由位置和尺寸这两个要素唯一确定，但实际使用中很少需要为其赋予绝对值来指定排版，而是通过指定相对位置、相对宽高、相互关系来间接实现。所以布局要做的就是从这些相对信息中推算出每个对象的绝对信息，通过多次从根节点开始向下遍历，以及从子节点向上回溯，不断估计、修正，计算出树上每个节点的唯一布局。</p>\n<p>无论何种框架，要实现通过用网页的规范或自定义的模板规范来达到动态控制原生 UI，都会包含以下过程：</p>\n<ul>\n<li>HTML 或模板解析，构建 DOM 树</li>\n<li>CSS 样式解析，并转换为原生系统属性</li>\n<li>动态数据解析及注入</li>\n<li>从 DOM 树构建渲染树</li>\n<li>对渲染树各节点应用样式，并计算布局</li>\n<li>对渲染树各节点绑定事件，实现 JS 和原生方法之间的互相调用</li>\n<li>从渲染树生成视图，最终显示</li>\n</ul>\n<p>React-Native 和 Weex 的核心布局算法都采用 Facebook 开源的 CSSLayout 算法，CSSLayout 基于 W3C 标准的 Flexbox 模型对页面元素排版，同时也支持相对布局和绝对布局，iOS 和 Andriod 平台都适用。</p>\n<p>CSSLayout 对容器可应用 <code>FlexDirection</code>、<code>FlexWrap</code>、<code>JustifiyContent</code>、<code>AlignItems</code>、<code>AlignContent</code> 属性。对元素可应用 <code>Flex</code>、<code>AlignSelf</code> 属性（除了 Flex 属性，还支持普通的 Position 和 Overflow 属性）。</p>\n<p>布局算法把外部传入的计算属性先转化为对应的数组，通过下标访问具体值，而下标又是通过主轴、交叉轴构造的映射关系表来获取。</p>\n<p>计算过程用到的样式属性如下。</p>\n<ul>\n<li>crossAxis、mainAxis、margin、padding、leading、trailing</li>\n<li>minHeight、height、maxHeight、minWidth、width、maxWidth</li>\n</ul>\n<p>计算过程中用到的布局属性如下。</p>\n<ul>\n<li>位置 position，包括 left、top、right、bottom 四个定位值。</li>\n<li>尺寸 dimension，包括 width 和 height。</li>\n<li>估计尺寸 measuredDimension，包括 width 和 height，measuredDimension 是计算过程中的中间变量，几次迭代后得到最终的 dimension。</li>\n</ul>\n<p>CSSLayout 算法首先对内容节点、叶子节点和非布局节点这三种情况进行预处理，提前返回，减少走完整个流程的次数，尽可能的减少计算量。</p>\n<p>CSSLayout 算法中的缓存分为两个层次，如下。</p>\n<ul>\n<li><code>cached_layout</code> 把渲染树中所有节点的布局结果和估计结果都缓存起来，内部通过 <code>CSSCachedMeasurement</code> 数据结构来维护，只有当两棵渲染树计算条件完全匹配时才会触发，复用要求高。</li>\n<li><code>cachedMeasurement</code>  把中间的估算结果缓存起来，内部缓存最近 16 次的计算结果， 在渲染树增量更新、插入节点等部分更新情况下避免重复估算尺寸，复用要求低。</li>\n</ul>\n<h3 id="flexbox-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">Flexbox 基础概念？<a class="anchor" href="#flexbox-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">§</a></h3>\n<blockquote>\n<p>时代背景：随着终端设备的多样化发展，需要拥有足够的定义来支持那些必须随用户代理(user agent)不同或设备方向从水平转为垂直等各种变化而变换方向、调整大小、拉伸、收缩的应用程序组件。</p>\n</blockquote>\n<p>flexbox 是一种布局机制。分为弹性容器(Flex container)和弹性项目(Flex item)，分别有自己的属性。在 flex 中，弹性容器的子元素可以在任何方向上排布，也可以“弹性伸缩”其尺寸，既可以增加尺寸以填满未使用的空间，也可以收缩尺寸以避免父元素溢出。</p>\n<p>flexbox 被期望设计为：</p>\n<ul>\n<li>在任何流动的方向上(包括上下左右)都能进行良好的布局。</li>\n<li>可以以逆序或者以任意顺序排列布局。</li>\n<li>可以线性的沿着主轴一字排开 或者 沿着侧轴换行排列。</li>\n<li>可以弹性的在任意的容器中伸缩大小。</li>\n<li>可以使子元素们在容器主轴方向上或者在容器侧轴方向上进行对齐。</li>\n<li>可以动态的 沿着主轴方向伸缩子级的尺寸，与此同时保证父级侧轴方向上的尺寸。</li>\n</ul>\n<p>优点：告别使用浮动的 <code>&lt;div&gt;</code> 元素、绝对定位和一些 JavaScript hacks，使用仅仅几行 CSS 就可以构建出水平或垂直方向的布局。</p>\n<p>缺点：一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。</p>\n<pre class="language-css"><code class="language-css"><span class="token comment">/* Flexbox 容器属性 */</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">/* flex-direction 决定主轴的方向。 */</span>\n  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span>\n  <span class="token comment">/* flex-wrap 定义如果一条轴线排不下，如何换行。 */</span>\n  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span>\n  <span class="token comment">/* flex-flow 是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。 */</span>\n  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span>\n  <span class="token comment">/* justify-content 定义了项目在主轴上的对齐方式。 */</span>\n  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span>\n  <span class="token comment">/* align-items 定义项目在交叉轴上如何对齐。 */</span>\n  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>\n  <span class="token comment">/* align-content 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 */</span>\n  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* Flexbox 项目属性 */</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">/* order 定义项目的排列顺序。数值越小，排列越靠前，默认为 0。 */</span>\n  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer><span class="token punctuation">;</span>\n  <span class="token comment">/* flex-grow 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。 */</span>\n  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment">/* default 0 */</span>\n  <span class="token comment">/* flex-shrink 定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。 */</span>\n  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment">/* default 1 */</span>\n  <span class="token comment">/* flex-basis 定义了在分配多余空间之前，项目占据的主轴空间。 */</span>\n  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length> | auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span>\n  <span class="token comment">/* flex 是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。 */</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">\'flex-grow\'</span>> &lt;<span class="token string">\'flex-shrink\'</span>>? || &lt;<span class="token string">\'flex-basis\'</span>> ]\n  <span class="token comment">/* align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 */</span>\n  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="flexbox-%E8%A6%81%E7%82%B9%E9%A1%BB%E7%9F%A5">Flexbox 要点须知？<a class="anchor" href="#flexbox-%E8%A6%81%E7%82%B9%E9%A1%BB%E7%9F%A5">§</a></h3>\n<p>Flexbox 相关词汇：需要我们从诸如水平/行内轴和垂直/块级轴这些术语中解放出来，用一套新的术语来正确描述此模型。</p>\n<ul>\n<li>Flex container，弹性容器。包含弹性项目的父元素。通过设置 <code>display</code> 属性的值为 <code>flex</code> 或 <code>inline-flex</code> 来定义弹性容器。值 <code>flex</code> 使弹性容器成为块级元素。值 <code>inline-flex</code> 使弹性容器成为单个不可分的行内级元素。</li>\n<li>Flex item，弹性项目。弹性容器的每个子元素。</li>\n<li>Axis，轴。每个弹性框布局包含两个轴。弹性项目沿其依次排列的那根轴称为主轴(main axis)。垂直于主轴的那根轴称为侧轴(cross axis)。\n<ul>\n<li><code>flex-direction</code> 确立主轴。</li>\n<li><code>justify-content</code> 定义了在当前行上，弹性项目沿主轴如何排布。</li>\n<li><code>align-items</code> 定义了在当前行上，弹性项目沿侧轴默认如何排布。</li>\n<li><code>align-self</code> 定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 <code>align-items</code> 所确立的默认值。</li>\n</ul>\n</li>\n<li>Direction，方向。弹性容器的主轴起点(main start)/主轴终点(main end)和侧轴起点(cross start)/侧轴终点(cross end)描述了弹性项目排布的起点与终点。\n<ul>\n<li><code>order</code> 属性将元素与序号关联起来，以此决定哪些元素先出现。order 属性并不影响语音和导航的次序。</li>\n<li><code>flex-flow</code> 属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 属性的简写，决定弹性项目如何排布。</li>\n</ul>\n</li>\n<li>Line，行。根据 <code>flex-wrap</code> 属性，弹性项目可以排布在单个行或者多个行中。此属性控制侧轴的方向和新行排列的方向。</li>\n<li>Dimension，尺寸。根据弹性容器的主轴与侧轴，弹性项目的宽和高中，对应主轴的称为主轴尺寸(main size) ，对应侧轴的称为 侧轴尺寸(cross size)。\n<ul>\n<li><code>min-height</code> 与 <code>min-width</code> 属性初始值将为 0。</li>\n<li><code>flex</code> 属性是 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 属性的简写，描述弹性项目的整体的伸缩性。</li>\n</ul>\n</li>\n</ul>\n<p>Flexbox 要点须知</p>\n<ul>\n<li>弹性容器直接包含的文本（除只包含一系列空白符外）将被包覆成匿名弹性单元。</li>\n<li>对于弹性容器的绝对定位子元素来说，其静态位置参照弹性容器的内容框的主起始角确定，而后依此完成此元素的定位。</li>\n<li>相邻的弹性元素其外边距不会互相合并。使用 auto 外边距可以吸收掉水平或垂直方向上的额外空间，这可以用于对齐或分隔相邻的弹性项目。</li>\n<li>不像 CSS 中的其他对齐方法，弹性框的对齐属性将进行“真正的”居中对齐。这意味着即使弹性条目溢出了弹性容器，它依然保持居中。如果溢出超过了页面的上边缘或左边缘，则虽然那些地方确实有内容，却无法滚动到那些位置。在未来的发布版本里，对齐属性将会包含有“安全”选项。</li>\n<li>多栏布局模块的 <code>column-*</code> 属性对弹性项目无效。</li>\n<li><code>float</code> 与 <code>clear</code> 对弹性项目无效。使用 <code>float</code> 将使元素的 <code>display</code> 属性计为 <code>block</code>。</li>\n<li><code>vertical-align</code> 对弹性项目的对齐无效。</li>\n<li>只要 break- 属性的设置值允许，在弹性框布局中是可以存在分页的。CSS3 中的 <code>break-after</code>、<code>break-before</code> 和 <code>break-inside</code>，以及 CSS 2.1 中的 <code>page-break-before</code>、<code>page-break-after</code> 和 <code>page-break-inside</code> 属性在弹性容器上、弹性项目上和弹性项目内均可以使用。</li>\n</ul>\n<h3 id="css-grid-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">CSS Grid 如何使用？<a class="anchor" href="#css-grid-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">§</a></h3>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-169223577-1" }),
        React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "CSS"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="css-%E5%9F%BA%E7%A1%80%E5%92%8C%E8%A7%84%E8%8C%83">CSS 基础和规范<a class="anchor" href="#css-%E5%9F%BA%E7%A1%80%E5%92%8C%E8%A7%84%E8%8C%83">§</a></h2>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B7%E5%BC%8F%E8%A1%A8">什么是样式表？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B7%E5%BC%8F%E8%A1%A8">§</a></h3>\n<ul>\n<li>\n<p>样式表是一种将网页的内容和表示分离的网页设计形式，在网页设计中网页标记(HTML 或 XHTML)包含页面的语义内容和结构，但没有定义其可视化布局(风格)。相反，风格的定义是在一个外部的样式表文件中，使用如 CSS、XSLT 样式表语言。这种设计方法被认为是一种“分离”，因为它在很大程度上取代了以前风格和结构在一起的定义方法。 这种方法背后的哲学是一种关注点的分离。</p>\n<ul>\n<li>优点：速度、可维护性、可访问性、定制、一致性、可移植性</li>\n<li>缺点：没有解析和生成工具导致应用范围小</li>\n</ul>\n</li>\n<li>\n<p>其它样式表语言有：</p>\n<ul>\n<li>1998.5.12 CSS2 发布，推行内容和表现分离，表格布局开始落寞</li>\n<li>2007 CSS2.1 发布</li>\n<li>从 CSS2+ 开始，前端技术更加关注图片和文字的呈现。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7">CSS3 有哪些新特性？<a class="anchor" href="#css3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7">§</a></h3>\n<ul>\n<li>文本类：\n<ul>\n<li><code>text-shadow</code>： 给文本应用阴影</li>\n<li><code>word-wrap</code>:  强制文本进行换行</li>\n<li><code>@font-face</code> 字体规则； 可以用来加载字体样式，还可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。</li>\n</ul>\n</li>\n<li>css3 边框：\n<ul>\n<li>border-radius 圆角</li>\n<li>border-image 使用图片创建边框</li>\n<li>box-shadow 给边框添加阴影</li>\n</ul>\n</li>\n<li>css3 背景：\n<ul>\n<li>background-size 规定背景图片的尺寸；</li>\n<li>background-origin 属性规定背景图片的定位区域(content/padding/border)</li>\n</ul>\n</li>\n<li>2D/3D 转化：\n<ul>\n<li>2D转化：translate(left,top) 方法使元素从其当前位置移动等</li>\n<li>3d转化：rotateX() 等方法使元素围绕其 坐标轴以给定的度数进行旋转</li>\n</ul>\n</li>\n<li>过渡：通过把效果添加到某个具体的 css 属性上并规定效果时长来使得元素从一种样式逐渐改变为另一种的效果</li>\n<li>动画：在 @keyframes  中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果</li>\n<li>多列布局：\n<ul>\n<li>column-count 属性规定元素应该被分隔的列数</li>\n<li>column-gap 属性规定列之间的间隔</li>\n<li>column-rule 属性设置列之间的宽度、样式和颜色规则</li>\n</ul>\n</li>\n<li>新的用户界面属性:\n<ul>\n<li><code>box-sizing</code>：允许以特定的方式定义匹配某个区域的特定元素,例如值设置为border-box则为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制z</li>\n<li><code>outline-offset</code>：对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</li>\n<li><code>resize</code>：属性规定是否可由用户调整元素尺寸</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%90%84%E7%A7%8D%E6%95%B0%E5%80%BC%E5%8D%95%E4%BD%8D">CSS 各种数值单位？<a class="anchor" href="#css-%E5%90%84%E7%A7%8D%E6%95%B0%E5%80%BC%E5%8D%95%E4%BD%8D">§</a></h3>\n<ul>\n<li>整数值、数值、百分比值、长度值、颜色值、字符串值</li>\n<li>CSS3：角度值、频率值、时间值</li>\n<li>属性值：\n<ul>\n<li>属性值可以由单一内容构成，也可以由“值 + 关键字 +功能符”构成。</li>\n<li>属性值：声明、声明块、规则、规则集、选择器</li>\n</ul>\n</li>\n<li>长度单位：\n<ul>\n<li>相对长度单位\n<ul>\n<li>相对字体长度单位：em、ex，CSS3：rem、ch</li>\n<li>相对视区长度单位：vh、vw、vmin、vmax</li>\n</ul>\n</li>\n<li>绝对长度单位\n<ul>\n<li>px</li>\n<li>不常用的：pt、cm、mm、pc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>颜色单位：\n<ul>\n<li>十六进制色。</li>\n<li>RGB 颜色：每个参数 (red、green 以及 blue) 定义颜色的强度，可以是介于 0 与 255 之间的整数，或者是百分比值（从 0% 到 100%）。</li>\n<li>RGBA 颜色：<code>rgba(red, green, blue, alpha)</code>。alpha 参数是介于 0.0（完全透明）与 1.0（完全不透明）的数字。</li>\n<li>HSL 颜色：<code>hsl(hue, saturation, lightness)</code>。色度，饱和度，亮度。</li>\n<li>HSLA 颜色：在 HSL 基础上，多了透明度。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-resetting-%E5%92%8C-css-normalizing">CSS Resetting 和 CSS Normalizing？<a class="anchor" href="#css-resetting-%E5%92%8C-css-normalizing">§</a></h3>\n<ul>\n<li>重置，Resetting：意味着出去所有的浏览器默认样式，对于页面所有元素必须重新定义各种元素的样式。可用在非常个性化的网页设计上。</li>\n<li>标准化，Normalizing：标准化没有去掉所有的默认样式，而是保留了有用的一部分，同时还纠正了一些常见的错误。</li>\n</ul>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF-css-%E7%9A%84-bembnf-%E8%A7%84%E8%8C%83">什么是 CSS 的 BEM、BNF 规范？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-css-%E7%9A%84-bembnf-%E8%A7%84%E8%8C%83">§</a></h3>\n<p>BEM(Block Element Modifier)原则上建议为独立的 CSS 类命名，并且在需要层级关系时，将关系也体现在命名中，这自然会使选择器高效且易于覆盖。</p>\n<h2 id="%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7">选择器与属性<a class="anchor" href="#%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7">§</a></h2>\n<h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB">CSS 选择器的分类？<a class="anchor" href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB">§</a></h3>\n<ul>\n<li>通用元素选择器</li>\n<li>标签选择器</li>\n<li>类选择器ID 选择器</li>\n<li>属选择器性：为拥有指定属性的 HTML 元素设置样式（例如:[title]{...}）</li>\n<li>伪类选择器</li>\n<li>伪元素选择器</li>\n<li>子元素选择器：选择某个元素的子元素(h1 &gt; em {..})</li>\n<li>关系选择器\n<ul>\n<li>后代选择器：可以选择作为某元素后代的元素（h1 em {..}）</li>\n<li>相邻后代选择器</li>\n<li>兄弟选择器</li>\n<li>相邻兄弟选择器：选择紧接在另一个元素后的元素(h1 + p{..})</li>\n</ul>\n</li>\n</ul>\n<p>CSS 基本选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.</td>\n<td>*</td>\n<td>通用元素选择器，匹配任何元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2.</td>\n<td>E</td>\n<td>标签选择器，匹配所有使用 E 标签的元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3.</td>\n<td>.info</td>\n<td>class 选择器，匹配所有 class 属性中包含 info 的元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4.</td>\n<td>#footer</td>\n<td>id 选择器，匹配所有 id 属性等于 footer 的元素</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 多元素的组合选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5.</td>\n<td>E, F</td>\n<td>多元素选择器，同时匹配所有 E 元素或 F 元素，E 和 F 之间用逗号分隔</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6.</td>\n<td>E F</td>\n<td>后代元素选择器，匹配所有属于 E 元素后代的 F 元素，E 和 F 之间用空格分隔</td>\n<td>1</td>\n</tr>\n<tr>\n<td>7.</td>\n<td>E &gt; F</td>\n<td>子元素选择器，匹配所有 E 元素的子元素 F</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8.</td>\n<td>E + F</td>\n<td>毗邻元素选择器，匹配所有紧随 E 元素之后的同级元素 F</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 2.1 属性选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9.</td>\n<td>E[att]</td>\n<td>匹配所有具有 att 属性的 E 元素，不考虑它的值。（注意：E 在此处可以省略，比如&quot;[cheacked]&quot;。以下同。）</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10.</td>\n<td>E[att=val]</td>\n<td>匹配所有 att 属性等于&quot;val&quot;的 E 元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>11.</td>\n<td>E[att~=val]</td>\n<td>匹配所有 att 属性具有多个空格分隔的值、其中一个值等于&quot;val&quot;的 E 元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>12.</td>\n<td>E[att|=val]</td>\n<td>匹配所有 att 属性具有多个连字号分隔（hyphen-separated）的值、其中一个值以&quot;val&quot;开头的 E 元素，主要用于 lang 属性，比如&quot;en&quot;、&quot;en-us&quot;、&quot;en-gb&quot;等等</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 的同级元素通用选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>24.</td>\n<td>E ~ F</td>\n<td>匹配任何在 E 元素之后的同级F元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 属性选择器</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>25.</td>\n<td>E[att^=&quot;val&quot;]</td>\n<td>属性 att 的值以&quot;val&quot;开头的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>26.</td>\n<td>E[att$=&quot;val&quot;]</td>\n<td>属性 att 的值以&quot;val&quot;结尾的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>27.</td>\n<td>E[att*=&quot;val&quot;]</td>\n<td>属性 att 的值包含&quot;val&quot;字符串的元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">CSS 选择器的优先级是怎样的？<a class="anchor" href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">§</a></h3>\n<ul>\n<li>\n<p>CSS 优先级，是指 CSS 样式在浏览器中被解析的先后顺序。在比较样式的优先级时，只需统计选择符中的 ID、class 和标签名的个数，然后把相应的权值相加即可，最后根据结果排出优先级。权值较大的优先级越高；权值相同的，后定义的优先级较高。</p>\n</li>\n<li>\n<p>优先级特点：</p>\n<ul>\n<li>当同一个元素有多个声明的时候，优先级才会有意义；</li>\n<li>而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。</li>\n<li>每一个直接作用于元素的 CSS 规则总是会覆盖该元素从祖先元素继承而来的规则</li>\n<li>文档树中元素的接近度 （Proximity of elements）对优先级没有影响</li>\n<li>通配选择符（universal selector）(*), 关系选择符（combinators） (+, &gt;, ~, \' \')  和 否定伪类（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级。</li>\n</ul>\n</li>\n<li>\n<p>一种排序：</p>\n<ul>\n<li>样式值含有！important，优先级最高（尽量别使用，破坏了样式表中的固有的级联规则）；</li>\n<li>ID 选择器优先级很高，权值为 100；</li>\n<li>类选择器、属性选择器和伪类选择器的权值为 10；</li>\n<li>标签选择器权值为 1。</li>\n</ul>\n</li>\n<li>\n<p>另一种排序：</p>\n<ul>\n<li>优先级通过 4 个维度指标确定，我们假定以 a、b、c、d 命名，分别代表以下含义：</li>\n<li>a 表示是否使用内联样式。如果使用，a 为 1，否则为 0。</li>\n<li>b 表示 ID 选择器数量。</li>\n<li>c 表示类选择器、属性选择器和伪类选择器数量之和。</li>\n<li>d 表示标签(类型)选择器和伪元素选择器之和。</li>\n<li>优先级的结果并非通过以上四个值生成一个得分，而是每个值分开比较。a、b、c、d 权重从左到右，依次减小。判断优先级时，从左到右，一一比较，直到比较出最大值，即可停止。所以，如果b的值不同，那么 c 和 d 不管多大，都不会对结果产生影响。比如 0，1，0，0的优先级高于 0，0，10，10。</li>\n<li>当出现优先级相等的情况时，最晚出现的样式规则会被采纳。如果你在样式表里写了相同的规则（无论是在该文件内部还是其它样式文件中），那么最后出现的（在文件底部的）样式优先级更高，因此会被采纳。</li>\n<li>在写样式时，我会使用较低的优先级，这样这些样式可以轻易地覆盖掉。尤其对写 UI 组件的时候更为重要，这样使用者就不需要通过非常复杂的优先级规则或使用 !important 的方式，去覆盖组件的样式了。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%E5%8E%9F%E5%88%99%E5%8F%8A%E4%BC%98%E5%8C%96%E5%87%86%E5%88%99">CSS 选择器查询原则及优化准则<a class="anchor" href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%E5%8E%9F%E5%88%99%E5%8F%8A%E4%BC%98%E5%8C%96%E5%87%86%E5%88%99">§</a></h3>\n<p>浏览器是如何查找元素的呢？浏览器 CSS 匹配不是从左到右进行查找，而是从右到左进行查找。</p>\n<p>比如 <code>#divBox p span.red {color: red;}</code> 浏览器的查找顺序如下：先查找 HTML 中所有 class=\'red\' 的 span 元素，找到后，再查找其父辈元素中是否有 p 元素，再判断 p 的父元素中是否有 ID 为 divBox 的 DIV 元素，如果都存在则匹配上。</p>\n<p>浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。</p>\n<p>优化目的是减少 CSS 文件大小，提高维护性和可读性。优化准则如下。</p>\n<ul>\n<li>不要在 ID 选择器前使用标签名</li>\n<li>不要在 class 选择器前使用标签名</li>\n<li>尽量少使用层级关系</li>\n<li>使用 class 代替层级关系</li>\n<li>在 CSS 渲染效率中 ID 和 class 的效率是基本相当的</li>\n<li>使用属性简写</li>\n<li>移除 CSS 框架中多余的内容</li>\n<li>将 CSS 文件的声明用注释分隔开并进行排版</li>\n<li>拆分布局风格：给每种布局一个单独的CSS文件</li>\n<li>养成为 CSS 写注释的习惯</li>\n<li>上线时压缩使用</li>\n</ul>\n<h3 id="css-%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">CSS 伪类与伪元素都有哪些？<a class="anchor" href="#css-%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">§</a></h3>\n<p>伪类是加在选择器后面的用来指定元素状态的关键字。比如，:hover 会在鼠标悬停在选中元素上时应用相应的样式</p>\n<ul>\n<li><code>:first-of-type/:last-of-type/:only-of-type</code>： 选择属于其父元素的首/最后/唯一的一个xx元素的每个 xx元素</li>\n<li><code>:only-child</code>： 选择属于其父元素的唯一子元素的每个xx 元素</li>\n<li><code>:empty</code>： 选择没有子元素的每个xx元素</li>\n<li><code>:root</code>: 选择文档的根元素</li>\n<li><code>::selection</code>： 选择被用户选取的元素部分</li>\n<li><code>:checked/:disabled</code>： 选择每个被选中/禁用的xx元素</li>\n</ul>\n<p>CSS 2.1 中的伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>13.</td>\n<td>E:first-child</td>\n<td>匹配父元素的第一个子元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>14.</td>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n<td>1</td>\n</tr>\n<tr>\n<td>15.</td>\n<td>E:visited</td>\n<td>匹配所有已被点击的链接</td>\n<td>1</td>\n</tr>\n<tr>\n<td>16.</td>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>17.</td>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的 E 元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>18.</td>\n<td>E:focus</td>\n<td>匹配获得当前焦点的 E 元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>19.</td>\n<td>E:lang(c)</td>\n<td>匹配 lang 属性等于 c 的 E 元素</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 2.1 中的伪元素</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20.</td>\n<td>E:first-line</td>\n<td>匹配 E 元素的第一行</td>\n<td>1</td>\n</tr>\n<tr>\n<td>21.</td>\n<td>E:first-letter</td>\n<td>匹配 E 元素的第一个字母</td>\n<td>1</td>\n</tr>\n<tr>\n<td>22.</td>\n<td>E:before</td>\n<td>在 E 元素之前插入生成的内容</td>\n<td>2</td>\n</tr>\n<tr>\n<td>23.</td>\n<td>E:after</td>\n<td>在 E 元素之后插入生成的内容</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 中与用户界面有关的伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>28.</td>\n<td>E:enabled</td>\n<td>匹配表单中激活的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>29.</td>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>30.</td>\n<td>E:checked</td>\n<td>匹配表单中被选中的 radio（单选框）或 checkbox（复选框）元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>31.</td>\n<td>E::selection</td>\n<td>匹配用户当前选中的元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS 3 中的结构性伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32.</td>\n<td>E:root</td>\n<td>匹配文档的根元素，对于 HTML 文档，就是 HTML 元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>33.</td>\n<td>E:nth-child(n)</td>\n<td>匹配其父元素的第 n 个子元素，第一个编号为 1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>34.</td>\n<td>E:nth-last-child(n)</td>\n<td>匹配其父元素的倒数第 n 个子元素，第一个编号为 1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>35.</td>\n<td>E:nth-of-type(n)</td>\n<td>与 :nth-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>36.</td>\n<td>E:nth-last-of-type(n)</td>\n<td>与 :nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td>37.</td>\n<td>E:last-child</td>\n<td>匹配父元素的最后一个子元素，等同于 :nth-last-child(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>38.</td>\n<td>E:first-of-type</td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于 :nth-of-type(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>39.</td>\n<td>E:last-of-type</td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于 :nth-last-of-type(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>40.</td>\n<td>E:only-child</td>\n<td>匹配父元素下仅有的一个子元素，等同于 :first-child :last-child或 :nth-child(1) :nth-last-child(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>41.</td>\n<td>E:only-of-type</td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于 :first-of-type :last-of-type 或 :nth-of-type(1) :nth-last-of-type(1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>42.</td>\n<td>E:empty</td>\n<td>匹配一个不包含任何子元素的元素，注意，文本节点也被看作子元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS3 的反选伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>43.</td>\n<td>E:not(s)</td>\n<td>匹配不符合当前选择器的任何元素</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>CSS3 中的 :target 伪类</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n<th>定义在版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>44.</td>\n<td>E:target</td>\n<td>匹配文档中特定&quot;id&quot;点击后的效果</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id="css-%E4%B8%AD%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E6%89%BF">CSS 中哪些属性可以被继承？<a class="anchor" href="#css-%E4%B8%AD%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E6%89%BF">§</a></h3>\n<ul>\n<li>\n<p>所有元素可以继承的属性：</p>\n<ul>\n<li>visibility: 规定元素是否可见</li>\n<li>cursor（发音为keser）:规定要显示的光标的类型（auto/pointer等）</li>\n</ul>\n</li>\n<li>\n<p>块级元素可以继承的属性：text-indent、text-align</p>\n</li>\n<li>\n<p>内联元素可以继承的属性：</p>\n<ul>\n<li>字体系列属性</li>\n<li>除 text-indent、text-align 之外的文本系列属性</li>\n</ul>\n</li>\n<li>\n<p>字体，文本属性中：</p>\n<ul>\n<li>font、font-size、font-variant</li>\n<li>color</li>\n<li>line-height：行高</li>\n<li>word-spacing：增加或减少单词间的空白（即字间隔）</li>\n<li>letter-spacing: 增加或减少字符间的空白</li>\n<li>text-indent：文本缩进</li>\n<li>text-transform：控制文本大小写</li>\n</ul>\n</li>\n<li>\n<p>布局相关的：list-style</p>\n</li>\n</ul>\n<h3 id="position-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">position 属性都有哪些值？<a class="anchor" href="#position-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">§</a></h3>\n<p>经过定位的元素，其 position 属性值必然是 relative、fixed、absolute 或 static。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static</td>\n<td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。inherit 规定应该从父元素继承 position 属性的值。</td>\n</tr>\n<tr>\n<td></td>\n<td>默认定位属性值。该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其正常位置进行定位。因此，&quot;left:20&quot; 会向元素的 LEFT 位置添加 20 像素。</td>\n</tr>\n<tr>\n<td></td>\n<td>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。</td>\n</tr>\n<tr>\n<td></td>\n<td>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。老 IE 不支持。</td>\n</tr>\n<tr>\n<td></td>\n<td>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</td>\n</tr>\n<tr>\n<td>sticky</td>\n<td>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承 position 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id="display-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">display 属性都有哪些值？<a class="anchor" href="#display-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">§</a></h3>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>none</td>\n<td>此元素不会被显示。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>此元素将显示为块级元素，此元素前后会带有换行符。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素。（CSS2.1 新增的值）</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>此元素会作为列表显示。</td>\n</tr>\n<tr>\n<td>run-in</td>\n<td>此元素会根据上下文作为块级元素或内联元素显示。</td>\n</tr>\n<tr>\n<td>compact</td>\n<td>CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td>\n</tr>\n<tr>\n<td>marker</td>\n<td>CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示（类似 <code>&lt;table&gt;</code>），表格前后带有换行符。</td>\n</tr>\n<tr>\n<td>inline-table</td>\n<td>此元素会作为内联表格来显示（类似 <code>&lt;table&gt;</code>），表格前后没有换行符。</td>\n</tr>\n<tr>\n<td>table-row-group</td>\n<td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tbody&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-header-group</td>\n<td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;thead&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-footer-group</td>\n<td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tfoot&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-row</td>\n<td>此元素会作为一个表格行显示（类似 <code>&lt;tr&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-column-group</td>\n<td>此元素会作为一个或多个列的分组来显示（类似 <code>&lt;colgroup&gt;</code>）。</td>\n</tr>\n<tr>\n<td>table-column</td>\n<td>此元素会作为一个单元格列显示（类似 <code>&lt;col&gt;</code>）</td>\n</tr>\n<tr>\n<td>table-cell</td>\n<td>此元素会作为一个表格单元格显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code>）</td>\n</tr>\n<tr>\n<td>table-caption</td>\n<td>此元素会作为一个表格标题显示（类似 <code>&lt;caption&gt;</code>）</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 display 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，<code>inline</code>、<code>inline-block</code>、<code>block</code> 的区别是：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>block</th>\n<th>inline-block</th>\n<th>inline</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>大小</td>\n<td>填充其父容器的宽度。</td>\n<td>取决于内容。</td>\n<td>取决于内容。</td>\n</tr>\n<tr>\n<td>定位</td>\n<td>从新的一行开始，并且不允许旁边有 HTML 元素(除非是float)</td>\n<td>与其他内容一起流动，并允许旁边有其他元素。</td>\n<td>与其他内容一起流动，并允许旁边有其他元素。</td>\n</tr>\n<tr>\n<td>能否设置 width 和 height</td>\n<td>能</td>\n<td>能</td>\n<td>不能。设置会被忽略。</td>\n</tr>\n<tr>\n<td>可以使用 vertical-align 对齐</td>\n<td>不可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>边距(margin)和填充(padding)</td>\n<td>各个方向都存在</td>\n<td>各个方向都存在</td>\n<td>只有水平方向存在。垂直方向会被忽略。尽管 border 和 padding 在 content 周围，但垂直方向上的空间取决于 \'line-height\'</td>\n</tr>\n<tr>\n<td>浮动(float)</td>\n<td>-</td>\n<td>-</td>\n<td>就像一个 block 元素，可以设置垂直边距和填充。</td>\n</tr>\n</tbody>\n</table>\n<h3 id="font-%E5%B1%9E%E6%80%A7%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">font 属性如何设置字体？<a class="anchor" href="#font-%E5%B1%9E%E6%80%A7%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">§</a></h3>\n<ul>\n<li>属性值\n<ul>\n<li>font-style:  设置字体风格(正常normal/斜体italic/倾斜oblique)</li>\n<li>font-variant: 设置字体变形(设定小型大写字母)</li>\n<li>font-weight: 设置文本的粗细（bold粗/或用关键字 100 ~ 900 给字体指定了 9 级加粗度）</li>\n<li>font-size: 设置文本的大小(1em=16px 相当于普通文本的默认大小)</li>\n<li>line-height:设置行间的距离（行高）--不能使用负值</li>\n<li>font-family: 设置字体类型(5种通用字体/指定字体)</li>\n</ul>\n</li>\n<li>注意事项\n<ul>\n<li>除了使用关键字的情况之外，该属性必须同时设置 <code>font-size</code> 和 <code>font-family</code> 属性值。</li>\n<li>并非所有的 <code>font-variant</code> 属性值是被允许的。只有在 CSS 2.1 里规定的值才被允许使用，它们是 <code>normal</code> 和 <code>small-caps</code>。</li>\n<li>属性值的顺序并非完全自由：如需设置 <code>font-style</code>， <code>font-variant</code> 和 <code>font-weight</code> 中任意一个或几个的值，它们必须要放在 <code>font-size</code> 值的前面。</li>\n<li><code>line-height</code> 值必须紧跟在 <code>font-size</code> 之后，并且要在属性值前面加上。</li>\n<li><code>font-family</code> 是必不可少的，且必须放在最后（inherit 值是无效的）</li>\n</ul>\n</li>\n<li>关键字用于表示某个特定的系统字体\n<ul>\n<li><code>caption</code>  用于标题控件（如按钮，下拉列表等）的字体。</li>\n<li><code>icon</code> 用于标签图标的字体。</li>\n</ul>\n</li>\n</ul>\n<h3 id="link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB">Link 和 @import 的区别？<a class="anchor" href="#link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB">§</a></h3>\n<ul>\n<li>link属于XHTML标签，而@import是CSS提供的。 ⻚面被加载时，link会同时被加载，而@import引用的CSS会等到⻚面被加载完再加载。</li>\n<li>import只在IE 5以上才能识别，而link是XHTML标签，无兼容问题。</li>\n<li>link方式的样式权重高于@import的权重。 使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是 dom可以控制的。</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-z-index">如何理解 z-index？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-z-index">§</a></h3>\n<ul>\n<li>CSS 中的z-index属性控制重叠元素的垂直叠加顺序</li>\n<li>默认元素的z-index为0</li>\n<li>我们可以修改z-index来控制元素的图层 位置</li>\n<li>而且z-index只能影响设置了position值的元素。</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-float">如何理解 float？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-float">§</a></h3>\n<h2 id="css-%E5%B8%83%E5%B1%80">CSS 布局<a class="anchor" href="#css-%E5%B8%83%E5%B1%80">§</a></h2>\n<h3 id="css-%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%A7%84%E5%88%99">CSS 盒模型及其规则？<a class="anchor" href="#css-%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%A7%84%E5%88%99">§</a></h3>\n<ul>\n<li>CSS 盒模型描述了以文档树中的元素而生成的矩形框，并根据排版模式进行布局。</li>\n<li>盒模型 content、padding、border、margin 组成。</li>\n<li>CSS盒模型负责计算：\n<ul>\n<li>块级元素占用多少空间。</li>\n<li>边框是否重叠，边距是否合并。</li>\n<li>盒子的尺寸。</li>\n</ul>\n</li>\n<li>盒模型有以下规则：\n<ul>\n<li>块级元素的大小由width、height、padding、border和margin决定。</li>\n<li>如果没有指定height，则块级元素的高度等于其包含子元素的内容高度加上padding（除非有浮动元素，请参阅下文）。</li>\n<li>如果没有指定width，则非浮动块级元素的宽度等于其父元素的宽度减去父元素的padding。</li>\n<li>元素的height是由内容的height来计算的。</li>\n<li>元素的width是由内容的width来计算的。</li>\n<li>默认情况下，padding和border不是元素width和height的组成部分。</li>\n</ul>\n</li>\n<li>标准盒子模型：\n<ul>\n<li>在W3C标准下，我们定义元素的width值即为盒模型中的content的宽度值，height值即为盒模型中的content的高度值。</li>\n<li>元素的宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</li>\n</ul>\n</li>\n<li>怪异盒模型：\n<ul>\n<li>而IE怪异盒模型(IE8以下)width的宽度并不是content的宽度，而是border-left + padding-left + content的宽度值 + padding-right + border-right之和，height同理。</li>\n<li>元素占据的宽度 = margin-left + width + margin-right</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8Bfc%E6%98%AF%E4%BB%80%E4%B9%88">CSS 可视化格式模型（FC）是什么？<a class="anchor" href="#css-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8Bfc%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h3>\n<ul>\n<li>说到底，CSS 的可视化格式模型就是规定了浏览器在页面中如何处理文档树。\n<ul>\n<li>CSS中规定每一个元素都有自己的盒子模型(相当于规定了这个元素如何显示)</li>\n<li>然后可视化格式模型则是把这些盒子按照规则摆放到页面上，也就是如何布局</li>\n<li>换句话说，盒子模型规定了怎么在页面里摆放盒子，盒子的相互作用等等</li>\n</ul>\n</li>\n<li>CSS 有三种定位机制：普通流，浮动，绝对定位，如无特别提及，一般都是针对普通流中的</li>\n</ul>\n<p>关键字：</p>\n<ul>\n<li>包含块(Containing Block)：一个元素的 box 的定位和尺寸，会与某一矩形框有关，这个框就称之为包含块。元素会为它的子孙元素创建包含块，但是，并不是说元素的包含块就是它的父元素，元素的包含块与它的祖先元素的样式等有关系。\n<ul>\n<li>根元素是最顶端的元素，它没有父节点，它的包含块就是初始包含块</li>\n<li>static 和 relative 的包含块由它最近的块级、单元格或者行内块祖先元素的内容框(content)创建</li>\n<li>fixed的包含块是当前可视窗口</li>\n<li>absolute 的包含块由它最近的 position 属性为 absolute、relative 或者 fixed 的祖先元素创建</li>\n<li>如果其祖先元素是行内元素，则包含块取决于其祖先元素的 direction 特性</li>\n<li>如果祖先元素不是行内元素，那么包含块的区域应该是祖先元素的内边距边界</li>\n</ul>\n</li>\n<li>控制框(Controlling Box)：\n<ul>\n<li>块级元素和块框以及行内元素和行框的相关概念。</li>\n<li>如果一个框里，有一个块级元素，那么这个框里的内容都会被当作块框来进行格式化，因为只要出现了块级元素，就会将里面的内容分块几块，每一块独占一行。出现行内可以用匿名块框解决。</li>\n<li>如果一个框里，没有任何块级元素，那么这个框里的内容会被当成行内框来格式化，因为里面的内容是按照顺序成行的排列。</li>\n</ul>\n</li>\n<li>块框：\n<ul>\n<li>块级元素会生成一个块框 Block Box，块框会占据一整行，用来包含子 box 和生成的内容</li>\n<li>块框同时也是一个块包含框 Containing Box，里面要么只包含块框，要么只包含行内框(不能混杂)，如果块框内部有块级元素也有行内元素，那么行内元素会被匿名块框包围</li>\n</ul>\n</li>\n<li>匿名块框：如果一个块框在其中包含另外一个块框，那么我们强迫它只能包含块框，因此其它文本内容生成出来的都是匿名块框(而不是匿名行内框)。<code>&lt;DIV&gt;Some text&lt;P&gt;More text&lt;/P&gt;&lt;/DIV&gt;</code>。</li>\n<li>匿名内框：<code>&lt;P&gt;Some &lt;EM&gt;emphasized&lt;/EM&gt; text&lt;/P&gt;</code>。</li>\n<li>FC：格式化上下文，定义框内部的元素渲染规则，比较抽象，譬如：\n<ul>\n<li>FC 像是一个大箱子，里面装有很多元素</li>\n<li>箱子可以隔开里面的元素和外面的元素(所以外部不会影响 FC 内部渲染)</li>\n<li>内部的规则可以是：如何定位，宽高计算，margin 折叠等</li>\n<li>不同类型的框参与的 FC 类型不同，譬如块级框对应 BFC，行内框对应 IFC。并不是所有框都会产生 FC，而需符合特定条件。</li>\n</ul>\n</li>\n<li>BFC(Block Formatting Context)：块格式化上下文\n<ul>\n<li>\n<p>在 BFC 中，每一个元素左外边与包含块的左边相接触(对于从右到左的格式化，右外边接触包含块的右边)，即使清除浮动也是如此，除非这个元素也创建了一个新的 BFC。浮动元素一般会直接贴近它的包含块的左边，与普通元素重合。</p>\n<ul>\n<li>Box: CSS布局的基本单位，Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个⻚面是由很多个 Box 组成的，实际就是上个问题说的盒模型。</li>\n<li>Formatting context:块级上下文格式化，它是⻚面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素 将如何定位，以及和其他元素的关系和相互作用</li>\n</ul>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>内部 box 在垂直方向，一个接一个的放置</li>\n<li>box 的垂直方向由 margin 决定，属于同一个 BFC 的两个 box 间的 margin 会重叠</li>\n<li>BFC 区域不会与 float box 重叠（可用于排版)</li>\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</li>\n<li>计算 BFC 的高度时，浮动元素也参与计算(不会浮动坍塌)</li>\n</ul>\n</li>\n<li>\n<p>如何触发：</p>\n<ul>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, flex, inline-flex，table，table-cell，table-caption</li>\n<li>overflow 不为 visible</li>\n</ul>\n</li>\n<li>\n<p>注：display: table 本身不产生 BFC，但是会产生匿名框，而这个匿名框产生 BFC。匿名框包含 display: table-cell 的框</p>\n</li>\n</ul>\n</li>\n<li>IFC(Inline Formatting Context)：行内格式化上下文。\n<ul>\n<li>相比 BFC 规则来说，IFC 可能更加抽象——IFC 没有那么条理清晰的规则和触发条件。但总的来说，它就是行内元素自身如何显示以及在框内如何摆放的渲染规则，这样描述应该更容易理解。</li>\n<li>规则：\n<ul>\n<li>在行内格式化上下文中</li>\n<li>框一个接一个地水平排列，起点是包含块的顶部。</li>\n<li>水平方向上的 margin，border 和 padding 在框之间得到保留</li>\n<li>框在垂直方向上可以以不同的方式对齐：它们的顶部或底部对齐，或根据其中文字的基线对齐</li>\n</ul>\n</li>\n<li>行内元素与 IFC：\n<ul>\n<li>行内元素总是会应用 IFC 渲染规则</li>\n<li>行内元素会应用 IFC 规则渲染，譬如 text-align 可以用来居中等</li>\n<li>块框内部，对于文本这类的匿名元素，会产生匿名行框包围，而行框内部就应用 IFC 渲染规则</li>\n<li>行内框内部，对于那些行内元素，一样应用IFC渲染规则</li>\n<li>inline-block，会在元素外层产生 IFC(所以这个元素是可以通过 text-align 水平居中的)，当然，它内部则按照 BFC 规则渲染</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>行内框：一个行内元素生成一个行内框；行内元素能排在一行，允许左右有其它元素。</li>\n<li>行框：宽度由它的包含块和其中的浮动元素决定，高度的确定由行高度计算规则决定。行框的规则：\n<ul>\n<li>如果几个行内框在水平方向无法放入一个行框内，它们可以分配在两个或多个垂直堆叠的行框中(即行内框的分割)</li>\n<li>行框在堆叠时没有垂直方向上的分割且永不重叠</li>\n<li>行框的高度总是足够容纳所包含的所有框。不过，它可能高于它包含的最高的框(例如，框对齐会引起基线对齐)</li>\n<li>行框的左边接触到其包含块的左边，右边接触到其包含块的右边。</li>\n</ul>\n</li>\n<li>定位体系</li>\n<li>浮动</li>\n<li>...</li>\n</ul>\n<p>display 对不同框的影响：</p>\n<ul>\n<li>block，元素生成一个块框</li>\n<li>inline，元素产生一个或多个的行内框</li>\n<li>inline-block，元素产生一个行内级块框，行内块框的内部会被当作块块来格式化，而此元素本身会被当作行内级框来格式化(这也是为什么会产生BFC)</li>\n<li>none，不生成框，不再格式化结构中，当然了，另一个 visibility: hidden 则会产生一个不可见的框</li>\n</ul>\n<h3 id="%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87">如何理解 CSS 层叠上下文？<a class="anchor" href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87">§</a></h3>\n<blockquote>\n<p><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/</a></p>\n</blockquote>\n<ul>\n<li>层叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向(电脑屏幕的)视窗或者网⻚的用户的z 轴上延伸，HTML元素依据其自身属性按照优先级顺序占用层叠上下文的空间。</li>\n<li>触发以下条件则会产生层叠上下文：\n<ul>\n<li>根元素 (HTML)</li>\n<li>z-index 值不为 &quot;auto&quot;的 绝对/相对定位，</li>\n<li>一个 z-index 值不为 &quot;auto&quot;的 flex 项目 (flex item)，即:父元素 display: flex|inline-flex</li>\n<li>opacity 属性值小于 1 的元素(参考 the specification for opacity)，</li>\n<li>transform 属性值不为 &quot;none&quot;的元素，</li>\n<li>mix-blend-mode 属性值不为 &quot;normal&quot;的元素，</li>\n<li>filter值不为“none”的元素，</li>\n<li>perspective值不为“none”的元素，</li>\n<li>isolation 属性被设置为 &quot;isolate&quot;的元素，</li>\n<li>position: fixed</li>\n<li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值(参考 这篇文章)</li>\n<li>-webkit-overflow-scrolling 属性被设置 &quot;touch&quot;的元素</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">CSS 布局模型是怎样的？<a class="anchor" href="#css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">§</a></h3>\n<ul>\n<li>布局是承上启下的中间环节，渲染树是从 DOM 树映射而来的可布局的层级关系，通过应用布局属性确定视图排版。同时布局更是性能的瓶颈所在，需要灵活运用缓存、线程切换等手段来优化性能。</li>\n<li>把布局和视图生成两部分从整个架构中抽离出来，也可成为客户端 UI 框架。</li>\n<li>布局模型的基本属性：\n<ul>\n<li>CSS 2.1 定义了以下 4 个布局模型。\n<ul>\n<li>block layout，块级布局。侧重于垂直方向。</li>\n<li>inline layout，行内布局。侧重于水平方向。</li>\n<li>table layout，表格布局。</li>\n<li>positioned layout</li>\n</ul>\n</li>\n<li>CSS 3 引入了以下布局模型。\n<ul>\n<li>flex layout，弹性盒布局。与方向无关。主要适用于应用程序的组件及小规模的布局。</li>\n<li>CSS Grid Layout。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>固定布局。通过固定页面高度宽度像素大小来实现。\n<ul>\n<li>优点：上手快，大小固定，便于理解。</li>\n<li>缺点：大小无法改变，无法动态化适应各个分辨率的终端设备。</li>\n</ul>\n</li>\n<li>百分比布局。使用百分比来代替传统 px 作为单位。\n<ul>\n<li>优点：很好解决自适应需求。</li>\n<li>缺点：不够灵活，当增加更多的百分比元素会导致内容溢出。</li>\n</ul>\n</li>\n<li>浮动布局。通过 <code>display</code>、<code>float</code> 和 <code>clear</code> 等属性实现。\n<ul>\n<li>优点：在没有 flexbox 时应用广泛。</li>\n<li>缺点：不易理解，需要注意清除浮动， 没有垂直居中，没有等高，也没有顺序无关性。</li>\n</ul>\n</li>\n<li>定位布局。通过 <code>postion</code>、<code>left</code>、<code>top</code> 等属性实现。\n<ul>\n<li>优点：可以绝对定位和相对定位。</li>\n</ul>\n</li>\n<li>Flexbox 布局。\n<ul>\n<li>优点：拥有顺序无关性，良好支持响应式布局，方便垂直居中和等高操作。可以在沿 X 轴排列和沿 Y 轴排列间互相转换 可缩可放，可行可列，还有自适应空间能力。 同一效果可以有多种实现写法</li>\n<li>缺点：对旧版本(PC 端、移动端)浏览器兼容性不足，一维布局系统，只适合做局部布局</li>\n</ul>\n</li>\n<li>Grid 布局。\n<ul>\n<li>优点：二维布局系统，通常用于整个页面的规划。</li>\n<li>缺点：对一些新浏览器其兼容性也不足。</li>\n</ul>\n</li>\n<li>表格布局。通过 <code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code> 等标签或通过 <code>display:table</code> 来实现。\n<ul>\n<li>优点：能垂直居中，还能等高。</li>\n<li>缺点：没有顺序无关性，边框问题费劲，应对响应式布局能力有限。</li>\n</ul>\n</li>\n<li>Multi-column 多列布局。</li>\n<li>流式布局。</li>\n<li>居中布局</li>\n<li>全局布局</li>\n<li>多列等高布局</li>\n<li>以下混合方案可通过多种布局技术来实现。\n<ul>\n<li>基本网格布局(平均布局)。</li>\n<li>栅格布局。</li>\n<li>流体布局：利用元素“流”的特性实现的各类布局效果。</li>\n<li>自适应布局：包括表格布局，凡是具有自适应特性实现的各类布局效果。</li>\n<li>圣杯布局。下图左侧为圣杯布局模型，右侧为响应式结果。</li>\n<li>双飞翼布局。</li>\n</ul>\n</li>\n</ul>\n<h3 id="css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3">CSS 布局模型的算法思想？<a class="anchor" href="#css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3">§</a></h3>\n<p>一个对象的布局由位置和尺寸这两个要素唯一确定，但实际使用中很少需要为其赋予绝对值来指定排版，而是通过指定相对位置、相对宽高、相互关系来间接实现。所以布局要做的就是从这些相对信息中推算出每个对象的绝对信息，通过多次从根节点开始向下遍历，以及从子节点向上回溯，不断估计、修正，计算出树上每个节点的唯一布局。</p>\n<p>无论何种框架，要实现通过用网页的规范或自定义的模板规范来达到动态控制原生 UI，都会包含以下过程：</p>\n<ul>\n<li>HTML 或模板解析，构建 DOM 树</li>\n<li>CSS 样式解析，并转换为原生系统属性</li>\n<li>动态数据解析及注入</li>\n<li>从 DOM 树构建渲染树</li>\n<li>对渲染树各节点应用样式，并计算布局</li>\n<li>对渲染树各节点绑定事件，实现 JS 和原生方法之间的互相调用</li>\n<li>从渲染树生成视图，最终显示</li>\n</ul>\n<p>React-Native 和 Weex 的核心布局算法都采用 Facebook 开源的 CSSLayout 算法，CSSLayout 基于 W3C 标准的 Flexbox 模型对页面元素排版，同时也支持相对布局和绝对布局，iOS 和 Andriod 平台都适用。</p>\n<p>CSSLayout 对容器可应用 <code>FlexDirection</code>、<code>FlexWrap</code>、<code>JustifiyContent</code>、<code>AlignItems</code>、<code>AlignContent</code> 属性。对元素可应用 <code>Flex</code>、<code>AlignSelf</code> 属性（除了 Flex 属性，还支持普通的 Position 和 Overflow 属性）。</p>\n<p>布局算法把外部传入的计算属性先转化为对应的数组，通过下标访问具体值，而下标又是通过主轴、交叉轴构造的映射关系表来获取。</p>\n<p>计算过程用到的样式属性如下。</p>\n<ul>\n<li>crossAxis、mainAxis、margin、padding、leading、trailing</li>\n<li>minHeight、height、maxHeight、minWidth、width、maxWidth</li>\n</ul>\n<p>计算过程中用到的布局属性如下。</p>\n<ul>\n<li>位置 position，包括 left、top、right、bottom 四个定位值。</li>\n<li>尺寸 dimension，包括 width 和 height。</li>\n<li>估计尺寸 measuredDimension，包括 width 和 height，measuredDimension 是计算过程中的中间变量，几次迭代后得到最终的 dimension。</li>\n</ul>\n<p>CSSLayout 算法首先对内容节点、叶子节点和非布局节点这三种情况进行预处理，提前返回，减少走完整个流程的次数，尽可能的减少计算量。</p>\n<p>CSSLayout 算法中的缓存分为两个层次，如下。</p>\n<ul>\n<li><code>cached_layout</code> 把渲染树中所有节点的布局结果和估计结果都缓存起来，内部通过 <code>CSSCachedMeasurement</code> 数据结构来维护，只有当两棵渲染树计算条件完全匹配时才会触发，复用要求高。</li>\n<li><code>cachedMeasurement</code>  把中间的估算结果缓存起来，内部缓存最近 16 次的计算结果， 在渲染树增量更新、插入节点等部分更新情况下避免重复估算尺寸，复用要求低。</li>\n</ul>\n<h3 id="flexbox-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">Flexbox 基础概念？<a class="anchor" href="#flexbox-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">§</a></h3>\n<blockquote>\n<p>时代背景：随着终端设备的多样化发展，需要拥有足够的定义来支持那些必须随用户代理(user agent)不同或设备方向从水平转为垂直等各种变化而变换方向、调整大小、拉伸、收缩的应用程序组件。</p>\n</blockquote>\n<p>flexbox 是一种布局机制。分为弹性容器(Flex container)和弹性项目(Flex item)，分别有自己的属性。在 flex 中，弹性容器的子元素可以在任何方向上排布，也可以“弹性伸缩”其尺寸，既可以增加尺寸以填满未使用的空间，也可以收缩尺寸以避免父元素溢出。</p>\n<p>flexbox 被期望设计为：</p>\n<ul>\n<li>在任何流动的方向上(包括上下左右)都能进行良好的布局。</li>\n<li>可以以逆序或者以任意顺序排列布局。</li>\n<li>可以线性的沿着主轴一字排开 或者 沿着侧轴换行排列。</li>\n<li>可以弹性的在任意的容器中伸缩大小。</li>\n<li>可以使子元素们在容器主轴方向上或者在容器侧轴方向上进行对齐。</li>\n<li>可以动态的 沿着主轴方向伸缩子级的尺寸，与此同时保证父级侧轴方向上的尺寸。</li>\n</ul>\n<p>优点：告别使用浮动的 <code>&lt;div&gt;</code> 元素、绝对定位和一些 JavaScript hacks，使用仅仅几行 CSS 就可以构建出水平或垂直方向的布局。</p>\n<p>缺点：一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。</p>\n<pre class="language-css"><code class="language-css"><span class="token comment">/* Flexbox 容器属性 */</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">/* flex-direction 决定主轴的方向。 */</span>\n  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span>\n  <span class="token comment">/* flex-wrap 定义如果一条轴线排不下，如何换行。 */</span>\n  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span>\n  <span class="token comment">/* flex-flow 是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。 */</span>\n  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span>\n  <span class="token comment">/* justify-content 定义了项目在主轴上的对齐方式。 */</span>\n  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span>\n  <span class="token comment">/* align-items 定义项目在交叉轴上如何对齐。 */</span>\n  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>\n  <span class="token comment">/* align-content 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 */</span>\n  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* Flexbox 项目属性 */</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">/* order 定义项目的排列顺序。数值越小，排列越靠前，默认为 0。 */</span>\n  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer><span class="token punctuation">;</span>\n  <span class="token comment">/* flex-grow 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。 */</span>\n  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment">/* default 0 */</span>\n  <span class="token comment">/* flex-shrink 定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。 */</span>\n  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment">/* default 1 */</span>\n  <span class="token comment">/* flex-basis 定义了在分配多余空间之前，项目占据的主轴空间。 */</span>\n  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length> | auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span>\n  <span class="token comment">/* flex 是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。 */</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">\'flex-grow\'</span>> &lt;<span class="token string">\'flex-shrink\'</span>>? || &lt;<span class="token string">\'flex-basis\'</span>> ]\n  <span class="token comment">/* align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 */</span>\n  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="flexbox-%E8%A6%81%E7%82%B9%E9%A1%BB%E7%9F%A5">Flexbox 要点须知？<a class="anchor" href="#flexbox-%E8%A6%81%E7%82%B9%E9%A1%BB%E7%9F%A5">§</a></h3>\n<p>Flexbox 相关词汇：需要我们从诸如水平/行内轴和垂直/块级轴这些术语中解放出来，用一套新的术语来正确描述此模型。</p>\n<ul>\n<li>Flex container，弹性容器。包含弹性项目的父元素。通过设置 <code>display</code> 属性的值为 <code>flex</code> 或 <code>inline-flex</code> 来定义弹性容器。值 <code>flex</code> 使弹性容器成为块级元素。值 <code>inline-flex</code> 使弹性容器成为单个不可分的行内级元素。</li>\n<li>Flex item，弹性项目。弹性容器的每个子元素。</li>\n<li>Axis，轴。每个弹性框布局包含两个轴。弹性项目沿其依次排列的那根轴称为主轴(main axis)。垂直于主轴的那根轴称为侧轴(cross axis)。\n<ul>\n<li><code>flex-direction</code> 确立主轴。</li>\n<li><code>justify-content</code> 定义了在当前行上，弹性项目沿主轴如何排布。</li>\n<li><code>align-items</code> 定义了在当前行上，弹性项目沿侧轴默认如何排布。</li>\n<li><code>align-self</code> 定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 <code>align-items</code> 所确立的默认值。</li>\n</ul>\n</li>\n<li>Direction，方向。弹性容器的主轴起点(main start)/主轴终点(main end)和侧轴起点(cross start)/侧轴终点(cross end)描述了弹性项目排布的起点与终点。\n<ul>\n<li><code>order</code> 属性将元素与序号关联起来，以此决定哪些元素先出现。order 属性并不影响语音和导航的次序。</li>\n<li><code>flex-flow</code> 属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 属性的简写，决定弹性项目如何排布。</li>\n</ul>\n</li>\n<li>Line，行。根据 <code>flex-wrap</code> 属性，弹性项目可以排布在单个行或者多个行中。此属性控制侧轴的方向和新行排列的方向。</li>\n<li>Dimension，尺寸。根据弹性容器的主轴与侧轴，弹性项目的宽和高中，对应主轴的称为主轴尺寸(main size) ，对应侧轴的称为 侧轴尺寸(cross size)。\n<ul>\n<li><code>min-height</code> 与 <code>min-width</code> 属性初始值将为 0。</li>\n<li><code>flex</code> 属性是 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 属性的简写，描述弹性项目的整体的伸缩性。</li>\n</ul>\n</li>\n</ul>\n<p>Flexbox 要点须知</p>\n<ul>\n<li>弹性容器直接包含的文本（除只包含一系列空白符外）将被包覆成匿名弹性单元。</li>\n<li>对于弹性容器的绝对定位子元素来说，其静态位置参照弹性容器的内容框的主起始角确定，而后依此完成此元素的定位。</li>\n<li>相邻的弹性元素其外边距不会互相合并。使用 auto 外边距可以吸收掉水平或垂直方向上的额外空间，这可以用于对齐或分隔相邻的弹性项目。</li>\n<li>不像 CSS 中的其他对齐方法，弹性框的对齐属性将进行“真正的”居中对齐。这意味着即使弹性条目溢出了弹性容器，它依然保持居中。如果溢出超过了页面的上边缘或左边缘，则虽然那些地方确实有内容，却无法滚动到那些位置。在未来的发布版本里，对齐属性将会包含有“安全”选项。</li>\n<li>多栏布局模块的 <code>column-*</code> 属性对弹性项目无效。</li>\n<li><code>float</code> 与 <code>clear</code> 对弹性项目无效。使用 <code>float</code> 将使元素的 <code>display</code> 属性计为 <code>block</code>。</li>\n<li><code>vertical-align</code> 对弹性项目的对齐无效。</li>\n<li>只要 break- 属性的设置值允许，在弹性框布局中是可以存在分页的。CSS3 中的 <code>break-after</code>、<code>break-before</code> 和 <code>break-inside</code>，以及 CSS 2.1 中的 <code>page-break-before</code>、<code>page-break-after</code> 和 <code>page-break-inside</code> 属性在弹性容器上、弹性项目上和弹性项目内均可以使用。</li>\n</ul>\n<h3 id="css-grid-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">CSS Grid 如何使用？<a class="anchor" href="#css-grid-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">§</a></h3>'
        } }),
    'contentHasKatex': false,
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#css-%E5%9F%BA%E7%A1%80%E5%92%8C%E8%A7%84%E8%8C%83">CSS 基础和规范</a><ol><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B7%E5%BC%8F%E8%A1%A8">什么是样式表？</a></li><li><a href="#css3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7">CSS3 有哪些新特性？</a></li><li><a href="#css-%E5%90%84%E7%A7%8D%E6%95%B0%E5%80%BC%E5%8D%95%E4%BD%8D">CSS 各种数值单位？</a></li><li><a href="#css-resetting-%E5%92%8C-css-normalizing">CSS Resetting 和 CSS Normalizing？</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-css-%E7%9A%84-bembnf-%E8%A7%84%E8%8C%83">什么是 CSS 的 BEM、BNF 规范？</a></li></ol></li><li><a href="#%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7">选择器与属性</a><ol><li><a href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB">CSS 选择器的分类？</a></li><li><a href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">CSS 选择器的优先级是怎样的？</a></li><li><a href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%E5%8E%9F%E5%88%99%E5%8F%8A%E4%BC%98%E5%8C%96%E5%87%86%E5%88%99">CSS 选择器查询原则及优化准则</a></li><li><a href="#css-%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B">CSS 伪类与伪元素都有哪些？</a></li><li><a href="#css-%E4%B8%AD%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E6%89%BF">CSS 中哪些属性可以被继承？</a></li><li><a href="#position-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">position 属性都有哪些值？</a></li><li><a href="#display-%E5%B1%9E%E6%80%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC">display 属性都有哪些值？</a></li><li><a href="#font-%E5%B1%9E%E6%80%A7%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">font 属性如何设置字体？</a></li><li><a href="#link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB">Link 和 @import 的区别？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-z-index">如何理解 z-index？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-float">如何理解 float？</a></li></ol></li><li><a href="#css-%E5%B8%83%E5%B1%80">CSS 布局</a><ol><li><a href="#css-%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%A7%84%E5%88%99">CSS 盒模型及其规则？</a></li><li><a href="#css-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8Bfc%E6%98%AF%E4%BB%80%E4%B9%88">CSS 可视化格式模型（FC）是什么？</a></li><li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87">如何理解 CSS 层叠上下文？</a></li><li><a href="#css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">CSS 布局模型是怎样的？</a></li><li><a href="#css-%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3">CSS 布局模型的算法思想？</a></li><li><a href="#flexbox-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">Flexbox 基础概念？</a></li><li><a href="#flexbox-%E8%A6%81%E7%82%B9%E9%A1%BB%E7%9F%A5">Flexbox 要点须知？</a></li><li><a href="#css-grid-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">CSS Grid 如何使用？</a></li></ol></li></ol></nav>'
        } }),
    'date': "2020-10-27T07:34:52.000Z",
    'updated': null,
    'author': "hylerrix",
    'contributors': [
        "hylerrix"
    ]
};
